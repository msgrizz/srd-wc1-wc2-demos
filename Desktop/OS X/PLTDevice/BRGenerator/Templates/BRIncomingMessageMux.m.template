//
//  BRIncomingMessageMux.m
//  BRDevice
//
//  Auto-generated from deckard.xml v<#deckard_version#> on <#mdy#>.
//  Copyright (c) <#yyyy#> Plantronics. All rights reserved.
//

#import "BRIncomingMessageMux.h"
#import "BRIncomingMessage.h"
#import "BRTypeImports.h"
#import "PLTDLog.h"


@implementation BRIncomingMessageMux

+ (BRIncomingMessage *)messageWithData:(NSData *)data
{
	uint8_t messageType;
	NSData *messageTypeData = [data subdataWithRange:NSMakeRange(5, sizeof(uint8_t))];
	[messageTypeData getBytes:&messageType length:sizeof(uint8_t)];
	messageType &= 0x0F; // messageType is actually the second nibble in byte 5
	
	uint16_t deckardID;
	NSData *deckardIDData = [data subdataWithRange:NSMakeRange(6, sizeof(uint16_t))];
	[deckardIDData getBytes:&deckardID length:sizeof(uint16_t)];
	deckardID = ntohs(deckardID);
			
	Class class = nil;

	switch (messageType) {

		case BRMessageTypeCommandResultException:
		case BRMessageTypeSettingResultException:
			DLog(DLogLevelError, @"*** BRMessageType...ResultException ***");

			switch (deckardID) {
<#exception_mux_case_block#>
				default:
					NSLog(@"Error: unknown Deckard exception 0x%04X", deckardID);
					// some way to relay this would be nice
					break;
			}
			break;
			
		case BRMessageTypeSettingResultSuccess:
			DLog(DLogLevelTrace, @"BRMessageTypeSettingResultSuccess");
			
			switch (deckardID) {
<#setting_result_success_mux_case_block#>
				default:
					NSLog(@"Error: unknown Deckard setting 0x%04X", deckardID);
					// some way to relay this would be nice
					break;
			}
			break;

		case BRMessageTypeEvent:
			DLog(DLogLevelTrace, @"BRMessageTypeEvent");

			switch (deckardID) {
<#event_mux_case_block#>
				default:
					NSLog(@"Error: unknown Deckard event 0x%04X", deckardID);
					// some way to relay this would be nice
					break;
			}
			break;

		default:
			DLog(DLogLevelWarn, @"Error: unknown message type 0x%01X", messageType);
			break;
	}

	if (class) {
		return [class messageWithData:data];
	}

	return nil;
}

@end
