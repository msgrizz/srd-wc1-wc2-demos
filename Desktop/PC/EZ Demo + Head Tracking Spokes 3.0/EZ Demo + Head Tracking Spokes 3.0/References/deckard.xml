<?xml version="1.0" encoding="UTF-8"?>
<!-- Deckard Feature Registry v2.3  -->
<!-- $Header: //plantronics/NPD/technologies/deckard/dev-2.3/xml/deckard.xml#51 $ -->
<!-- NOTE:   the range 0xDD00-0xDEF is reserved for  Spokes specific items that don't				  -->
<!--         belong in the Spokes Compatibility section.									          -->
<registry service="82972387-294E-4D62-97B5-2668AA35F618">
    <!-- XXX To do: Add means to declare the relationships between related commands, settings, events -->
    
    <section title="Testing - Unit tests (0x00nn)">
        
        <comment>These are basic unit test-related features to be implemented by all devices.</comment>
        
        <!-- Unit test commands -->
        <command name="Start generating events" id="0x0001" streamingId="0x0004">
            
            <payload_in>
                <item type="INT" name="count">
                    <comment>The number of events to generate.</comment>
                </item>
                <item type="INT" name="delay">
                    <comment>The number of milliseconds between repetitions.</comment>
                </item>
                <item type="INT" name="dataLength">
                    <comment>The length of the byte array to be included in the events.</comment>
                </item>
            </payload_in>
            <payload_out/>
            
            <comment>
                Start generating "Periodic test event" events. The arguments are: the number of events to
                generate, the number of milliseconds to pause between events, and the length of the byte
                array to include in each generated event.
            </comment>
            
        </command>
        
        <command name="Set one boolean" id="0x0050" associatedSettingId="0x0050" associatedEventId="0x0050">
            
            <payload_in>
                <item type="BOOLEAN" name="value">
                    <comment>
                        Set a boolean.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For unit testing: Set a boolean value for later retrieval and comparison.
            </comment>
            
        </command>
        
        <command name="Set one byte" id="0x0051" associatedSettingId="0x0051" associatedEventId="0x0051">
            
            <payload_in>
                <item type="BYTE" name="value">
                    <comment>
                        A byte.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For unit testing: set a byte value for later retrieval and comparison.
            </comment>
            
        </command>
        
        <command name="Set one short" id="0x0052" associatedSettingId="0x0052" associatedEventId="0x0052">
            
            <payload_in>
                <item type="SHORT" name="value">
                    <comment>
                        A short.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For unit testing: set a short value for later retrieval and comparison.
            </comment>
            
        </command>
        
        <command name="Set one int" id="0x0053" associatedSettingId="0x0053" associatedEventId="0x0053">
            
            <payload_in>
                <item type="INT" name="value">
                    <comment>
                        An int.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For unit testing: set an int value for later retrieval and comparison.
            </comment>
            
        </command>
        
        <command name="Set one long" id="0x0054" associatedSettingId="0x0054" associatedEventId="0x0054">
            
            <payload_in>
                <item type="LONG" name="value">
                    <comment>
                        A long.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For unit testing: set a long value for later retrieval and comparison.
            </comment>
            
        </command>
        
        <command name="Set one string" id="0x0055" associatedSettingId="0x0055" associatedEventId="0x0055">
            
            <payload_in>
                <item type="STRING" name="value">
                    <comment>
                        A string.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For unit testing: set a string value for later retrieval and comparison.
            </comment>
            
        </command>
        
        <command name="Set one short array" id="0x0056" associatedSettingId="0x0056" associatedEventId="0x0056">
            
            <payload_in>
                <item type="SHORT_ARRAY" name="value">
                    <comment>
                        A short array.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For unit testing: set a short[] value for later retrieval and comparison.
            </comment>
            
        </command>
        
        <command name="Set one byte array" id="0x0057" associatedSettingId="0x0057" associatedEventId="0x0057">
            
            <payload_in>
                <item type="BYTE_ARRAY" name="value">
                    <comment>
                        A byte array.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For unit testing: set a byte array value for later retrieval and comparison.
            </comment>
            
        </command>
        
        <command name="Set two booleans" id="0x0060" associatedSettingId="0x0060" associatedEventId="0x0060">
            
            <payload_in>
                <item type="BOOLEAN" name="first value">
                    <comment>
                        First boolean.
                    </comment>
                </item>
                <item type="BOOLEAN" name="second value">
                    <comment>
                        Second boolean.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For unit testing: set two booleans for later retrieval and comparison.
            </comment>
            
        </command>
        
        <command name="Set two strings" id="0x0061" associatedSettingId="0x0061" associatedEventId="0x0061">
            
            <payload_in>
                <item type="STRING" name="first value">
                    <comment>
                        First string.
                    </comment>
                </item>
                <item type="STRING" name="second value">
                    <comment>
                        Second string.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For unit testing: set two strings for later retrieval and comparison.
            </comment>
            
        </command>
        
        <!-- Unit test settings -->
        <setting name="One boolean" id="0x0050">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="value">
                    <comment>
                        A boolean.
                    </comment>
                </item>
            </payload_out>
            <comment>
                For unit testing: fetch the boolean value set by the "Set one boolean" command.
            </comment>
            
        </setting>
        
        <setting name="One byte" id="0x0051">
            <payload_in/>
            <payload_out>
                <item type="BYTE" name="value">
                    <comment>
                        A byte.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: fetch the byte value set by the "Set one byte" command.
            </comment>
            
        </setting>
        
        <setting name="One short" id="0x0052">
            <payload_in/>
            <payload_out>
                <item type="SHORT" name="value">
                    <comment>
                        A short.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: fetch the short value set by the "Set one short" command.
            </comment>
            
        </setting>
        
        <setting name="One int" id="0x0053">
            <payload_in/>
            <payload_out>
                <item type="INT" name="value">
                    <comment>
                        An int.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: fetch the int value set by the "Set one int" command.
            </comment>
            
        </setting>
        
        <setting name="One long" id="0x0054">
            <payload_in/>
            <payload_out>
                <item type="LONG" name="value">
                    <comment>
                        A long.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: fetch the long value set by the "Set one long" command.
            </comment>
            
        </setting>
        
        <setting name="One string" id="0x0055">
            <payload_in/>
            <payload_out>
                <item type="STRING" name="value">
                    <comment>
                        A string.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: fetch the string value set by the "Set one string" command.
            </comment>
            
        </setting>
        
        <setting name="One short array" id="0x0056">
            <payload_in/>
            <payload_out>
                <item type="SHORT_ARRAY" name="value">
                    <comment>
                        A short array.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: fetch the short[] value set by the "Set one short array" command.
            </comment>
            
        </setting>
        
        <setting name="One byte array" id="0x0057">
            <payload_in/>
            <payload_out>
                <item type="BYTE_ARRAY" name="value">
                    <comment>
                        A byte array.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: fetch the byte array value set by the "Set one byte array"
                command.
            </comment>
            
        </setting>
        
        <setting name="Two booleans" id="0x0060">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="first value">
                    <comment>
                        First boolean.
                    </comment>
                </item>
                <item type="BOOLEAN" name="second value">
                    <comment>
                        Second boolean.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: fetch the two boolean values set by the "Set two booleans"
                command.
            </comment>
            
        </setting>
        
        <setting name="Two strings" id="0x0061">
            <payload_in/>
            <payload_out>
                <item type="STRING" name="first value">
                    <comment>
                        First string.
                    </comment>
                </item>
                <item type="STRING" name="second value">
                    <comment>
                        Second string.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: fetch the two strings set by the "Set two strings" command.
            </comment>
            
        </setting>
        
        <!-- Unit test events -->
        <event name="Periodic test event" id="0x0004">
            
            <payload_out>
                <item type="LONG" name="time">
                    <comment>The time the event was generated.</comment>
                </item>
                <item type="BYTE_ARRAY" name="byteArray">
                    <comment>
                        An array of the length specified in the "Start generating events"
                        command.
                    </comment>
                </item>
                
            </payload_out>
            
            <comment>
                A test event generated by the "Start generating events" command. It contains
                the time the event was generated (as the number of milliseconds since 00:00:00
                UTC 1/1/1970, though this is not strictly required; any increasing LONG value will
                suffice) and a byte array of test data of unspecified content.
            </comment>
            
        </event>
        
        <event name="Set one boolean" id="0x0050">
            
            <payload_out>
                <item type="BOOLEAN" name="value">
                    <comment>
                        Notification that a boolean has been set.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: Notification that a boolean value has been changed.
            </comment>
            
        </event>
        
        <event name="Set one byte" id="0x0051">
            
            <payload_out>
                <item type="BYTE" name="value">
                    <comment>
                        A byte.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: Notification that a byte value has been changed.
            </comment>
            
        </event>
        
        <event name="Set one short" id="0x0052">
            
            <payload_out>
                <item type="SHORT" name="value">
                    <comment>
                        A short.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: Notification that a short value has been changed.
            </comment>
            
        </event>
        
        <event name="Set one int" id="0x0053">
            
            <payload_out>
                <item type="INT" name="value">
                    <comment>
                        An int.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: Notification that an int value has been changed.
            </comment>
            
        </event>
        
        <event name="Set one long" id="0x0054">
            
            <payload_out>
                <item type="LONG" name="value">
                    <comment>
                        A long.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: Notification that a long value has been changed.
            </comment>
            
        </event>
        
        <event name="Set one string" id="0x0055">
            
            <payload_out>
                <item type="STRING" name="value">
                    <comment>
                        A string.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: Notification that a string value has been changed.
            </comment>
            
        </event>
        
        <event name="Set one short array" id="0x0056">
            
            <payload_out>
                <item type="SHORT_ARRAY" name="value">
                    <comment>
                        A short array.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: Notification that a short array has been changed.
            </comment>
            
        </event>
        
        <event name="Set one byte array" id="0x0057">
            
            <payload_out>
                <item type="BYTE_ARRAY" name="value">
                    <comment>
                        A byte array.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: Notification that a byte array has been changed.
            </comment>
            
        </event>
        
        <event name="Set two booleans" id="0x0060">
            
            <payload_out>
                <item type="BOOLEAN" name="first value">
                    <comment>
                        First boolean.
                    </comment>
                </item>
                <item type="BOOLEAN" name="second value">
                    <comment>
                        Second boolean.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: Notification that a two bool value has been changed.
            </comment>
            
        </event>
        
        <event name="Set two strings" id="0x0061">
            
            <payload_out>
                <item type="STRING" name="first value">
                    <comment>
                        First string.
                    </comment>
                </item>
                <item type="STRING" name="second value">
                    <comment>
                        Second string.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                For unit testing: Notification that a two string value has been changed.
            </comment>
            
        </event>
        
    </section>
    
    <section title="Testing - Forcing errors (0x01nn)">
        
        <comment>
            <![CDATA[
                These features are intended for low-level testing during development <b>and should not be present in
                product software builds.</b>
            ]]>
        </comment>
        
        <command name="Throw command exception" id="0x0100">
            <payload_in/>
            <payload_out/>
            <throws>
                0x0100
            </throws>
            <comment>
                For testing only: tell the recipient to throw a "Simulated exception" in response to this command.
            </comment>
        </command>
        
        <command name="Send Command Success packet with length" id="0x0101">
            <payload_in>
                <item name="packetLength" type="SHORT">
                    <comment>The requested length of the reply packet</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For testing only: tell the recipient to send a Command Success packet with a given length.
            </comment>
        </command>
        
        <command name="Send Command Exception packet with length" id="0x0102">
            <payload_in>
                <item name="packetLength" type="SHORT">
                    <comment>The requested length of the reply packet</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For testing only: tell the recipient to send a Command Exception packet with a given length.
            </comment>
        </command>
        
        <command name="Close physical connection" id="0x0103">
            <payload_in>
                <item name="milliseconds" type="SHORT">
                    <comment>The delay (in msec) before closing the connection</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For testing only: tell the recipient to close the physical channel after some delay.
            </comment>
        </command>
        
        <command name="Send Device Attached event" id="0x0104">
            <payload_in>
                <item name="milliseconds" type="SHORT">
                    <comment>The delay (in msec) before sending the Device Attached event</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For testing only: tell the recipient to say that a device has attached to one of its ports.
            </comment>
        </command>
        
        <command name="Send Device Detached event" id="0x0105">
            <payload_in>
                <item name="milliseconds" type="SHORT">
                    <comment>The delay (in msec) before sending the Device Detached event</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                For testing only: tell the recipient to say that a device has detached from one of its ports.
            </comment>
        </command>
        
        <setting name="Throw setting exception" id="0x0100">
            <payload_in/>
            <payload_out/>
            <throws>
                0x0100
            </throws>
            <comment>
                For testing only: tell the recipient to throw a "Simulated exception" in
                response to this Setting.
            </comment>
        </setting>
        
        <exception name="Simulated exception" id="0x0100">
            <payload_out/>
            <comment>
                The recipient sends this exception then the initiator requests the "Throw setting exception"
                setting or executes the "Throw command exception" command.
            </comment>
        </exception>
        
    </section>
    
    <section title="Testing - Test Automation Messages (0x10nn)">
        
        <comment>
            These message definitions are intended for communication to and from devices in order to enable the
            simulation of user stimulus, enable the query of internal device status, and enable the report of
            asynchronous internal device status as necessary.
        </comment>
        
        <comment>
            <![CDATA[
                <br/>
                Note ***<br/>
                Team has agreed that individual Bluetooth profile testing is beyond the scope of the Moorea 2 Consumer System<br/>
                but does agree that this should be investigated during the Moorea 2 UC development.<br/>
                Requirements are for the individual profiles to be testable:<br/>
                <br/>
                HSP<br/>
                A2DP<br/>
                AVRCP<br/>
                PBAP<br/>
                MAP<br/>
                others<br/>
                <br/>
                Requirements are Connection/Disconnection<br/>
                Events (eg, audio, etc)<br/>
                <br/>
                Also need to include Fundamental Bluetooth connectivity verifications (eg Role Switch, etc)<br/>
            ]]>
        </comment>
        
        <command name="Test Interface Enable-Disable" id="0x1000">
            <payload_in>
                <item name="testInterfaceEnable" type="BOOLEAN">
                    <comment>True to enable test messaging, false to disable and ignore test messaging.</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Command to enable and disable test messaging to and from a device.  The test interface enable message
                must be sent to a device before any other test messages will be received as valid.  The test interface
                is disabled by default so that production devices cannot be stimulated by test messages under normal
                operation.
            </comment>
        </command>
        
        <command name="Button Simulation" id="0x1002">
            <payload_in>
                <item name="buttonAction" type="BYTE">
                    <comment>
                        <![CDATA[
                            <a name="buttonActions">
                            The physical button action to be simulated.<br/><br/>
                            0 = Short Key Press<br/>
                            1 = Medium Key Press<br/>
                            2 = Long Key Press<br/>
                            3 = Very Long Key Press<br/>
                            4 = Double Key Press<br/>
                            5 = Very Very Long Key Press<br/>
                            6 = Short-Long Key Press<br/>
                            7 = Press and Hold<br/>
                            8 = Release<br/></a>
                        ]]>
                    </comment>
                    <definedValue name="ButtonActionSkp"    value="0x00"/>  <!--Short Key Press-->
                    <definedValue name="ButtonActionMkp"    value="0x01"/>  <!--Medium Key Press-->
                    <definedValue name="ButtonActionLkp"    value="0x02"/>  <!--Long Key Press-->
                    <definedValue name="ButtonActionVlkp"   value="0x03"/>  <!--Very Long Key Press-->
                    <definedValue name="ButtonActionDkp"    value="0x04"/>  <!--Double Key Press-->
                    <definedValue name="ButtonActionVvlkp"  value="0x05"/>  <!--Very Very Long Key Press-->
                    <definedValue name="ButtonActionSlkp"   value="0x06"/>  <!--Short-Long Key Press-->
                    <definedValue name="ButtonActionPress"   value="0x07"/>  <!--Press and Hold-->
                    <definedValue name="ButtonActionRelease" value="0x08"/>  <!--Release-->
                </item>
                <item name="buttonIDs" type="SHORT_ARRAY">
                    <comment>
                        <![CDATA[
                            <a name="buttonValues">
                            The physical button IDs for which to simulate the button action.<br/><br/>
                            0 = Call Answer End<br/>
                            1 = Mute<br/>
                            2 = Volume Up<br/>
                            3 = Volume Down<br/>
                            4 = Mobile Call Answer End<br/>
                            5 = Computer Call Answer End<br/>
                            6 = Desk Phone Call nswer End<br/>
                            7 = Hook<br/>
                            8 = VR<br/>
                            <br/>
                            </a>
                        ]]>
                    </comment>
                    
                    <definedValue name="ButtonIdCallAnswerEnd"          value="0x0000"/>
                    <definedValue name="ButtonIdMute"                   value="0x0001"/>
                    <definedValue name="ButtonIdVolumeUp"               value="0x0002"/>
                    <definedValue name="ButtonIdVolumeDown"             value="0x0003"/>
                    <definedValue name="ButtonIdMobileCallAnswerEnd"    value="0x0004"/>
                    <definedValue name="ButtonIdComputerCallAnswerEnd"  value="0x0005"/>
                    <definedValue name="ButtonIdDeskPhoneCallAnswerEnd" value="0x0006"/>
                    <definedValue name="ButtonIdHook"                   value="0x0007"/>
                    <definedValue name="ButtonIdVR"                     value="0x0008"/>
                    <definedValue name="ButtonIdPower"                  value="0x0009"/>
                    <definedValue name="ButtonIdDectSubscription"       value="0x000A"/>
                    <definedValue name="ButtonIdBluetoothPairing"       value="0x000B"/>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Command to request to simulate a user button action for one or more buttons simultaneously.
            </comment>
        </command>
        
        <command name="Indirect Event Simulation" id="0x1004">
            <payload_in>
                <item name="indirectEvent" type="UNSIGNED_SHORT">
                    <comment>
                        <![CDATA[
                            The ID for the indirect event to be simulated.<br/><br/>
                            0 - Headset Wearing State<br/>
                            1 - Battery Status Monitoring<br/>
                            2 - Voice Recognition<br/>
                            3 - Proximity<br/>
                            4 - Voice Prompt Generation<br/>
                            5 - LED Indication Generation (Defined sequences - eg Pairing, connected, etc)<br/>
                            6 - Charger Connected-Charging / Connected-Not Charging / Not Connected<br/><br/>
                            7 - Battery Level - Full / High / Medium / Low / Empty / Unknown<br/><br/>
                            8 - USB Audio Event - Telephony On/ Off, Music On/Off<br/><br/>
                            <br/>
                            The value associated to the indirect event to be simulated.
                            The ushort is split into 2 bytes, with low byte denoting the ID (eg LED),
                            and high byte denoting the action type (eg Pairing (for LED))
                        ]]>
                    </comment>
                    <definedValue name="IndirectEventHeadsetWearingState" value="0x00"/>
                    <definedValue name="IndirectEventBatteryStatusMonitoring" value="0x01"/>
                    <definedValue name="IndirectEventVoiceRecognition" value="0x02"/>
                    <definedValue name="IndirectEventProximity" value="0x03"/>
                    <definedValue name="IndirectEventVoicePromptGeneration" value="0x04"/>
                    <definedValue name="IndirectEventLedIndicationGeneration" value="0x05"/>
                    <definedValue name="IndirectEventChargerConnectionState" value="0x06"/>
                    <definedValue name="IndirectEventBatteryLevelChange" value="0x07"/>
                    <definedValue name="IndirectEventUSBAudioChange" value="0x08"/>
                    <definedValue name="IndirectEventQDConnectionState" value="0x09"/>
                    <definedValue name="IndirectEventAalAcousticIncidentReport" value="0x0A"/>
                    <definedValue name="IndirectEventAalTwaReport" value="0x0B"/>
                    <definedValue name="IndirectEventConversationDynamicsReport" value="0x0C"/>
                    <definedValue name="IndirectEventYCableConnectionState" value="0x0D"/>

                </item>
                <item name="EventParameter" type="BYTE_ARRAY">
                    <comment>
                        <![CDATA[
                            <table>
                            <tr><td>Headset Wearing State    </td><td>0 - Doff</td>
                            <tr><td>                         </td><td>1 - Don</td>
                            <tr><td>Battery Status Monitoring</td><td>0 - Set the talk time to max</td>
                            <tr><td>                         </td><td>1 - announce the current talk time</td>
                            <tr><td>                         </td><td>2 - set talk time in minutes</td>
                            <tr><td>Voice Recognition        </td><td>0 - VR_STATE_TESTING_MAINMENU_VR<td>
                            <tr><td>                         </td><td>1 - VR_STATE_TESTING_ANSWERORIGNORE_VR</td>
                            <tr><td>Proximity                </td><td>Byte 0 - Connection Id<br>
                            Byte 1 - value of RSSI</td>
                            <tr><td>Voice Prompt Generation  </td><td>Array of 16-bit values containing tone values</td>
                            <tr><td>LED Indication Generation</td><td>8-bit array defining LED sequences</td>
                            <tr><td>Charger                  </td><td>0 - Charger unplugged</td>
                            <tr><td>                         </td><td>1 - Charger connected</td>
                            </table>
                        ]]>
                    </comment>
                    <definedValue name="IndirectEventHeadsetWearingStateDoff" value="0x00"/>
                    <definedValue name="IndirectEventHeadsetWearingStateDon" value="0x01"/>
                    <definedValue name="IndirectEventBatteryStatusMonitoringSetTalkTimeToMax" value="0"/>
                    <definedValue name="IndirectEventBatteryStatusMonitoringAnnounceTheCurrentTalkTime" value="1"/>
                    <definedValue name="IndirectEventBatteryStatusMonitoringSetTalkTimeInMinutes" value="2"/>
                    <definedValue name="IndirectEventChargerConnectionStateDisconnected" value="0"/>
                    <definedValue name="IndirectEventChargerConnectionStateConnected" value="1"/>
                    <definedValue name="IndirectEventBatteryLevelFull" value="0"/>
                    <definedValue name="IndirectEventBatteryLevelHigh" value="1"/>
                    <definedValue name="IndirectEventBatteryLevelMedium" value="2"/>
                    <definedValue name="IndirectEventBatteryLevelLow" value="3"/>
                    <definedValue name="IndirectEventBatteryLevelEmpty" value="4"/>
                    <definedValue name="IndirectEventBatteryLevelUnknown" value="5"/>
                    <definedValue name="IndirectEventUSBTelephonyAudioOff" value="0"/>
                    <definedValue name="IndirectEventUSBTelephonyAudioOn" value="1"/>
                    <definedValue name="IndirectEventUSBMusicAudioOff" value="2"/>
                    <definedValue name="IndirectEventUSBMusicAudioOn" value="3"/>
                    <definedValue name="IndirectEventQDConnectionStateDisconnected" value="0x00"/>
                    <definedValue name="IndirectEventQDConnectionStateConnected" value="0x01"/>
                    <definedValue name="IndirectEventYCableConnectionStateDisconnected" value="0x00"/>
                    <definedValue name="IndirectEventYCableConnectionStateConnected" value="0x01"/>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Command to request to simulate a device indirect event, such as don/doff, battery level change, etc.
            </comment>
        </command>
        
        <command name="Raw ButtonTest Event Enable-Disable" id="0x1007">
            <payload_in>
                <item name="rawButtonEventEnable" type="BOOLEAN">
                    <comment>
                        True to enable raw button event messages, false to disable.
                        NOTE that the Test Interface must be enabled before this command is enabled ("0x1000")
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Command to enable and disable raw button messaging from a device. The test interface enable message
                must be enabled prior to this command being issued. The test interface is disabled by default so that
                production devices do not provide raw button events.
            </comment>
        </command>
        
        <command name="Voice Recognition Test Event Enable-Disable" id="0x100A">
            <payload_in>
                <item name="voiceRecogntionEventEnable" type="BOOLEAN">
                    <comment>
                        True to enable Voice recognition event messages, false to disable.
                        NOTE that the Test Interface must be enabled before this command is enabled ("0x1000")
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Command to enable and disable Voice Recognition messaging from a device. The test interface enable message
                must be enabled prior to this command being issued. The test interface is disabled by default so that
                production devices do not Voice recognition events.
            </comment>
        </command>
        
        <command name="Text To Speech Test" id="0x100C">
            <payload_in>
                <item name="Text" type="STRING">
                    <comment>
                        Text issued by Test Harness to invoke the appropriate response from the Text to Speech engine.
                        NOTE that the Test Interface must be enabled before this command is enabled ("0x1000")
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Command to verify the Text to Speech engine of a device. The test interface enable message
                must be enabled prior to this command being issued. The test interface is disabled by default so that
                production devices do not have this functionality enabled.
            </comment>
        </command>
        
        <command name="Raw Data Event Enable-Disable" id="0x100E">
            <payload_in/>
            <payload_out>
                <item name="rawDataEventEnable" type="BOOLEAN">
                    <comment>
                        True to enable Raw Data Events, false to disable.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Command to enable and disable raw Data events from being issued by a device
            </comment>
        </command>
        
        <command name="Raw Data Command" id="0x1010">
            <payload_in/>
            <payload_out>
                <item name="rawDataCommand" type="BYTE_ARRAY">
                    <comment>
                        These may be implemented only on devices that include wearing (also known as "don/doff")
                        Command carrying Raw Data to the Device.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Command to carry Raw Data to the Device
            </comment>
        </command>

        <command name="MFI Test" id="0x1018">
            <payload_in>
                <item name="command" type="BYTE">
                    <comment>
                        Command byte value for MFI Test
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
            </comment>
        </command>

        <command name="Capsense Test" id="0x101A">
            <payload_in>
                <item name="command" type="BYTE">
                    <comment>
                        <![CDATA[
                            Command byte value to set capsense test mode<br/><br/>
                            40 - Set Doff Baselines<br/>
                            48 - Enter test mode<br/>
                            60 - Exit test mode<br/>
                        ]]>
                    </comment>
                    <definedValue name="resetDoffBaselines" value="40" />
                    <definedValue name="enterTestMode" value="48" />
                    <definedValue name="exitTestMode" value="60" />
                </item>
            </payload_in>
            <payload_out/>
            <comment>
            </comment>
        </command>

        <setting name="Button Simulation Capabilities" id="0x1001">
            <payload_in/>
            <payload_out>
                <item name="supportedButtonIDs" type="SHORT_ARRAY">
                    <comment>
                        The array containing the supported button IDs for simulation.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Query for the IDs specifying the buttons that are supported to be simulated.
            </comment>
        </setting>
        
        <setting name="Indirect Event Simulation Capabilities" id="0x1003">
            <payload_in/>
            <payload_out>
                <item name="supportedIndirectEventIDs" type="SHORT_ARRAY">
                    <comment>
                        The array containing the supported indirect event IDs for simulation.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Query for the IDs specifying the indirect events that are supported to be simulated.
            </comment>
        </setting>
        
        <setting name="Device Status Capabilities" id="0x1005">
            <payload_in/>
            <payload_out>
                <item name="supportedDeviceStatusIDs" type="SHORT_ARRAY">
                    <comment>
                        The array containing the supported device status IDs.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Query for the IDs specifying the device status data that will be provided upon a device status query.
            </comment>
        </setting>
        
        <setting name="Device Status" id="0x1006">
            <payload_in/>
            <payload_out>
                <item name="deviceStatusData" type="BYTE_ARRAY">
                    <comment>
                        The byte array containing internal device status.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Query for the internal device status of a device under test.
            </comment>
        </setting>

        <setting name="Custom Device Status" id="0x1007">
            <payload_in/>
            <payload_out>
                <item name="deviceCustomStatusData" type="BYTE_ARRAY">
                    <comment>
                        The byte array, starting with the two byte array size, containing internal device custom status.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Query for the internal device specific custom status of a device under test with engineering defined formatting for the specific device.
            </comment>
        </setting>

        <setting name="Single NVRAM Configuration Read" id="0x1009">
            <payload_in>
                <item name="configurationItemAddress" type="UNSIGNED_LONG">
                    <comment>
                        The address of the NVRAM Storage to be read.
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="nvramConfiguration" type="BYTE_ARRAY">
                    <comment>
                        Contents of NVRAM
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[<a name="0x1009">
                         <i>In Deckard 2.3 and later this Message ID is deprecated.
                         </a>
                         In Deckard Version 2.3 and later use Deckard Message ID <a href="#0x1019">0x1019</a>.</i><br>]]>
                Query for the configuration item specified in the Setting request.
            </comment>
        </setting>

        <setting name="Supported Test Interface Message IDs" id="0x1011">
            <payload_in/>
            <payload_out>
                <item name="testInterfaceCommandIDs" type="SHORT_ARRAY">
                    <comment>
                        A block of supported Test Interface Command IDs for the device.
                    </comment>
                </item>
                <item name="testInterfaceSettingIDs" type="SHORT_ARRAY">
                    <comment>
                        A block of supported Test Interface Setting IDs for the device.
                    </comment>
                </item>
                <item name="testInterfaceEventIDs" type="SHORT_ARRAY">
                    <comment>
                        A block of supported Test Interface Event IDs for the device.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Query for the set of supported Test Interface Deckard Message IDs for the device.
            </comment>
        </setting>

        <setting name="Single NVRAM Configuration Read With Address Echo" id="0x1019">
            <payload_in>
                <item name="configurationItemAddress" type="UNSIGNED_LONG">
                    <comment>
                        The address of the NVRAM Storage to be read.
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="configurationItemAddress" type="UNSIGNED_LONG">
                    <comment>
                        The address of the NVRAM contents returned.
                    </comment>
                </item>
                <item name="nvramConfiguration" type="BYTE_ARRAY">
                    <comment>
                        Contents of NVRAM
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[<a name="0x1019">
                         <i>In Deckard 2.3 and later, this Message ID replaces Message ID <a href="#0x1009">0x1009</a>.</i></a><br>]]>
                Query for the configuration item specified in the Setting request.
            </comment>
        </setting>
        
        <event name="Test Interface Enable-Disable" id="0x1000">
            <payload_out>
                <item name="testInterfaceEnable" type="BOOLEAN">
                    <comment>True indicating test messaging is enabled, false otherwise.</comment>
                </item>
            </payload_out>
            
            <comment>
                Event to notify a Host that the status of the Test Interface has been changed.
                Either enabled or disabled.
            </comment>
        </event>
        
        <event name="Raw ButtonTest Event Enable-Disable" id="0x1007">
            <payload_out>
                <item name="rawButtonEventEnable" type="BOOLEAN">
                    <comment>
                        True indicates raw button event messages are enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Indication that the Raw Button Test Mode status has changed.
            </comment>
        </event>
        
        <event name="Raw Button Test event" id="0x1008">
            
            <payload_out>
                <item type="SHORT" name="button">
                    <comment>The button event.</comment>
                </item>
                
            </payload_out>
            
            <comment>
                <![CDATA[
                The physical button event, and the button ID.
                The Short contains the button pressed, and the type of button press event
                The short is split into 2 bytes, with low byte denoting the
                <a href="#buttonValues">button ID (eg hook-switch)</a>,
                and high byte denoting the button <a href="#buttonActions">press type</a>
                (eg double button press).
                ]]>
            </comment>
            
        </event>
        
        <event name="Voice Recognition Test Event Enable-Disable" id="0x100A">
            
            <payload_out>
                <item name="voiceRecogntionEventEnable" type="BOOLEAN">
                    <comment>
                        True indicates Voice Recognition Test Events are enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Indication that the Voice Recognition Test Events status has changed.
            </comment>
        </event>
        
        <event name="Voice Recognition Test event" id="0x100B">
            
            <payload_out>
                <item type="SHORT" name="voiceRecognitonId">
                    <comment>The Voice Recognition event id.</comment>
                </item>
                
            </payload_out>
            
            <comment>
                The voice recognition event, and the VR event ID.
                The Short contains  the VR event event ID
            </comment>
            
        </event>
        
        <event name="Raw Data event" id="0x100D">
            
            <payload_out>
                <item type="BYTE_ARRAY" name="rawDataEventId">
                    <comment>The Raw Data Event id.</comment>
                </item>
                
            </payload_out>
            
            <comment>
                The voice recognition event, and the VR event ID.
                The Short contains  the VR event event ID
            </comment>
            
        </event>
        
        <event name="Raw Data Event Enable-Disable" id="0x100F">
            <payload_out>
                <item name="rawDataEventEnable" type="BOOLEAN">
                    <comment>
                        True indicates Raw Data Events are enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Indication that the Raw Data Event status has changed.
            </comment>
        </event>

        <event name="Capsense Raw Data event" id="0x101A">
            <payload_out>
                <item type="SHORT_ARRAY" name="capsenseRawData">
                    <comment>Capsense Raw Data</comment>
                </item>

            </payload_out>
            <comment>
                Capsense Raw data used for sensor monitoring
            </comment>
        </event>
				
		<exception name="Test Interface Is Disabled" id="0x1000">
			<payload_out/>
			<comment>
					This exception is sent in response to a test interface command or setting message when the test interface is not yet enabled.
			</comment>
		</exception>

    </section>
    
    <section title="Wearing state (0x02nn)">
        
        <comment>
            These may be implemented only on devices that include wearing (also known as "don/doff")
            sensors.
        </comment>
        
        <command name="Auto-answer on don" id="0x0204" associatedSettingId="0x0206" associatedEventId="0x0204">
            <payload_in>
                <item type="BOOLEAN" name="answerOnDon">
                    <comment>
                        True if the device should answer calls on don, false if not.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Configure whether the device should answer incoming calls when the user dons the
                headset. If true, answer on don. If false, donning the headset during an incoming
                call will have no effect.
            </comment>
            
        </command>
        
        <command name="Configure auto-pause media" id="0x0208" associatedSettingId="0x020A" associatedEventId="0x0208">
            <payload_in>
                <item type="BOOLEAN" name="autoPauseMedia">
                    <comment>
                        If true, enable auto-pause/auto-resume of streaming audio on doff/don. If
                        false,these physical events will not affect streaming audio.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            
            <comment>
                This command selects the effect of doffing and donning the headset while streaming
                audio to it. If enabled (autoPauseMedia = true), removing the headset will
                automatically pause audio (by sending AVRCP Pause); donning the headset
                will resume streaming audio (by sending AVRCP Play).
            </comment>
            
        </command>
        
        <command name="Configure auto-transfer call" id="0x020C" associatedSettingId="0x020E" associatedEventId="0x020C">
            <payload_in>
                <item type="BOOLEAN" name="autoTransferCall">
                    <comment>
                        If true, the device should route audio based on headset wearing state.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                <![CDATA[
                    Configure whether the device should switch the audio of an in-progress call based on
                    wearing state.<br/>
                    
                    If enabled, then during an active call, route the audio to the headset upon the user
                    donning the headset;
                    route it to the phone upon the user doffing the headset.<br/>
                    
                    If disabled, the headset will always open its audio (SCO) channel if the phone
                    requests it.
                ]]>
            </comment>
            
        </command>
        
        <command name="Configure auto-lock call button" id="0x0210" associatedSettingId="0x0212" associatedEventId="0x0210">
            <payload_in>
                <item type="BOOLEAN" name="autoLockCallButton">
                    <comment>
                        If true, the hook switch on the device cannot initiate outgoing calls when
                        the device is not worn.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                This command controls the headset hook switch's ability to dial calls.
                If enabled, the headset's hook switch cannot initiate outgoing calls when the
                headset is not worn.
                (The purpose is to eliminate pocket dialing. If the headset is in your pocket, the
                theory goes, it is not on your head and shouldn't be making a call.)
            </comment>
            
        </command>
        
        <command name="Configure wearing sensor enabled" id="0x0216" associatedSettingId="0x0214" associatedEventId="0x0216">
            <payload_in>
                <item type="BOOLEAN" name="wearingStateSensorEnabled">
                    <comment>
                        If true, the wearing state sensor is enabled to provide Don Doff events.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                This command controls the headset ability to provide don-doff events.
                If enabled, the headset will provide don events when the user dons the headset, and doff events when the headset is removed.
                This must be enabled to provide auto answer, anto pause, auto lock, auto transfer functionality.
            </comment>
        </command>

        <command name="Configure auto-mute call" id="0x0218" associatedSettingId="0x021A" associatedEventId="0x0218">
            <payload_in>
                <item type="BOOLEAN" name="autoMuteCall">
                    <comment>
                        If true, enable auto-mute on/off of active call on doff/don. If
                        false,these physical events will not affect active call.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            
            <comment>
                This command selects the effect of doffing and donning the headset while active
                call to it. If enabled (autoMuteCall = true), removing the headset will
                automatically mute on the active call; donning the headset
                will resume mute off of the active call.
            </comment>
            
        </command>
        
        <setting name="Wearing state" id="0x0202" associatedEventId="0x0200">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="worn">
                    <comment>
                        True if the device is worn, false otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                The wearing state (donned/doffed). True = donned/worn.
            </comment>
            
        </setting>
        
        <setting name="Auto-answer on don" id="0x0206" associatedEventId="0x0204">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="answerOnDon">
                    <comment>
                        True if the device will answer calls on don, false if not.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Whether the device should answer incoming calls when the user dons the headset.
                If true, answer on don. If false, donning the headset during an incoming call
                will have no effect.
            </comment>
            
        </setting>
        
        <setting name="Auto-pause media" id="0x020A" associatedEventId="0x0208">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="autoPauseMedia">
                    <comment>
                        If true, the device will pause streaming audio on doff and resume it on don.
                        If false, these physical events will not affect streaming audio.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                If enabled (autoPauseMedia = true), removing the headset will
                automatically pause audio (by sending AVRCP Pause); donning the headset
                will resume streaming audio (by sending AVRCP Play).
            </comment>
            
        </setting>
        
        <setting name="Auto-transfer call" id="0x020E" associatedEventId="0x020C">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="autoTransferCall">
                    <comment>
                        If true, the device will route audio based on headset wearing state.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Returns whether the device should switch the audio of an in-progress call based on
                wearing state.
                See the "Configure auto-transfer call" command for more details.
            </comment>
            
        </setting>
        
        <setting name="Get auto-lock call button" id="0x0212" associatedEventId="0x0210">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="autoLockCallButton">
                    <comment>
                        If true, the hook switch on the device cannot initiate outgoing calls when
                        the device is not worn.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                This setting returns the headset hook switch's ability to dial calls.
                If enabled, the headset's hook switch cannot initiate outgoing calls when the
                headset is not worn.
                (The purpose is to eliminate pocket dialing. If the headset is in your pocket, the
                theory goes, it is not on your head and shouldn't be making a call.)
            </comment>
        </setting>
        
        <setting name="Wearing sensor enabled" id="0x0214" associatedEventId="0x0216">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        Whether or not the wearing sensor is enabled.  True = enabled, false = disabled.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Describes whether the wearing sensor is enabled.  If the sensor is disabled,
                for example through the Morini control panel, the device will not generate "Wearing state" events.
                This setting must be implemented in all devices equipped with a wearing state sensor.
            </comment>
        </setting>
        
        <setting name="Auto-Mute call" id="0x021A" associatedEventId="0x0218">
            <payload_in/>
            <payload_out>
                <item name="autoMuteCall" type="BOOLEAN">
                    <comment>
                         If true, the device will mute of active call on doff and resume it on don.
                        If false, these physical events will not affect active call.
                    </comment>
                </item>
            </payload_out>
            <comment>
                If enabled (autoMuteCall = true), removing the headset will
                automatically mute on of the active call; donning the headset
                will resume mute off the active call.
            </comment>
        </setting>	

        <event name="Wearing state changed" id="0x0200">
            <payload_out>
                <item type="BOOLEAN" name="Worn">
                    <comment>
                        True if the device is worn, false otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                The wearing state (donned/doffed) has changed.
            </comment>
        </event>
        
        <event name="Auto-answer on don" id="0x0204">
            <payload_out>
                <item type="BOOLEAN" name="answerOnDon">
                    <comment>
                        True if the answer on don enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the Answer on Don configuration of the device has been changed..
            </comment>
        </event>
        
        <event name="Configure auto-pause media" id="0x0208">
            <payload_out>
                <item type="BOOLEAN" name="autoPauseMedia">
                    <comment>
                        True if the auto pause media enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the Auto Pause Media configuration of the device has been changed..
            </comment>
        </event>
        
        <event name="Configure auto-transfer call" id="0x020C">
            
            <payload_out>
                <item type="BOOLEAN" name="autoTransferCall">
                    <comment>
                        True if the auto transfer call feature is enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the Auto Transfer Call configuration of the device has been changed..
            </comment>
            
        </event>
        
        <event name="Configure auto-lock call button" id="0x0210">
            <payload_out>
                <item type="BOOLEAN" name="autoLockCallButton">
                    <comment>
                        True if the auto lock button feature is enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the Auto Lock Button configuration of the device has been changed..
            </comment>
            
        </event>
        
        <event name="Configure wearing sensor enabled" id="0x0216">
            <payload_out>
                <item type="BOOLEAN" name="wearingStateSensorEnabled">
                    <comment>
                        True if the wearing state sensor is enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the Wearing State Sensor configuration of the device has been changed..
            </comment>
            
        </event>
        
        <event name="Configure auto-Mute Call" id="0x0218">
            <payload_out>
                <item type="BOOLEAN" name="autoMuteCall">
                    <comment>
                        True if the auto mute on/off enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the Auto mute on configuration of the device has been changed..
            </comment>
        </event> 

    </section>
    
    <section title="General Configuration (0x04nn)">
        
        <command name="Configure mute tone volume" id="0x0400" associatedSettingId="0x0402" associatedEventId="0x0400">
            <payload_in>
                <item type="BYTE" name="muteToneVolume">
                    <comment>
                        <![CDATA[
                            How device should play a tone on mute, if at all.  The legal values are<br/>
                            0 = off (do not play a tone)<br/>
                            1 = low (play the tone at low volume)<br/>
                            2 = standard (play the tone at standard volume)<br/>
                        ]]>
                    </comment>
                    <definedValue name="VolumeOff" value="0" />
                    <definedValue name="VolumeLow" value="1" />
                    <definedValue name="VolumeStandard" value="2" />
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Configure how (if) the device should play a tone on mute. (Some headsets may play a
                voice prompt instead or in addition.  This setting does not affect voice prompts.)
            </comment>
            
        </command>
        
        <command name="Configuration for a Connected Headset" id="0x0401" associatedSettingId="0x0401" associatedEventId="0x0401">
            <payload_in>
                <item name="configuration" type="BYTE">
                    <comment>
                        Byte value to indicate the configuration to be used for the connected headset by the target device.
                    </comment>
                    <definedValue name="HTopNew" 		value="0x00" />
                    <definedValue name="HTopLegacy" 	value="0x01" />
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Configuration of how a device treats the connected headset.
            </comment>            
        </command>
        
        <command name="Configure second inbound call ring type" id="0x0404" associatedSettingId="0x0406" associatedEventId="0x0404">
            <payload_in>
                <item type="BYTE" name="ringType">
                    <comment>
                        <![CDATA[
                            <a name="secondInboundCallRingType">
                            0 = ignore (do not ring)<br/>
                            1 = ring once<br/>
                            2 = ring continuously<br/>
                            </a>
                        ]]>
                    </comment>
                    <definedValue name="RingTypeNone" value="0" />
                    <definedValue name="RingTypeOnce" value="1" />
                    <definedValue name="RingTypeContinuous" value="2" />
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Configure the second inbound call ring type.
            </comment>
            
        </command>
        
		<command name="Configure Mute off VP" id="0x0407" associatedSettingId="0x0407" associatedEventId="0x0407">

			<payload_in>
				<item type="BOOLEAN" name="enable">
					<comment>
						Enable/Disable Mute off VP 
					</comment> 
				</item> 
			</payload_in>
			<payload_out/>

			<comment>
				Enable/disable Mute off VP. Device should return success if it support this command .
			</comment>

		</command>

        <command name="Set SCO Open Tone Enable" id="0x0408" associatedSettingId="0x0408" associatedEventId="0x0408">
            <payload_in>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        Enable/Disable SCO Open Tone
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Configure device as to it should have an open sco tone.
            </comment>
        </command>

        <command name="Configure OLI Feature" id="0x0409" associatedSettingId="0x0409" associatedEventId="0x0409">
            <payload_in>
                <item type="BYTE" name="OLI_enable">
                    <comment>
                        Enable/Disable OLI feature
                    </comment>
                    <definedValue name="enable" value="1" />
                    <definedValue name="disable" value="0" />
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Configure device whether to enable the OLI feature or not.
            </comment>
            
        </command>

        <command name="Configure Mute Alert" id="0x040A" associateSettingId="0x040A" associateEventId="0x040A">
            <payload_in>
                <item name="mode" type="BYTE">
                    <comment>
                        Select between disable , time interval mute alert and voice detect mute alert.
                    </comment>
                </item>
                <item name="parameter" type="BYTE">
                    <comment>
                        When mode is Voice Detect Reminder , item parameter is valid
                        Otherwise it will be ignored .
                        When mode is TimeIntervalReminder , command Configure mute reminder timing should be used to configure Time interval.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Configure current mute alert scheme , disabled or time interval reminder or voice detect reminder
            </comment>
        </command>
        
        <setting name="Configuration for a Connected Headset" id="0x0401" associatedEventId="0x0401">
            <payload_in/>
            <payload_out>
                <item name="configuration" type="BYTE">
                    <comment>
                        Byte value to indicate the configuration to be used for the connected headset by the target device.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Configure how a device treats the connected headset.
            </comment>            
        </setting>
        
        <setting name="Get mute tone volume" id="0x0402" associatedEventId="0x0400">
            <payload_in/>
            <payload_out>
                <item type="BYTE" name="muteToneVolume">
                    <comment>
                        <![CDATA[
                            Return the volume at which the device should play a tone on mute. (Some headsets may play a
                            voice prompt instead or in addition.  This setting does not affect voice prompts.)
                            See <br/>
                            <a href="#muteToneVolume">mute tone volume values</a>
                            for details.
                        ]]>
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Configure how the device should play a tone on mute.
            </comment>
            
        </setting>
        
        <setting name="Get second inbound call ring type" id="0x0406" associatedEventId="0x0404">
            <payload_in/>
            <payload_out>
                <item type="BYTE" name="ringType">
                    <comment>
                        <![CDATA[
                            See <br/>
                            <a href="#secondInboundCallRingType">Configure second inbound call ring type</a>
                            for values.
                        ]]>
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Get the second inbound call ring type.
            </comment>
            
        </setting>

		<setting name="Get Mute off VP" id="0x0407">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="enable">
                    <comment>
						Mute off VP enable status 
                    </comment>
                </item>
            </payload_out>
			
            <comment>
				Device should return Mute off VP  enable status if it support this setting . Otherwise exception should be returned. 
            </comment>
			
        </setting>

        <setting name="Get SCO Open Tone Enable" id="0x0408">
			<payload_in/>
			<payload_out>
				<item type="BOOLEAN" name="enable">
					<comment> 
                        SCO Open Tone enable status
					</comment> 
				</item>
			</payload_out> 
			<comment>
                Allow a device to be queried as to the configured state of the SCO Open Tone
			</comment>
		</setting>

        <setting name="Get OLI feature Enable" id="0x0409">
            <payload_in/>
            <payload_out>
                <item type="BYTE" name="OLI_enable">
                    <comment> 
                        Get OLI feature status 
                    </comment> 

                 </item>
            </payload_out> 

            <comment>
                Device should return the OLI feature status. 
            </comment>

        </setting>

        <setting name="Mute Alert" id="0x040A" associateCommandId="0x040A" associateEventId="0x040A">
            <payload_in/>
            <payload_out>
                <item name="mode" type="BYTE">
                    <definedValue name="Disabled"             value="0x00"/>
                    <definedValue name="TimeIntervalReminder" value="0x01"/>
                    <definedValue name="VoiceDetectReminder"  value="0x02"/>
                    <comment>
                       Current mute alert mode .
                    </comment>
                </item>
                <item name="parameter" type="BYTE">
                    <definedValue name="VisibleAndAudibleMuteAlert"	value="0x00"/>
                    <definedValue name="VisibleOnlyMuteAlert" 		value="0x01"/>
                    <definedValue name="AudibleOnlyMuteAlert" 		value="0x02"/>
                    <comment>
                        When mode is Voice Detect Reminder , item parameter is valid
                        Otherwise it will be always zero .
                        When mode is TimeIntervalReminder , setting mute reminder timing should be used to get mute alert Time interval.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Return current mute alert scheme , disabled or time interval reminder or voice detect reminder
            </comment>
        </setting>
        
        <event name="Configure mute tone volume" id="0x0400">
            
            <payload_out>
                <item type="BYTE" name="muteToneVolume">
                    <comment>
                        <![CDATA[
                            How device currently plays a tone on mute, if at all.<br/>
                            The legal values are<br/>
                            <a name="muteToneVolume">
                            0 = off (do not play a tone)<br/>
                            1 = low (play the tone at low volume)<br/>
                            2 = standard (play the tone at standard volume)<br/>
                            </a>
                        ]]>
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the Mute Tone Volume configuration of the device has been updated.
            </comment>
        </event>
        
        <event name="Configuration for a Connected Headset" id="0x0401">
            <payload_in/>
            <payload_out>
                <item name="configuration" type="BYTE">
                    <comment>
                        Byte value to indicate the configuration to be used for the connected headset by the target device.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Configuration of how a device treats the connected headset.
            </comment>            
        </event>
        
        <event name="Configure second inbound call ring type" id="0x0404">
            
            <payload_out>
                <item type="BYTE" name="ringType">
                    <comment>
                        <![CDATA[
                            See <br/>
                            <a href="#secondInboundCallRingType">Configure second inbound call ring type</a>
                            for values.
                        ]]>
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the Second Inbound Call ring type configuration has changed.
            </comment>
            
        </event>
        
		<event name="Mute off VP enable status changed" id="0x0407">
		
			<payload_out>
				<item type="BOOLEAN" name="enable">
					<comment> 
						Mute off VP  enable/disable indicator
					</comment> 
				</item>
			</payload_out> 
			
			<comment>
				Device should send Mute off VP  enable status event if Mute off VP enable status is supported and changed . 
			</comment> 
			
		</event>

        <event name="SCO Open Tone Enable" id="0x0408">
            <payload_out>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        SCO Open Tone enable status
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the SCO Open Tone configuration has changed.
            </comment>
        </event>

        <event name="OLI feature Enable" id="0x0409">
            <payload_out>
                <item type="BYTE" name="OLI_enable">
                    <comment>
                        OLI feature enable status
                    </comment>

                </item>
            </payload_out>
            <comment>
                Notification that OLI feature configuration has changed.
            </comment>
        </event>
        
        <event name="Configure Mute Alert" id="0x040A" associateCommandId="0x040A" associateSettingId="0x040A">
            <payload_out>
                <item name="mode" type="BYTE">
                    <comment>
                        Mute alert mode
                    </comment>
                </item>
                <item name="parameter" type="BYTE">
                    <comment>
                        When mode is Voice Detect Reminder , item parameter is valid
                        Otherwise it will be always zero .
                        When mode is TimeIntervalReminder , event mute reminder timing will report Mute alert timing .
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that current mute alert scheme has changed, disabled or time interval reminder or voice detect reminder
            </comment>
        </event>
        
    </section>
    
    <section title="Advanced Features (0x08nn)">
        
        <command name="Configure signal strength events" id="0x0800" associatedSettingId="0x0806" associatedEventId="0x0800" streamingId="0x0806">
            <payload_in>
                <item name="connectionId" type="BYTE" identifier="true">
                    <comment>
                        The connection ID of the link being used to generate the signal strength event.
                    </comment>
                </item>
                <item name="enable" type="BOOLEAN" enabler="true">
                    <comment>
                        If true, this will enable the signal strength monitoring.
                    </comment>
                </item>
                <item name="dononly" type="BOOLEAN">
                    <comment>
                        If true, report near far events only when headset is donned.
                    </comment>
                </item>
                <item name="trend" type="BOOLEAN">
                    <comment>
                        If true don't use trend detection
                    </comment>
                </item>
                <item name="report rssi audio" type="BOOLEAN">
                    <comment>
                        If true, Report rssi and trend events in headset audio
                    </comment>
                </item>
                <item name="report near far audio" type="BOOLEAN">
                    <comment>
                        If true, report Near/Far events in headset Audio
                    </comment>
                </item>
                <item name="report near far to base" type="BOOLEAN">
                    <comment>
                        If true, report RSSI and Near Far events
                    </comment>
                </item>
                <item name="sensitivity" type="BYTE">
                    <comment>
                        This number multiplies the dead_band value (currently 5) in the headset configuration.
                        This result is added to an minimum dead-band, currently 5 to compute the total dead-band.
                        in the range 0 to 9
                    </comment>
                </item>
                <item name="near threshold" type="BYTE">
                    <comment>
                        The near / far threshold in the range -128 to +127; larger (positive) values mean a weaker signal
                    </comment>
                </item>
                <item name="max timeout" type="SHORT">
                    <comment>
                        The number of seconds after any event before terminating sending rssi values
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Allows configuration of rssi and near far events.
            </comment>
        </command>

        <command name="DSP Tuning Message" id="0x0801">
            <payload_in>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        The payload_in data is the DSP tuning command to the recipient
                        from the initiator.
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        The payload_out data is the DSP tuning data response to the initiator
                        from the recipient.
                    </comment>
                </item>
            </payload_out>
            <comment>
                DSP tuning messages used by a DSP tuning tool to send commands and receive
                responses using a proprietary DSP tuning message format.
            </comment>
        </command>
        
        <command name="Platform Specific Instrumentation Message" id="0x0803">
            <payload_in>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        The payload_in data is the instrumentation command to the recipient
                        from the initiator.
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        The payload_out data is the instrumentation data response to the initiator
                        from the recipient.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Platform specific instrumentation messages are intended for use with an
                instrumentation tool to send commands and receive responses using a format
                specific to a platform code base.
            </comment>
        </command>
        
        <command name="Configure caller announcement" id="0x0804" associatedSettingId="0x0804" associatedEventId="0x0804">
            <payload_in>
                <item name="value" type="BYTE">
                    <comment>
                        <![CDATA[
                            The desired caller announcement configuration.<br/>
                            Legal values are:<br/>
                            0x00 = do not announce callers;<br/>
                            0xFF = announce all callers<br/>
                            <br/>
                            Use of any other value will throw the "Illegal value" exception.
                        ]]>
                    </comment>
                    <definedValue name="DoNotAnnounceCallers" value="0x00" />
                    <definedValue name="AnnounceAllCallers" value="0xFF" />
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0808
            </throws>
            <comment>
                Set the desired caller announcement configuration.
            </comment>
        </command>
        
        <command name="Manufacturing Test Message" id="0x0805">
            <payload_in>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        The payload_in data is the manufacturing test command to the recipient
                        from the initiator.
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        The payload_out data is the manufacturing test data response to the initiator
                        from the recipient.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Manufacturing Test messages are intended for use with a
                manufacturing test tool to send commands and receive responses using a format
                specific to a platform code base.
            </comment>
        </command>
        
        <command name="Configure Find Headset LED Alert" id="0x0808">
            <payload_in>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        Enable or disable Find Headset LED Alert
                    </comment>
                </item>
                <!-- This parameter is not present in the setting! -->
                <item type="BYTE" name="timeout">
                    <comment>
                    If ENABLE is TRUE ,  Find Headset LED Alert should enable and timeout after TIMEOUT seconds.
                    TIMEOUT is unsigned decimal number , it could not be bigger than 255 and not equal to zero.
                    If ENABLE is FALSE , Find Headset LED Alert should be disabled right way.
                    </comment>
                </item>
            </payload_in>
                    <payload_out/>
                <comment>
                    Enable/disable Find Headset LED Alert.
                    Device supposes enable command will be send every TIMEOUT seconds or less otherwise Find Headset LED Alert will be terminated .
                </comment>
        </command>
		
        <command name="Enable TxPower Reporting" id="0x0810">
            <payload_in>
                <item name="connectionId" type="BYTE">
                    <comment>
                        The connection ID of the link being requested to provide Transmit Power information.
                    </comment>
                </item>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        Enable or disable Transmit Power Reporting from a Device
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Enable/disable Transmit Power Reporting.
            </comment>
        </command>

        <command name="Configure Device Power State" id="0x0814">
            <payload_in>
                <item name="Device_State" type="BYTE">
                    <comment>
                        Required power state.
                    </comment>
                    <definedValue name="PowerOff"  value="0x00" />
                    <definedValue name="PowerOn"   value="0x01" />
                    <definedValue name="Restart"   value="0x02" />
                    <definedValue name="Hibernate" value="0x03" />
                    <definedValue name="UpGrade"   value="0x04" />
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0814
            </throws>
            <comment>
                Allows the device to be restarted or have it's power state changed.
            </comment>
        </command>

        <setting name="Current signal strength" id="0x0800" associatedEventId="0x0806">
            <payload_in>
                <item name="connectionId" type="BYTE">
                    <comment>
                        The connection ID of the link being requested to provide the signal strength information.
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="connectionId" type="BYTE">
                    <comment>
                        The connection ID of the link being used to provide the signal strength information.
                    </comment>
                </item>
                <item name="strength" type="BYTE">
                    <comment>
                        The strength (RSSI) of the radio (typically Bluetooth) channel between the initiator and
                        recipient over which this communication is occurring.
                        Values are signed integers in the range -128 to +127; larger (positive) values mean a weaker signal.
                    </comment>
                </item>
                <item type="BYTE" name="nearFar">
                    <comment>
                        <![CDATA[
                            The device's determination of whether it is Near to or Far from the device to which it is connected.
                            <a name="nearFarValues">
                            0 = Far<br/>
                            1 = Near<br/>
                            2 = Unknown<br/>
                            </a>
                        ]]>
                    </comment>
                    <definedValue name="Far" value="0" />
                    <definedValue name="Near" value="1" />
                    <definedValue name="Unknown" value="2" />
                </item>
            </payload_out>
            <comment>
                Returns the current signal strength.
            </comment>
        </setting>
        
        <setting name="Caller announcement" id="0x0804">
            <payload_in/>
            <payload_out>
                <item name="value" type="BYTE">
                    <comment>
                        <![CDATA[
                            The desired caller announcement configuration.<br>
                            Legal values are:<br>
                            0x00 = do not announce callers<br/>
                            0xFF = announce all callers<br/>
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <throws>
                0x0808
            </throws>
            <comment>
                Return the current caller announcement configuration.
            </comment>
        </setting>
        
        <setting name="Signal strength configuration" id="0x0806" associatedEventId="0x0800">
            <payload_in>
                <item name="connectionId" type="BYTE" identifier="true">
                    <comment>
                        The connection ID of the link being used to generate the signal strength event.
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="connectionId" type="BYTE">
                    <comment>
                        The connection ID of the link being used to generate the signal strength event.
                    </comment>
                </item>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        If true, this will enable the signal strength monitoring.
                    </comment>
                </item>
                <item name="dononly" type="BOOLEAN">
                    <comment>
                        If true, report near far events only when headset is donned.
                    </comment>
                </item>
                <item name="trend" type="BOOLEAN">
                    <comment>
                        If true don't use trend detection
                    </comment>
                </item>
                <item name="report rssi audio" type="BOOLEAN">
                    <comment>
                        If true, Report rssi and trend events in headset audio
                    </comment>
                </item>
                <item name="report near far audio" type="BOOLEAN">
                    <comment>
                        If true, report Near/Far events in headset Audio
                    </comment>
                </item>
                <item name="report near far to base" type="BOOLEAN">
                    <comment>
                        If true, send out periodic RSSI and Near Far events
                    </comment>
                </item>
                <item name="sensitivity" type="BYTE">
                    <comment>
                        This number multiplies the dead_band value (currently 5) in the headset configuration.
                        This result is added to an minimum dead-band, currently 5 to compute the total dead-band.
                        in the range 0 to 9
                    </comment>
                </item>
                <item name="near threshold" type="BYTE">
                    <comment>
                        The near / far threshold in the range -128 to +127; larger values mean a weaker signal
                    </comment>
                </item>
                <item name="max timeout" type="SHORT">
                    <comment>
                        The number of seconds after any event before terminating sending rssi values
                    </comment>
                </item>
            </payload_out>
            <comment>
                Reads configuration of rssi and near far.
            </comment>
        </setting>
		
		
	    <setting name="Find Headset LED Alert Status" id="0x0808">
		    <payload_in/>
		    <payload_out>
			    <item type="BOOLEAN" name="enable">
				    <comment>
				        If enable is true , Find Headset LED Alert is enabled . Otherwise it is disabled .
    				</comment>
	    		</item>
		    </payload_out>
 
		    <comment>
		        Get current Find Headset LED Alert Status .
		    </comment>
	    </setting>
        
        <setting name="TxPower Reporting" id="0x0810">
            <payload_in>
                <item name="connectionId" type="BYTE">
                    <comment>
                        The connection ID of the link being requested to provide the transmit power information.
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="connectionId" type="BYTE">
                    <comment>
                        The connection ID of the link being used to provide the transmit power information.
                      </comment>
                </item>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        If enable is true , Transmit Power Reporting is enabled on a device for a connection Id. Otherwise it is disabled .
                    </comment>
                </item>
            </payload_out>

            <comment>
                Get Transmit Output Power fro a given connection Id.
            </comment>
        </setting>

        <setting name="Voice silent detection" id="0x0815" associateCommandId="0x0815" associateEventId="0x0815">
                <payload_in/>
                <payload_out>
                    <item name="mode" type="BYTE">
                        <definedValue name="disabled"	                    value="0x00"/>
                        <definedValue name="voiceDetection" 				value="0x01"/>
                        <definedvalue name="silenceDetection" 				value="0x02"/>
                        <comment>
                            current voice slient detection mode.
                        </comment>
                    </item>
                </payload_out>
                
                <comment>
                    Get current Voice silent detection mode.
                </comment>
        </setting>
        
        <event name="Configure signal strength event" id="0x0800">
            <payload_out>
                <item name="connectionId" type="BYTE" identifier="true">
                    <comment>
                        The connection ID of the link being used to generate the signal strength event.
                    </comment>
                </item>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        If true, signal strength monitoring is enabled.
                    </comment>
                </item>
                <item name="dononly" type="BOOLEAN">
                    <comment>
                        If true, near far events are reported only when headset is donned.
                    </comment>
                </item>
                <item name="trend" type="BOOLEAN">
                    <comment>
                        If true trend detection is disabled
                    </comment>
                </item>
                <item name="report rssi audio" type="BOOLEAN">
                    <comment>
                        If true, Report rssi and trend events in headset audio
                    </comment>
                </item>
                <item name="report near far audio" type="BOOLEAN">
                    <comment>
                        If true, report Near/Far events in headset Audio
                    </comment>
                </item>
                <item name="report near far to base" type="BOOLEAN">
                    <comment>
                        If true, RSSI and Near Far events will be reported sent
                    </comment>
                </item>
                <item name="sensitivity" type="BYTE">
                    <comment>
                        Deadband multiplier
                    </comment>
                </item>
                <item name="near threshold" type="BYTE">
                    <comment>
                        The near / far threshold
                    </comment>
                </item>
                <item name="max timeout" type="SHORT">
                    <comment>
                        The number of seconds after any event before terminating sending rssi values after an
                        event has occurred.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the Signal Strength Monitoring configuration has changed.
            </comment>
        </event>
        
        <event name="DSP Tuning Data" id="0x0801">
            <payload_out>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        The DSP tuning data being being sent from the recipient being tuned.
                    </comment>
                </item>
            </payload_out>
            <comment>
                DSP tuning data packets used by a DSP tuning tool for analysis of tuning effects
                using a proprietary DSP tuning message format.
            </comment>
        </event>
        
        <event name="Custom Button" id="0x0802">
            <payload_out>
                <item name="index" type="BYTE">
                    <comment>
                        This field is reserved for future expansion.  This must always be the value
                        zero (0).
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                The headset sends this when the user presses the custom button (which may actually
                be a special dedicated press or sequence of some existing button(s)).  The payload
                field is reserved for future use.
            </comment>
        </event>

        <event name="Platform Specific Instrumentation Data" id="0x0803">
            <payload_out>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        The instrumentation data being being sent from the recipient.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Platform specific instrumentation data events are intended to be interpreted by
                an instrumentation tool using a format specific to a platform code base to provide
                developers information as to the operation of the system.
            </comment>
        </event>
        
        <event name="Configure caller announcement" id="0x0804">
            <payload_out>
                <item name="value" type="BYTE">
                    <comment>
                        The caller announcement configuration.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the caller announcement configuration has changed.
            </comment>
        </event>

        <event name="Manufacturing Test Message" id="0x0805">
            <payload_out>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        The manufacturing test data being being sent from the recipient.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Manufacturing Test events are intended to be interpreted by
                a manufacturing test tool using a format specific to a platform code base.
            </comment>
        </event>
        
        <event name="Signal strength" id="0x0806">
            <payload_out>
                <item name="connectionId" type="BYTE">
                    <comment>
                        The connection ID of the link being used to generate the signal strength event.
                    </comment>
                </item>
                <item type="BYTE" name="strength">
                    <comment>
                        The strength (RSSI) of the radio (typically Bluetooth) channel between the initiator
                        and recipient over which this communication is occurring.
                        Values are signed integers in the range -128 to +127; larger (positive) values mean a weaker signal.
                    </comment>
                </item>
                <item type="BYTE" name="nearFar">
                    <comment>
                        <![CDATA[
                            See <br/>
                            <a href="#nearFarValues">Current signal strength</a>
                            for values.
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
                The device sends this event upon request.
                See the "Configure signal strength events" command.
            </comment>
        </event>
        
        <event name="Find Headset LED Alert Status Changed" id="0x0808">
            <payload_out>
                <item type="BOOLEAN" name="enable">
                    <comment>
                    If enable is true , Find Headset LED Alert is enabled . Otherwise it is disabled .
                    </comment>
                </item>
                <item type="BYTE" name="timeout">
                    <comment>
                    If enable is TRUE ,  Find Headset LED Alert is enabled and timeout after timeout seconds.
                    timeout is unsigned decimal number , it could not be bigger than 255 and not equal to zero.
                    If eneable is FALSE , Find Headset LED Alert is disabled right way.
                    </comment>
                </item>
            </payload_out>

            <comment>
            Indicate current Find Headset LED Alert Status .
            </comment>
        </event>


        <event name="Transmit Power Enabled" id="0x0810">
            <payload_out>
                <item name="connectionId" type="BYTE">
                    <comment>
                        The connection ID of the link being used to provide the transmit power information.
                    </comment>
                </item>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        Indication showing Transmit Power Reporting has been enabled/disabled on a given connectionId on a device.
                    </comment>
                </item>
            </payload_out>

            <comment>
                Indication showing Transmit Power Reporting has been enabled/disabled on a given connectionId on a device.
            </comment>
        </event>


        <event name="Transmit Power Changed" id="0x0812">
            <payload_out>
                <item name="connectionId" type="BYTE">
                    <comment>
                        The connection ID of the link which has updated it Transmit Power.
                    </comment>
                </item>
                <item type="SHORT" name="power">
                    <comment>
                        Transmit Power value in dBm - value is a signed short.
                    </comment>
                </item>
            </payload_out>

            <comment>
                Indication showing Transmit Power Level has been changed on a given Connection ID for the device.
            </comment>
        </event>

        <event name="Voice silent detection setting changed" id="0x0815" associateCommandId="0x0815" associateSettingId="0x0815">
                <payload_out>
                    <item name="mode" type="BYTE">
                        <comment>
                            For the value of mode , please refer Voice silent detection setting. 
                            Only VoiceDetection and SilentDetection is valid for this event.
                        </comment>
                    </item>
                </payload_out>
                
                <comment>
                    Indication voice silent detection mode changed.
                </comment>
        </event>
        
        <event name="Voice silent detected" id="0x0816">
                <payload_out>
                    <item name="mode" type="BYTE">
                        <comment>
                            For the value of mode , please refer Voice silent detection setting. 
                            Only VoiceDetection and SilentDetection is valid for this event.
                        </comment>
                    </item>
                </payload_out>
                
                <comment>
                    Indication voice or silent detected.
                </comment>
                
        </event>
        
        <!-- The range 0x0820 - 0x08F0 is reserved for near/far and caller ID. -->
        
    </section>
    
    <section title="General Information (0x0Ann)">
        
        <command name="Tattoo Serial Number" id="0x0A01" associatedSettingId="0x0A01" associatedEventId="0x0A01">
            <payload_in>
                <item name="serial number" type="BYTE_ARRAY">
                    <comment>
                        Array containing the nine ASCII serial number characters.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Tattoo serial number programmed in manufacturing.
            </comment>
        </command>
        
        <command name="Tattoo Build Code" id="0x0A03" associatedSettingId="0x0A03" associatedEventId="0x0A03">
            <payload_in>
                <item name="build code" type="BYTE_ARRAY">
                    <comment>
                        Array containing the nine ASCII build code characters.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Tattoo build code programmed in manufacturing.
            </comment>
        </command>
        
        <command name="Part Number" id="0x0A05" associatedSettingId="0x0A05" associatedEventId="0x0A05">
            <payload_in>
                <item name="part number" type="UNSIGNED_INT">
                    <comment>
                        Four byte number with the upper three bytes containing the hexadecimal value of the decimal
						part number and the low byte containing a numeric representation of the revision.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Part number and revision programmed in manufacturing.
            </comment>
        </command>
        
        <command name="User ID" id="0x0A06" associatedSettingId="0x0A06" associatedEventId="0x0A06">
            <payload_in>
                <item name="user ID" type="BYTE_ARRAY">
                    <comment>
                        Array of up to 32 ASCII characters used as the User ID.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                User ID accessed by software.
            </comment>
        </command>
        
        <command name="First Date Used" id="0x0A07" associatedSettingId="0x0A07" associatedEventId="0x0A07">
            <payload_in>
                <item name="month" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of month digits.
                    </comment>
                </item>
                <item name="day" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of day digits.
                    </comment>
                </item>
                <item name="year" type="UNSIGNED_INT">
                    <comment>
                        Four ASCII characters of year digits.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Date of the first date of device use.
            </comment>
        </command>
        
        <command name="Configure VR call reject and answer" id="0x0A08" associatedSettingId="0x0A0A" associatedEventId="0x0A08">
            <payload_in>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        If the user can speak to the handset to answer or reject a call, this will be true.
                        Otherwise it's false.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Enable or disable the VR call reject / answer feature, which provides the user the
                ability to speak to the headset to answer or reject an incoming call.
            </comment>
        </command>
        
        <command name="Last Date Used" id="0x0A09" associatedSettingId="0x0A09" associatedEventId="0x0A09">
            <payload_in>
                <item name="month" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of month digits.
                    </comment>
                </item>
                <item name="day" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of day digits.
                    </comment>
                </item>
                <item name="year" type="UNSIGNED_INT">
                    <comment>
                        Four ASCII characters of year digits.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Date of the last date of device use.
            </comment>
        </command>
        
        <command name="Last Date Connected" id="0x0A0B" associatedSettingId="0x0A0B" associatedEventId="0x0A0B">
            <payload_in>
                <item name="month" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of month digits.
                    </comment>
                </item>
                <item name="day" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of day digits.
                    </comment>
                </item>
                <item name="year" type="UNSIGNED_INT">
                    <comment>
                        Four ASCII characters of year digits.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Date of the last date of device connection.
            </comment>
        </command>
        
        <command name="Configure A2DP" id="0x0A0C" associatedSettingId="0x0A0E" associatedEventId="0x0A0C">
            <payload_in>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        If true, enable A2DP. If false, turn A2DP off. Change takes place on reboot.
                        (Changing this value does not cause a reboot.)
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Turn A2DP on or off after the next device reboot.
            </comment>
        </command>
        
        <command name="Time Used" id="0x0A0D" associatedSettingId="0x0A0D" associatedEventId="0x0A0D">
            <payload_in>
                <item name="total time" type="UNSIGNED_SHORT">
                    <comment>
                        Two bytes representing total time used.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Total time of time used.
            </comment>
        </command>
        
        <command name="User Defined Storage" id="0x0A0F" associatedSettingId="0x0A0F" associatedEventId="0x0A0F">
            <payload_in>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        Array of unspecified data bytes to be stored on the device.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Message for user defined storage access.
            </comment>
        </command>
        
        <command name="Set Vocalyst phone number" id="0x0A12" associatedSettingId="0x0A10" associatedEventId="0x0A12">
            <payload_in>
                <item type="STRING" name="vocalystPhoneNumber">
                    <comment>
                        The local Vocalyst telephone number.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set the current Vocalyst telephone number.
            </comment>
        </command>
        
        <command name="Vocalyst info number" id="0x0A16" associatedSettingId="0x0A14" associatedEventId="0x0A16">
            <payload_in>
                <item type="STRING" name="infoPhoneNumber">
                    <comment>
                        The new telephone number for information ("411").
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Sets the current Vocalyst information ("411") telephone number.
            </comment>
        </command>
        
        <command name="Set Genes GUID" id="0x0A1E" associatedSettingId="0x0A1E" associatedEventId="0x0A1E">
            <payload_in>
                <item type="BYTE_ARRAY" name="guid">
                    <comment>
                        The Genes GUID is an array of 16 bytes containing a unique 128-bit value. Byte 0
                        is the most significant, byte 15 is the least significant.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0A20
            </throws>
            <comment>
                Set the device's Genes Globally Unique ID (GUID). If the device is designed not to
                contain a Genes GUID, it must not implement this Command.
            </comment>
        </command>
        
        <command name="Configure mute reminder timing" id="0x0A20" associatedSettingId="0x0A22" associatedEventId="0x0A20">
            <payload_in>
                <item type="UNSIGNED_SHORT" name="seconds">
                    <comment>
                        The number of seconds to wait between mute prompts when the headset is
                        muted.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0808 <!-- illegal value -->
            </throws>
            
            <comment>
                Change the interval between mute reminders (voice prompt or tone) in the headset.
                The device will make a best effort to play the reminders on this schedule, though
                exact timing is not guaranteed.
            </comment>
            
        </command>
        
        <command name="Set pairing mode" id="0x0A24" associatedSettingId="0x0A26" associatedEventId="0x024">
            <payload_in>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        If true, put the device into pairing mode. If false, leave
                        pairing mode.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                <![CDATA[
                    To be implemented only in Bluetooth devices.
                    Put the Bluetooth-capable device into pairing mode (enable = true), or turn off pairing
                    mode (enable = false).<br/>
                    It is <b>not</b> an error to call this with enable = true when already
                    in pairing mode. Similarly,
                    it is acceptable to call this with enable = false when not in pairing mode. In either
                    case there will be no effect.
                ]]>
            </comment>
            
        </command>
        
        <command name="Configure spoken answer/ignore command" id="0x0A2E" associatedSettingId="0x0A30" associatedEventId="0x0A2E">
            <payload_in>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        If true, prompt the user to say "answer" or "ignore" for incoming calls, and
                        turn on
                        recognition of the voice commands that allow it. If false, do not prompt the
                        user
                        and do not try to recognize those utterances.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Enable or disable the 'say "answer" or "ignore"' prompt for incoming calls,
                and turn on or off recognition of the voice commands that allow it.
            </comment>
        </command>
        
        <command name="Configure Lync dial tone on Call press" id="0x0A32">
            <payload_in>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        If true, pressing the call button on the device while it is in an idle state
                        will bring Microsoft Lync to the foreground and initiate a dial tone.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                <![CDATA[
                    Enable or disable the Lync Dial-tone feature (in USB adapter or base). When enabled
                    (the default per Microsoft certification requirements), pressing the call button on
                    the headset while it is in an idle state will bring Lync to the foreground and initiate
                    a dial-tone.<br/>
                    This is configurable to allow users to disable it in the case they do not like the
                    default behavior - a lesson learned with our DECT devices.<br/>
                    This is a adapter/base setting and no special messaging is required from the
                    headset.
                ]]>
            </comment>
            
        </command>
        
        <command name="Clear tombstone" id="0x0A3A">
            <payload_in/>
            <payload_out/>
            
            <comment>
                Clears the last panic (device crash) dump, a so-called "tombstone." It is not an
                error to call this when there is no tombstone.
            </comment>
        </command>

        <command name="Bluetooth Connection Priority" id="0x0A44">
            <payload_in>
                <item type="UNSIGNED_SHORT" name="connection offset">
                    <comment>
                        Offset into the paired device list
                    </comment>
                </item>
                <item type="BOOLEAN" name="allow smart disconnect">
                    <comment>
                        Set to true to allow smart disconnect
                    </comment>
                </item>
            </payload_in>
            <payload_out/>

            <comment>
                Allows devices to smart disconnect on an individual basis
            </comment>
        </command>

        <command name="Bluetooth Connect Disconnect" id="0x0A46">
            <payload_in>
                <item type="UNSIGNED_SHORT" name="connection offset">
                    <comment>
                        Offset into the paired device list
                    </comment>
                </item>
                <item type="BOOLEAN" name="disconnect">
                    <comment>
                        Set to true to disconnect
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Request a paired device to disconnect or connect
            </comment>
        </command>

        <command name="Bluetooth Delete Pairing" id="0x0A48">
            <payload_in>
                <item type="UNSIGNED_SHORT" name="connection offset">
                    <comment>
                        Offset into the paired device list
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Delete the pairing information for paired device with specified connection offset
            </comment>
        </command>

        <command name="Bluetooth Add Pairing" id="0x0A4A">
            <payload_in>
                <item type="UNSIGNED_SHORT" name="connection offset">
                    <comment>
                        Offset into the paired device list
                    </comment>
                </item>
                <item type="BOOLEAN" name="persist">
                    <comment>
                        True for pairing to persist
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="nap">
                    <comment>
                        NAP of the Bluetooth address
                    </comment>
                </item>
                <item type="BYTE" name="uap">
                    <comment>
                        UAP of the Bluetooth address
                    </comment>
                </item>
                <item type="UNSIGNED_INT" name="lap">
                    <comment>
                        LAP of the Bluetooth address
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="link key type">
                    <comment>
                        type of link key
                    </comment>
                </item>
                <item type="SHORT_ARRAY" name="link key">
                    <comment>
                        Link key to use for this connection
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Define an address and link key for either a temporary or permanent bluetooth connection
            </comment>
        </command>


        <setting name="Product name" id="0x0A00">
            <payload_in/>
            <payload_out>
                <item type="STRING" name="productName">
                    <comment>
                        The user-facing product name (market name).
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Return the user-facing product name (market name).
            </comment>
        </setting>
        
        <setting name="Tattoo Serial Number" id="0x0A01" associatedEventId="0x0A01">
            <payload_in/>
            <payload_out>
                <item name="serial number" type="BYTE_ARRAY">
                    <comment>
                        Array containing the nine ASCII serial number characters.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Tattoo serial number programmed in manufacturing.
            </comment>
        </setting>
        
        <setting name="USB PID" id="0x0A02">
            <!-- Will all BR-equipped devices have a USB PID? -->
            <payload_in/>
            <payload_out>
                <item type="UNSIGNED_SHORT" name="pid">
                    <comment>
                        The USB product ID.
                    </comment>
                </item>
            </payload_out>
            <comment>
                This returns the device's USB product ID, a 16-bit unsigned quantity.
            </comment>
        </setting>
        
        <setting name="Tattoo Build Code" id="0x0A03" associatedEventId="0x0A03">
            <payload_in/>
            <payload_out>
                <item name="build code" type="BYTE_ARRAY">
                    <comment>
                        Array containing the nine ASCII build code characters.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Tattoo build code programmed in manufacturing.
            </comment>
        </setting>
        
        <setting name="Firmware version" id="0x0A04">
            <payload_in/>
            <payload_out>
                <item type="UNSIGNED_SHORT" name="buildTarget">
                    <comment>
                        The headset target build number, e.g. 12 = Cheetah / M1100.
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="release">
                    <comment>
                        The headset release number.
                    </comment>
                </item>
                
            </payload_out>
            <comment>
                The firmware ID is a pair of numbers. The buildTarget field describes the headset
                build-target, the release field contains the release number.
            </comment>
        </setting>
        
        <setting name="Part Number" id="0x0A05" associatedEventId="0x0A05">
            <payload_in/>
            <payload_out>
                <item name="part number" type="UNSIGNED_INT">
                    <comment>
                        Four byte number with the upper three bytes containing the hexadecimal value of the decimal
						part number and the low byte containing a numeric representation of the revision.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Part number and revision programmed in manufacturing.
            </comment>
        </setting>
        
        <setting name="User ID" id="0x0A06" associatedEventId="0x0A06">
            <payload_in/>
            <payload_out>
                <item name="user ID" type="BYTE_ARRAY">
                    <comment>
                        Array of up to 32 ASCII characters used as the User ID.
                    </comment>
                </item>
            </payload_out>
            <comment>
                User ID accessed by software.
            </comment>
        </setting>
        
        <setting name="First Date Used" id="0x0A07" associatedEventId="0x0A07">
            <payload_in/>
            <payload_out>
                <item name="month" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of month digits.
                    </comment>
                </item>
                <item name="day" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of day digits.
                    </comment>
                </item>
                <item name="year" type="UNSIGNED_INT">
                    <comment>
                        Four ASCII characters of year digits.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Date of the first date of device use.
            </comment>
        </setting>
        
        <setting name="Last Date Used" id="0x0A09" associatedEventId="0x0A09">
            <payload_in/>
            <payload_out>
                <item name="month" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of month digits.
                    </comment>
                </item>
                <item name="day" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of day digits.
                    </comment>
                </item>
                <item name="year" type="UNSIGNED_INT">
                    <comment>
                        Four ASCII characters of year digits.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Date of the last date of device use.
            </comment>
        </setting>
        
        <setting name="Last Date Connected" id="0x0A0B" associatedEventId="0x0A0B">
            <payload_in/>
            <payload_out>
                <item name="month" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of month digits.
                    </comment>
                </item>
                <item name="day" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of day digits.
                    </comment>
                </item>
                <item name="year" type="UNSIGNED_INT">
                    <comment>
                        Four ASCII characters of year digits.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Date of the last date of device connection.
            </comment>
        </setting>
        
        <setting name="Time Used" id="0x0A0D" associatedEventId="0x0A0D">
            <payload_in/>
            <payload_out>
                <item name="total time" type="UNSIGNED_SHORT">
                    <comment>
                        Two bytes representing total time used.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Total time of time used.
            </comment>
        </setting>
        
        <setting name="User Defined Storage" id="0x0A0F" associatedEventId="0x0A0F">
            <payload_in/>
            <payload_out>
                <item name="data" type="BYTE_ARRAY">
                    <comment>
                        Array of unspecified data bytes to be stored on the device.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Message for user defined storage access.
            </comment>
        </setting>
        
        <setting name="VR call reject and answer" id="0x0A0A" associatedEventId="0x0A08">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        If the user can speak to the handset to answer or reject a call, this value
                        will be true. Otherwise it will be false.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Return whether the VR call reject / answer feature is enabled or not.
            </comment>
        </setting>
        
        <setting name="A2DP is enabled" id="0x0A0E" associatedEventId="0x0A0C">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        If true, A2DP is enabled. If false, A2DP is disabled.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Is A2DP currently enabled? Return true if it is, false if not.
            </comment>
        </setting>
        
        <setting name="Vocalyst phone number" id="0x0A10" associatedEventId="0x0A12">
            <payload_in/>
            <payload_out>
                <item type="STRING" name="vocalystPhoneNumber">
                    <comment>
                        The local Vocalyst telephone number.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Returns the current Vocalyst telephone number.
            </comment>
        </setting>
        
        <setting name="Vocalyst info number" id="0x0A14" associatedEventId="0x0A16">
            <payload_in/>
            <payload_out>
                <item type="STRING" name="infoPhoneNumber">
                    <comment>
                        The telephone number for information ("411").
                    </comment>
                </item>
                
            </payload_out>
            <comment>
                Returns the current Vocalyst information ("411") telephone number.
            </comment>
        </setting>
        
        <setting name="Battery info" id="0x0A1A" associatedEventId="0x0A1C">
            <payload_in/>
            <payload_out>
                <item type="BYTE" name="level">
                    <comment>
                        The current battery level. Zero = completely discharged. The maximum value
                        equals numLevels (below) minus 1.
                    </comment>
                </item>
                <item type="BYTE" name="numLevels">
                    <comment>
                        The number of battery levels.
                    </comment>
                </item>
                <item type="BOOLEAN" name="charging">
                    <comment>
                        If true, the device's battery is charging.
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="minutesOfTalkTime">
                    <comment>
                        The minutes of talk time remaining. If the device cannot measure remaining
                        talk
                        time,
                        this must have the value <![CDATA[<tt>0xFFFF</tt>]]>.
                    </comment>
                </item>
                <item type="BOOLEAN" name="talkTimeIsHighEstimate">
                    <comment>
                        If true, the minutesOfTalkTime value is a high estimate. That is, if set, it
                        would be
                        appropriate to tell the user that they have "less than" minutesOfTalkTime
                        "minutes of talk time remaining." If minutesOfTalkTime ==
                        <![CDATA[<tt>0xFFFF</tt>]]>,
                        the value of this field is not valid (ignore this field).
                    </comment>
                </item>
            </payload_out>
            <comment>
                Implemented only in devices (typically headsets) equipped with a battery.
                The current battery state: battery level, minutes of talk time, if the talk time is
                a high estimate, and charging or not.
            </comment>
        </setting>
        
        <setting name="Genes GUID" id="0x0A1E">
            <payload_in/>
            <payload_out>
                <item type="BYTE_ARRAY" name="guid">
                    <comment>
                        <![CDATA[
                            The Genes GUID is an array of 16 bytes containing a unique 128-bit value. Byte 0
                            is the most significant, byte 15 is the least significant.
                            <p>
                            If the device does not yet contain a Genes GUID (but is designed to accommodate one),
                            this Setting will throw a No Genes GUID exception.
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <throws>
                0x0A1E
            </throws>
            <comment>
                Return the device's Genes Globally Unique ID (GUID). If the device should contain no Genes
                GUID, it must not implement this Setting.
            </comment>
        </setting>
        
        <setting name="Mute reminder timing" id="0x0A22" associatedEventId="0x0A20">
            <payload_in/>
            <payload_out>
                <item type="UNSIGNED_SHORT" name="seconds">
                    <comment>
                        The number of seconds to wait between mute prompts when the headset is
                        muted.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Return the interval between mute reminders (voice prompt or tone) in the headset.
            </comment>
            
        </setting>
        
        <setting name="Pairing mode" id="0x0A26" associatedEventId="0x0A24">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        If true, the device is in Bluetooth pairing mode. If false, it is not in
                        pairing mode.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                To be implemented only in Bluetooth devices.
                Is the device in Bluetooth pairing mode?
                Returns true if in pairing mode, false if not.
            </comment>
            
        </setting>
        
        <setting name="Spoken answer/ignore command" id="0x0A30" associatedEventId="0x0A2E">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        If true, the device will prompt the user to say "answer" or "ignore" for
                        incoming calls and will turn on recognition of those voice commands.
                        If false, the device will not prompt the user
                        and will not try to recognize those utterances.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Reports if the 'say "answer" or "ignore"' prompt and recognition feature is enabled.
            </comment>
            
        </setting>
        
        <setting name="Lync dial tone on Call press" id="0x0A34" associatedEventId="0x0A32">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        If true, pressing the call button on the device while it is in an idle state
                        will bring Microsoft Lync to the foreground and initiate a dial tone. If
                        false, it won't.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Returns whether the Lync Dialtone feature is enabled. See the command "Configure
                Lync dial tone on Call press" for more details.
            </comment>
            
        </setting>
        
        <setting name="Manufacturer" id="0x0A36">
            <payload_in/>
            <payload_out>
                <item name="name" type="STRING">
                    <comment>
                        This is a string identifying the manufacturer of the
                        product.  The name is presented in "reverse DNS" style, as in "COM.PLANTRONICS".  By convention,
                        the name should be all uppercase.
                    </comment>
                </item>
            </payload_out>
            <comment>
                This setting provides information that identifies the manufacturer of the device in
                "reverse DNS" style.  Generally, this will always be "COM.PLANTRONICS".
            </comment>
        </setting>
        
        <setting name="Tombstone" id="0x0A38">
            <payload_in/>
            <payload_out>
                <item type="BYTE_ARRAY" name="crashDump">
                    <comment>
                        The dump of the last panic (device crash), in a device-dependent format.
                    </comment>
                </item>
            </payload_out>
            
            <throws>
                0x0A38
            </throws>
            
            <comment>
                <![CDATA[
                    Returns the dump of the last panic (device crash), in a device-dependent format. The app
                    that receives must use the device type (and possibly the firmware version) to decode it.
                    Different devices have different capabilities and requirements, so we cannot
                    define a cross-platform structure for this payload.<br/>
                    Throws a "no tombstone" exception if the device has never created a panic tombstone, or has not created
                    one since the last call to Clear tombstone.
                ]]>
            </comment>
        </setting>

        <setting name="Bluetooth Address" id="0x0A40">
            <payload_in/>
            <payload_out>
                <item type="UNSIGNED_SHORT" name="nap">
                    <comment>
                        NAP of the Bluetooth address
                    </comment>
                </item>
                <item type="BYTE" name="uap">
                    <comment>
                        UAP of the Bluetooth address
                    </comment>
                </item>
                <item type="UNSIGNED_INT" name="lap">
                    <comment>
                        LAP of the Bluetooth address
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[
                    Returns the bluetooth address of the device
                ]]>
            </comment>
        </setting>

        <setting name="Bluetooth Connection" id="0x0A42">
            <payload_in>
                <item type="UNSIGNED_SHORT" name="connection offset">
                    <comment>
                        Offset of required connection bluetooth settings
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item type="UNSIGNED_SHORT" name="connection offset">
                    <comment>
                        Offset of connection bluetooth settings, expected to support a range of 0..7
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="nap">
                    <comment>
                        NAP of the Bluetooth address
                    </comment>
                </item>
                <item type="BYTE" name="uap">
                    <comment>
                        UAP of the Bluetooth address
                    </comment>
                </item>
                <item type="UNSIGNED_INT" name="lap">
                    <comment>
                        LAP of the Bluetooth address
                    </comment>
                </item>
                <item type="BYTE" name="priority">
                    <comment>
                        Current device priority
                    </comment>
                </item>
                <item type="STRING" name="productname">
                    <comment>
                        If know, the friendly name of the device
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[
                    Returns information about the paired device in the connection list
                ]]>
            </comment>
        </setting>


        <setting name="Deckard Version" id="0x0AFE">
            <payload_in/>
            <payload_out>
                <item name="ReleaseOrDev" type="BOOLEAN">
                    <definedValue name="DeckardVersionReleaseOrDev"     value="TRUE"/>
                    <comment>
                        Set to true if Release version of Deckard
                        Set to false if Development version of Deckard
                    </comment>
                </item>
                <item name="MajorVersion" type="UNSIGNED_SHORT">
                    <definedValue name="DeckardVersionMajor" value="2"/>
                    <comment>
                        The Major version of Deckard xml file to which the device message conform
                    </comment>
                </item>
                <item name="MinorVersion" type="UNSIGNED_SHORT">
                    <definedValue name="DeckardVersionMinor" value="3"/>
                    <comment>
                        The Minor version of Deckard xml file to which the device message conform
                    </comment>
                </item>
                <item name="MaintenanceVersion" type="UNSIGNED_SHORT">
                    <definedValue name="DeckardVersionMaintenance" value="0"/>
                    <comment>
                        The Maintenance version of Deckard xml file to which the device message conform
                    </comment>
                </item>
            </payload_out>
            <comment>
                This setting allows a device to be queried as to which version of Deckard its messages Ids and payloads
                have been built against.
            </comment>
        </setting>

        
        <event name="Tattoo Serial Number" id="0x0A01">
            <payload_in/>
            <payload_out>
                <item name="serial number" type="BYTE_ARRAY">
                    <comment>
                        Array containing the nine ASCII serial number characters.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Tattoo serial number programmed in manufacturing.
            </comment>
        </event>
        
        <event name="Tattoo Build Code" id="0x0A03">
            <payload_in/>
            <payload_out>
                <item name="build code" type="BYTE_ARRAY">
                    <comment>
                        Array containing the nine ASCII build code characters.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Tattoo build code programmed in manufacturing.
            </comment>
        </event>
        
        <event name="Part Number" id="0x0A05">
            <payload_in/>
            <payload_out>
                <item name="part number" type="UNSIGNED_INT">
                    <comment>
                        Four byte number with the upper three bytes containing the hexadecimal value of the decimal
						part number and the low byte containing a numeric representation of the revision.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Part number and revision programmed in manufacturing.
            </comment>
        </event>
        
        <event name="User ID" id="0x0A06">
            <payload_in/>
            <payload_out>
                <item name="user ID" type="BYTE_ARRAY">
                    <comment>
                        Array of up to 32 ASCII characters used as the User ID.
                    </comment>
                </item>
            </payload_out>
            <comment>
                User ID accessed by software.
            </comment>
        </event>
        
        <event name="First Date Used" id="0x0A07">
            <payload_in/>
            <payload_out>
                <item name="month" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of month digits.
                    </comment>
                </item>
                <item name="day" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of day digits.
                    </comment>
                </item>
                <item name="year" type="UNSIGNED_INT">
                    <comment>
                        Four ASCII characters of year digits.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Date of the first date of device use.
            </comment>
        </event>
        
        <event name="Configure VR call reject and answer" id="0x0A08">
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        True if the user can speak to the handset to answer or reject a call.
                        Otherwise it's false.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the VR call reject / answer feature has been changed.
            </comment>
        </event>
        
        <event name="Last Date Used" id="0x0A09">
            <payload_in/>
            <payload_out>
                <item name="month" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of month digits.
                    </comment>
                </item>
                <item name="day" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of day digits.
                    </comment>
                </item>
                <item name="year" type="UNSIGNED_INT">
                    <comment>
                        Four ASCII characters of year digits.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Date of the last date of device use.
            </comment>
        </event>
        
        <event name="Last Date Connected" id="0x0A0B">
            <payload_in/>
            <payload_out>
                <item name="month" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of month digits.
                    </comment>
                </item>
                <item name="day" type="UNSIGNED_SHORT">
                    <comment>
                        Two ASCII characters of day digits.
                    </comment>
                </item>
                <item name="year" type="UNSIGNED_INT">
                    <comment>
                        Four ASCII characters of year digits.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Date of the last date of device connection.
            </comment>
        </event>
        
        <event name="Configure A2DP" id="0x0A0C">
            <payload_out>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        If true, A2DP is enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the A2DP configuration has changed.
            </comment>
        </event>
        
        <event name="Time Used" id="0x0A0D">
            <payload_in/>
            <payload_out>
                <item name="total time" type="UNSIGNED_SHORT">
                    <comment>
                        Two bytes representing total time used.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Total time of time used.
            </comment>
        </event>
        
        <event name="User Defined Storage Changed" id="0x0A0F">
            <payload_in/>
            <payload_out/>
                    <comment>
                Notification of change to user defined storage data.
            </comment>
        </event>
        
        <event name="Set Vocalyst phone number" id="0x0A12">
            <payload_out>
                <item type="STRING" name="vocalystPhoneNumber">
                    <comment>
                        The local Vocalyst telephone number.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the current Vocalyst telephone number has been changed.
            </comment>
        </event>
        
        <event name="Vocalyst info number" id="0x0A16">
            <payload_out>
                <item type="STRING" name="infoPhoneNumber">
                    <comment>
                        The telephone number for information ("411").
                    </comment>
                </item>
                
            </payload_out>
            <comment>
                Notification that the current Vocalyst information ("411") telephone number has changed.
            </comment>
        </event>
        
        <event name="Battery status changed" id="0x0A1C">
            <payload_out>
                <item type="BYTE" name="level">
                    <comment>
                        The current battery level. Zero = completely discharged. The maximum value
                        equals numLevels (below) minus 1.
                    </comment>
                </item>
                <item type="BYTE" name="numLevels">
                    <comment>
                        The number of battery levels.
                    </comment>
                </item>
                <item type="BOOLEAN" name="charging">
                    <comment>
                        If true, the device's battery is charging.
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="minutesOfTalkTime">
                    <comment>
                        The minutes of talk time remaining. If the device cannot measure remaining
                        talk
                        time,
                        this must have the value <![CDATA[<tt>0xFFFF</tt>]]>.
                    </comment>
                </item>
                <item type="BOOLEAN" name="talkTimeIsHighEstimate">
                    <comment>
                        If true, the minutesOfTalkTime value is a high estimate. That is, it would
                        be
                        appropriate to tell the user that they have "less than" minutesOfTalkTime
                        "minutes of talk time remaining." If minutesOfTalkTime ==
                        <![CDATA[<tt>0xFFFF</tt>]]>,
                        the value of this field is not valid (ignore this field).
                    </comment>
                </item>
            </payload_out>
            <comment>
                Implemented only in devices (typically headsets) equipped with a battery.
                The device sends this event whenever its battery status changes. (It is acceptable
                for the device to
                limit how often it sends this, for instance no more than once per minute.)
                Includes the current battery state: battery level, minutes of talk time, and
                charging ornot.
            </comment>
        </event>
        
        <event name="Set Genes GUID" id="0x0A1E">
            <payload_out>
                <item type="BYTE_ARRAY" name="guid">
                    <comment>
                        The Genes GUID
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the Genes Globally Unique ID (GUID) has been updated.
            </comment>
        </event>
        
        <event name="Configure mute reminder timing" id="0x0A20">
            <payload_out>
                <item type="UNSIGNED_SHORT" name="seconds">
                    <comment>
                        The number of seconds between mute prompts when the headset is
                        muted.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the Mute Reminder timing has been changed
            </comment>
        </event>
        
        <event name="Set pairing mode" id="0x0A24">
            <payload_out>
                <item type="BOOLEAN" name="enable">
                    <comment>
                        If true, the device is in pairing mode. False otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the Pairing Mode of the Device has changed.
            </comment>
            
        </event>
        
        <event name="Configure spoken answer/ignore command" id="0x0A2E">
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        If true, spoken answer/ignore recognition is enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the spoken answer/ignore recognition feature status has changed
            </comment>
        </event>
        
        <event name="Low battery voice prompt" id="0x0A28">
            <payload_out>
                <item name="urgency" type="BYTE">
                    <comment>
                        <![CDATA[
                            The "urgency" value.<br/>
                            <table>
                            <tbody>
                            <tr><th class="topLeft"><b>Value (decimal)</b></th><th class="topLeft"><b>Urgency</b></th></tr>
                            <tr><td>1</td><td>Critical</td></tr>
                            <tr><td>2</td><td>Low</td></tr>
                            </tbody>
                            </table>
                        ]]>
                    </comment>
                    <definedValue name="UrgencyCritical" value="1" />
                    <definedValue name="UrgencyLow" value="2" />
                </item>
                
            </payload_out>
            
            <comment>
                Implemented only in devices equipped with a battery.
                The device (typically a headset) sends this event when it "speaks" a low battery voice prompt - or would
                speak it,
                if the prompt is disabled. The purpose is to allow the application that receives
                the event to display an on-screen notice that's synchronized with the in-ear
                warning.
            </comment>
            
        </event>
        
        <event name="Configure Lync dial tone on Call press" id="0x0A32">
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>
                        If true, Lync Dial Tone is enabled. False otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the Lync Dial Tone Setting of a device has been changed.
            </comment>
        </event>
        
        <event name="Clear tombstone" id="0x0A3A">
            <payload_out/>
            
            <comment>
                Notification that the Tombstone has been cleared.
            </comment>
        </event>

        <event name="Bluetooth Connection" id="0x0A42">
            <payload_out>
                <item type="UNSIGNED_SHORT" name="connection offset">
                    <comment>
                        Offset of connection bluetooth settings, expected to support a range of 0..7
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="nap">
                    <comment>
                        NAP of the Bluetooth address
                    </comment>
                </item>
                <item type="BYTE" name="uap">
                    <comment>
                        UAP of the Bluetooth address
                    </comment>
                </item>
                <item type="UNSIGNED_INT" name="lap">
                    <comment>
                        LAP of the Bluetooth address
                    </comment>
                </item>
                <item type="BYTE" name="priority">
                    <comment>
                        Current device priority
                    </comment>
                </item>
                <item type="STRING" name="productname">
                    <comment>
                        If know, the friendly name of the device
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[
                    Update to information about a paired device in the connection list
                ]]>
            </comment>
        </event>

        <exception name="No Genes GUID" id="0x0A1E">
            <payload_out/>
            <comment>
                <![CDATA[
                    The Genes GUID Setting throws this exception if an initiator requests the Genes GUID before one
                    is set.
                    <p>
                    If the device is designed not to contain a Genes GUID, it must not implement this Exception.
                ]]>
            </comment>
        </exception>
        
        <exception name="Genes GUID already set" id="0x0A20">
            <payload_out/>
            <comment>
                <![CDATA[
                    The Genes GUID Command throws this exception if an initiator attempts to set the
                    Genes GUID after one has been set.
                    <p>
                    If the device is designed not to
                    contain a Genes GUID, it must not implement this Exception.
                ]]>
            </comment>
        </exception>
        
    </section>
    
    <section title="General (0x0Cnn)">
        
        <setting name="Connection Status" id="0x0C00">
            <payload_in/>
            <payload_out>
                <item type="BYTE_ARRAY" name="downstream port IDs">
                    <comment>
                        a Byte array containing IDs of all downstream ports that it is possible to connect to.
                        - E.G. a returned value of 00050203040607 denotes that the device contains 5 downstream ports (IDs 02, 03,04,06, 07).
                        This does contain the ID of the Port whence the request came.
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="connected port IDs">
                    <comment>
                        a Byte array containing IDs of all downstream ports that are connected.
                        - E.G. a returned value of 0003020406 denotes that 3 downstream ports (IDs 02, 04,06) are connected.
                        This does NOT contain the ID of the Port whence the request came.
                    </comment>
                </item>
                <item type="BYTE" name="originating port ID">
                    <comment>
                        a Byte containing the ID of the ports whence the request originated.
                    </comment>
                </item>
            </payload_out>

            <comment>
                Enables a Host to determine the number of ports and connection status of a device.
            </comment>
        </setting>

        <event name="Connected device" id="0x0C00">
            <payload_out>
                <item name="address" type="BYTE">
                    <comment>
                        The port number of the new eligible connection.
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[
                    In order to allow devices to learn about other devices' eligible connections,
                    we define two standard BladeRunner events,
                    "Connected device" and "Disconnected device".
                    <p>
                    Upon Device A being connected to a new BladeRunner-capable Device B, Device A must
                    send the "Connected device" event (this event) to all of its linked initiators.
                    <p>
                    Any device capable of initiating a session with another, or which will expose
                    internal emulated devices to other initiators, must implement both of the
                    "Connected device" and "Disconnected device" events.
                    <p>
                    Presence (absence) of these events in a recipient device's metadata implies its
                    ability (inability) to connect to and disconnect from other devices dynamically.
                    <p>
                    <i>This event is also specified in the BladeRunner 1.1 Specification.</i>
                ]]>
            </comment>
        </event>
        
        <event name="Disconnected device" id="0x0C02">
            <payload_out>
                <item name="address" type="BYTE">
                    <comment>
                        The (former) port number of the disconnected device.
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[
                    In order to allow devices to learn about other devices' eligible connections,
                    we define two standard BladeRunner events, "Connected device" and "Disconnected device".
                    <p>
                    When Device B disconnects from Device A, both devices should tell all of their
                    remaining linked BladeRunner initiators using the "Disconnected device" event
                    (this event), with the "address" value set to the (former) port number of the
                    disconnected port.
                    <p>
                    Any device capable of initiating a session with another, or which will expose
                    internal emulated devices to other initiators, must implement both events.
                    <p>
                    Presence (absence) of these events in a recipient device's metadata implies its
                    ability (inability) to connect to and disconnect from other devices dynamically.
                    <p>
                    <i>This event is also specified in the BladeRunner 1.1 Specification.</i>
                ]]>
            </comment>
        </event>
        
    </section>
    
    <section title="Device Status (0x0Enn)">
        
        <command name="Microphone Mute State" id="0x0E01" associatedSettingId="0x0E01" associatedEventId="0x0E01">
            <payload_in>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the device is muted and false (0) if unmuted.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
				Microphone mute state of the device.
            </comment>
        </command>

        <command name="Transmit Audio State" id="0x0E03" associatedSettingId="0x0E03" associatedEventId="0x0E03">
            <payload_in>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the device Tx audio path is on and false (0) if Tx audio path is off.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
				Transmit (microphone) audio state of the device.
            </comment>
        </command>
		
        <command name="Call answer" id="0x0E04">
            <payload_in/>
            <payload_out/>
            
            <comment>
                This command instructs the device to answer the current incoming (ringing) call.  This is intended only
                for devices (like Bluetooth headsets) with the ability to tell the audio gateway (AG) to do so.
            </comment>
        </command>
        
        <command name="Receive Audio State" id="0x0E05" associatedSettingId="0x0E05" associatedEventId="0x0E05">
            <payload_in>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the device Rx audio path is on and false (0) if Rx audio path is off.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
				Receive (speaker) audio state of the device.
            </comment>
        </command>

        <command name="Call end" id="0x0E06">
            <payload_in/>
            <payload_out/>
            
            <comment>
                This command instructs the device to terminate (hang up) the current call.  This is intended only
                for devices (like Bluetooth headsets) with the ability to tell the audio gateway (AG) to do so.
            </comment>
            
        </command>
        
        <command name="LED Status Generic" id="0x0E07" associatedSettingId="0x0E07" associatedEventId="0x0E07">
            <payload_in>
                <item name="ID" type="BYTE_ARRAY">
                    <comment>
                        Array of LED IDs.
                    </comment>
                </item>
                <item name="color" type="BYTE_ARRAY">
                    <comment>
                        Array of LED colors.
                    </comment>
                </item>
                <item name="state" type="BYTE_ARRAY">
                    <comment>
                        Array of LED states.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0808
            </throws>
            <comment>
				LED status of the device.  All parameter arrays must be of a matching length or an exception will be returned.
            </comment>
        </command>

        <command name="Set Audio Transmit Gain" id="0x0E08">
            <payload_in>
                <item name="gain" type="BYTE">
                    <comment>
                        Valid range is 0 - 0x0F
                        If zero, mute the transmit (microphone) audio.
                        All other values set the gain from 0x01 to 0x0F as required.
                        Note that Bluetooth devices implement values 0 and 0x0F.
                        Therefore, non-zero values will be handled in the device as being 0x0F.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
            </comment>
        </command>

        <command name="Headset Available" id="0x0E09" associatedSettingId="0x0E09" associatedEventId="0x0E09">
            <payload_in>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the headset is connected and false (0) if the headset is disconnected.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
				Availability of the headset based on connection state (wireless or wired).
            </comment>
        </command>

        <command name="Set Speaker Volume" id="0x0E0A" associatedSettingId="0x0E0A" associatedEventId="0x0E0A">
            <payload_in>
                <item name="action" type="BYTE">
                    <comment>
                        <![CDATA[
                            If action is 0, then the value held in volume can be negative for volume down or positive for volume up<br/>
                            If action is 1, then the value held in volume is an absolute percentage value with the range 0..100%<br/>
							If action is 2, then the value held in volume is an absolute dB value<br/>
                            Support for all action types is not mandatory.
                        ]]>
                    </comment>
					<definedValue name="SpeakerVolumeRelativeUpDown"    	value="0x00"/>
                    <definedValue name="SpeakerVolumeAbsolutePercentage"	value="0x01"/>
                    <definedValue name="SpeakerVolumeAbsoluteDb"    		value="0x02"/>
                    <definedValue name="SpeakerVolumeQ8dot8Format"    		value="0x03"/>
                </item>
                <item name="volume" type="SHORT">
                    <comment>
                        Varies depending on action.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
				Speaker volume of the device.
            </comment>
        </command>

        <command name="Y Cable Connection" id="0x0E0B" associatedSettingId="0x0E0B" associatedEventId="0x0E0B">
            <payload_in>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the Y-Cable is connected and false (0) if the Y-Cable is disconnected.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
				Connection state for a Y-Cable.
            </comment>
        </command>

        <command name="Make call" id="0x0E0C">
            <payload_in>
                <item name="digits" type="STRING">
                    <comment>
                        The digits to dial. Whitespace (ASCII space, tab, LF, CR) is ignored.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Dial a telephone number. Whitespace (ASCII space, tab, LF, CR) is ignored.  This is intended only
                for devices (like Bluetooth headsets) with the ability to tell the audio gateway (AG) to do so.
            </comment>
            
        </command>
        
        <command name="Redial" id="0x0E0E">
            <payload_in/>
            <payload_out/>
            <comment>
                Redial the most recently-dialed telephone number. If the device has not dialed a
                number previously, this command is ignored. This is intended only
                for devices (like Bluetooth headsets) with the ability to tell the audio gateway (AG) to redial.
            </comment>
            
        </command>

        <command name="Flash Call" id="0x0E10">
            <payload_in>
                <item name="value" type="UNSIGNED_SHORT">
                    <comment>
                        Reserved for future use - set to 0.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Issue a Flash command to a device.
            </comment>
        </command>

        <command name="Configure Current Language" id="0x0E1A" associatedSettingId="0x0E1A" associatedEventId="0x0E1A">
            <payload_in>
                <item type="UNSIGNED_SHORT" name="LanguageId">
                    <comment>
                        <![CDATA[
                        <a name="LanguageIds">
                        Language ID is the USB language ID<br/>
                        English US 0x0409<br/>
                        English UK 0x0809<br/>
                        Japanese 0x0411<br/>
                        Portuguese Brazil 0x0416<br/>
                        Portuguese Portugal 0x0816<br/>
                        French France 0x040C<br/>
                        Spanish Mexico 0x080A<br/>
                        </a>
                        ]]>
                    </comment>
                    <definedValue name="LanguageIdEnglishUS" value="0x0409"/>
                    <definedValue name="LanguageIdEnglishUK" value="0x0809"/>
                    <definedValue name="LanguageIdJapanese" value="0x0411"/>
                    <definedValue name="LanguageIdPortugueseBrazil" value="0x0416"/>
                    <definedValue name="LanguageIdPortuguesePortugal" value="0x0816"/>
                    <definedValue name="LanguageIdFrenchFrance" value="0x040C"/>
                    <definedValue name="LanguageIdSpanishMexico" value="0x080A"/>
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0808
            </throws>
		
            <comment>
                If the Language ID is valid , the success should be returned .Otherwise "Illegal value" exception should be throw.
            </comment>
        </command>

        <command name="Remove Partition Information" id="0x0E1C">
            <payload_in>
                <item name="partitionId" type="UNSIGNED_SHORT">
                    <comment>
                        The partition id to remove
                    </comment>
                </item>
            </payload_in>
            <payload_out>
            </payload_out>
            <comment>
                This command removes information for a partition given a partition id - this would normally be a language id
            </comment>
        </command>

		
        <setting name="Call status" id="0x0E02" associatedEventId="0x0E00">
            <payload_in/>
            <payload_out>
                <item name="state" type="BYTE">
                    <comment>
                        The current call state. Values are:
                        <![CDATA[
                            <br/>
                            <table>
                            <tbody>
                            <tr><th class="topLeft"><b>Value (decimal)</b></th><th class="topLeft"><b>State</b></th></tr>
                            <tr><td>0</td><td>Idle</td></tr>
                            <tr><td>1</td><td>Active</td></tr>
                            <tr><td>2</td><td>Ringing</td></tr>
                            <tr><td>3</td><td>Dialing</td></tr>
                            <tr><td>4</td><td>ActiveAndRinging</td></tr>
                            </tbody>
                            </table>
                        ]]>
                    </comment>
                </item>
                <item name="number" type="STRING">
                    <comment>
                        The incoming or dialed number, if available. This will be the empty
                        string if the state is Idle or number is not available.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                This contains the telephone call state of the device. The device will issue
                "Call status change" events whenever the state changes.
            </comment>
        </setting>

        <setting name="Microphone Mute State" id="0x0E01" associatedEventId="0x0E01">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the device is muted and false (0) if unmuted.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Microphone mute state of the device.
            </comment>
        </setting>

        <setting name="Transmit Audio State" id="0x0E03" associatedEventId="0x0E03">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the device Tx audio path is on and false (0) if Tx audio path is off.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Transmit (microphone) audio state of the device.
            </comment>
        </setting>

        <setting name="Receive Audio State" id="0x0E05" associatedEventId="0x0E05">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the device Rx audio path is on and false (0) if Rx audio path is off.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Receive (speaker) audio state of the device.
            </comment>
        </setting>

        <setting name="LED Status Generic" id="0x0E07" associatedEventId="0x0E07">
            <payload_in/>
            <payload_out>
                <item name="ID" type="BYTE_ARRAY">
                    <comment>
                        Array of LED IDs.
                    </comment>
                    <definedValue name="LedIdHeadsetCallAnswerEnd"   value="0x00"/>
                    <definedValue name="LedIdMute"                   value="0x01"/>
                    <definedValue name="LedIdVolumeUp"               value="0x02"/>
                    <definedValue name="LedIdVolumeDown"             value="0x03"/>
                    <definedValue name="LedIdMobileCallAnswerEnd"    value="0x04"/>
                    <definedValue name="LedIdComputerCallAnswerEnd"  value="0x05"/>
                    <definedValue name="LedIdDeskPhoneCallAnswerEnd" value="0x06"/>
                    <definedValue name="LedIdVoiceRecognition"       value="0x07"/>
                    <definedValue name="LedIdPower"                  value="0x08"/>
                    <definedValue name="LedIdDectSubscription"       value="0x09"/>
                    <definedValue name="LedIdBluetoothPairing"       value="0x0A"/>
                </item>
                <item name="color" type="BYTE_ARRAY">
                    <comment>
                        Array of LED colors.
                    </comment>
                    <definedValue name="LedColorOff"   			value="0x00"/>
                    <definedValue name="LedColorGreen"   		value="0x01"/>
                    <definedValue name="LedColorRed"   			value="0x02"/>
                    <definedValue name="LedColorGreenAndRed"   	value="0x03"/>
                    <definedValue name="LedColorBlue"   		value="0x04"/>
                    <definedValue name="LedColorRedAndBlue"   	value="0x05"/>
                    <definedValue name="LedColorAmber"   		value="0x06"/>
                    <definedValue name="LedColorPurple"   		value="0x07"/>
                    <definedValue name="LedColorWhite"   		value="0x08"/>
                    <definedValue name="LedColorAmberAndGreen"	value="0x09"/>
                    <definedValue name="LedColorBlueAndPurple"	value="0x0A"/>
                </item>
                <item name="state" type="BYTE_ARRAY">
                    <comment>
                        Array of LED states.
                    </comment>
                    <definedValue name="LedStateOff"   			value="0x00"/>
                    <definedValue name="LedStateOn"   			value="0x01"/>
                    <definedValue name="LedStateFlashSlow"   	value="0x02"/>
                    <definedValue name="LedStateFlashFast"   	value="0x03"/>
                </item>
            </payload_out>
            <comment>
				LED status of the device.
            </comment>
        </setting>
        
        <setting name="Headset Available" id="0x0E09" associatedEventId="0x0E09">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the headset is connected and false (0) if the headset is disconnected.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Availability of the headset based on connection state (wireless or wired).
            </comment>
        </setting>

        <setting name="Y Cable Connection" id="0x0E0B" associatedEventId="0x0E0B">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the Y-Cable is connected and false (0) if the Y-Cable is disconnected.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Connection state for a Y-Cable.
            </comment>
        </setting>
		
        <setting name="Speaker Volume" id="0x0E0A" associatedEventId="0x0E0A">
            <payload_in/>
            <payload_out>
                <item name="volumeValueType" type="BYTE">
                    <comment>
                        Identifies the type of volume value returned.
                    </comment>
                </item>
                <item name="volume" type="SHORT">
                    <comment>
                        Varies depending on volume value type.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Speaker volume of the device.
            </comment>
        </setting>
		
        <setting name="Spoken language" id="0x0E1A">
            <payload_in/>
            <payload_out>
                <item name="LanguageId" type="UNSIGNED_SHORT">
                    <comment>
                        The current USB LANGID for the device's spoken language
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[
                    Returns the USB LANGID for the device's spoken language.  The full list of LANGID
                    values is <a href="http://www.usb.org/developers/docs/USB_LANGIDs.pdf">here</a>.
                    <p>
                    For example, here are some non-normative values.  Please refer to the standard for the latest correct values:
                    <br><br>
                    <table>
                    <tbody>
                    <tr><th class="topLeft"><b>Language</b></th><th class="topLeft"><b>Value (hexadecimal)</b></th></tr>
                    <tr><td>English (U.S.)</td><td>0x0409</td></tr>
                    <tr><td>English (U.K.)</td><td>0x0809</td></tr>
                    <tr><td>Japanese</td><td>0x0411</td></tr>
                    <tr><td>Portuguese (Brazil)</td><td>0x0416</td></tr>
                    <tr><td>Portuguese (Portugal)</td><td>0x0816</td></tr>
                    <tr><td>French (France)</td><td>0x040c</td></tr>
                    <tr><td>Spanish (Mexico)</td><td>0x080a</td></tr>
                    </tbody>
                    </table>
                    <br>
                    This must be implemented on all devices that feature spoken prompts.
                ]]>
            </comment>
        </setting>

        <setting id="0x0E1B" name="Supported Languages">
            <payload_in/>
            <payload_out>
                <item type="SHORT_ARRAY" name="Languages">
                    <comment>
                        The array of the supported Languages ID . The ID should be  USB language ID.
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[
                    Returns the USB LANGID for the device's spoken language.  The full list of LANGID
                    values is <a href="http://www.usb.org/developers/docs/USB_LANGIDs.pdf">here</a>.
                    <p>
                    For example, here are some non-normative values.  Please refer to the standard for the latest correct values:
                    <br><br>
                    <table>
                    <tbody>
                    <tr><th class="topLeft"><b>Language</b></th><th class="topLeft"><b>Value (hexadecimal)</b></th></tr>
                    <tr><td>English (U.S.)</td><td>0x0409</td></tr>
                    <tr><td>English (U.K.)</td><td>0x0809</td></tr>
                    <tr><td>Japanese</td><td>0x0411</td></tr>
                    <tr><td>Portuguese (Brazil)</td><td>0x0416</td></tr>
                    <tr><td>Portuguese (Portugal)</td><td>0x0816</td></tr>
                    <tr><td>French (France)</td><td>0x040c</td></tr>
                    <tr><td>Spanish (Mexico)</td><td>0x080a</td></tr>
                    </tbody>
                    </table>
                    <br>
                    This must be implemented on all devices that feature spoken prompts.
                    ]]>
            </comment>
    	</setting>

        <setting name="Get Partition Information" id="0x0E1C">
            <payload_in>
                <item name="partition" type="UNSIGNED_SHORT">
                    <comment>
                        The partition to obtain information about
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="partition" type="UNSIGNED_SHORT">
                    <comment>
                        Requested partition
                    </comment>
                </item>
                <item name="partitionId" type="UNSIGNED_SHORT">
                    <comment>
                        Id of the partition that information has been requested of
                    </comment>
                </item>
                <item name="version" type="UNSIGNED_SHORT">
                    <comment>
                        Version of the partition
                    </comment>
                </item>
                <item name="partitionNumber" type="UNSIGNED_SHORT">
                    <comment>
                        Requested partition number
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </setting>

        <setting name="Audio status" id="0x0E1E">
            <payload_in/>
            <payload_out>
                <item name="codec" type="BYTE">
                    <comment>
                        <![CDATA[
                            <table border=1 cellspacing=0 cellpadding=2>
                            <tr>
                            <td><b>Codec</b></td>
                            <td><b>Constant</b></td>
                            <td><b>Value</b></td>
                            </tr>
                            <tr>
                            <td>None</td>
                            <td><tt>AudioNone</tt>
                            </td>
                            <td>0x00</td>
                            </tr>
                            <tr>
                            <td>CVSD</td>
                            <td><tt>AudioCVSD</tt>
                            </td>
                            <td>0x01</td>
                            </tr>
                            <tr>
                            <td>G.726</td>
                            <td><tt>AudioG726</tt>
                            </td>
                            <td>0x02</td>
                            </tr>
                            <tr>
                            <td>G.722</td>
                            <td><tt>AudioG722</tt>
                            </td>
                            <td>0x03</td>
                            </tr>
                            <tr>
                            <td>mSBC</td>
                            <td><tt>AudioMSBC</tt>
                            </td>
                            <td>0x04</td>
                            </tr>
                            <tr>
                            <td>A2DP</td>
                            <td><tt>AudioA2DPSink</tt>
                            </td>
                            <td>0x05</td>
                            </tr>
                            </table>
                        ]]>
                    </comment>
                </item>
                <item name="port" type="BYTE">
                    <comment>
                        <![CDATA[
                            The port of the device to which that the audio status relates
                        ]]>
                    </comment>
                </item>
                <item name="speaker gain" type="BYTE">
                    <comment>
                        Speaker gain is in the range 0x0-0xF.
                    </comment>
                </item>
                <item name="mic gain" type="BYTE">
                    <comment>
                        Mic gain is in the range 0x0-0xF. Mic gain == 0x0 means 'muted.'
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[
                    <a name="Audio status">This Setting reports the audio status,</a>
                    including headset speaker and microphone
                    volume levels and codec type.
                    
                    <p>If the codec is CVSD, G.726, G.722, or mSBC, the value of
                    the Speaker Gain field refers to SCO audio volume.  If the codec is A2DP,
                    Speaker Gain holds the A2DP streaming audio volume.  If codec is None, Speaker
                    Gain holds the previously-used SCO audio volume.</p>
                    
                    <p><b>[Implementation note</b>: Some devices use only two
                    values for mic gain: zero, meaning muted, and not-zero, meaning not muted.]</p>
                ]]>
            </comment>
        </setting>
        
        <setting name="LED Status" id="0x0E20">
            <payload_in/>
            <payload_out>
                <item type="SHORT_ARRAY" name="LED Indication">
                    <comment>
                        a Short array containing all the LED Indications present on a given device. The number of shorts contained in the short array will device and variant specific.
                        E.G. devices may contain multiple LED Indicators, each of which will display a subset of the operational state of the device.
                        For instance, a device may contain a dedicated Mute LED - the status of this will be returned in the appropriate Short of the Short Array.

                        The upper Byte of each short shall contain the LED ID - This shall be defined in a product System Functional Specification
                        The lower Byte of each short shall contain the LED Indication ID - This shall be defined in a product System Functional Specification

                        - E.G. a returned value of 00010103 denotes that the device contains a single LED indication, and that it is currently displaying Indication 0x03, as defined in the SFS.
                  </comment>
                </item>
              </payload_out>

            <comment>
                Enables a Host to determine the current LED Indication being provided by a device.
            </comment>
        </setting>

        <setting name="Headset Call status" id="0x0E22">
            <payload_in/>
            <payload_out>
                <item type="UNSIGNED_SHORT" name="number of devices">
                    <comment>
                        The number of devices in the status
                    </comment>
                </item>

                <item type="BYTE" name="connectionId">
                    <comment>
                        ConnectionId to which the Headset call status refers
                    </comment>
                </item>
                <item name="state" type="BYTE">
                    <comment>
                        The current call state. (same as call state)
                    </comment>
                </item>
                <item name="number" type="STRING">
                    <comment>
                        The incoming or dialed number, if available. This will be the empty
                        string if the state is Idle or number is not available.
                    </comment>
                </item>
            </payload_out>

            <comment>
                This contains the telephone call state of all devices connected to the device.
                The returned payload is repeated for each connected device able to make phone calls
                The device will issue "Headset Call status " event whenever any call of the connected device state changes.
            </comment>
        </setting>

        <event name="Call status change" id="0x0E00">
            <payload_out>
                <item name="state" type="BYTE">
                    <comment>
                        The current call state. Values are:
                        <![CDATA[
                            <br/>
                            <table>
                            <tbody>
                            <tr><th class="topLeft"><b>Value (decimal)</b></th><th class="topLeft"><b>State</b></th></tr>
                            <tr><td>0</td><td>Idle</td></tr>
                            <tr><td>1</td><td>Active</td></tr>
                            <tr><td>2</td><td>Ringing</td></tr>
                            <tr><td>3</td><td>Dialing</td></tr>
                            <tr><td>4</td><td>ActiveAndRinging</td></tr>
                            </tbody>
                            </table>
                        ]]>
                    </comment>
                    <definedValue name="CallStatusIdle"    			value="0x00" />
                    <definedValue name="CallStatusActive"  			value="0x01" />
                    <definedValue name="CallStatusRinging" 			value="0x02" />
                    <definedValue name="CallStatusDialing" 			value="0x03" />
                    <definedValue name="CallStatusActiveAndRinging"	value="0x04" />
                </item>
                <item name="number" type="STRING">
                    <comment>
                        The incoming or dialed number, if available. This will be the empty
                        string if the state is Idle or number is not available.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Event issued by the device when its telephone call status changes. The "Call status"
                setting will always reflect the current call status.
            </comment>
            
        </event>
        
        <event name="Microphone Mute State" id="0x0E01">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the device is muted and false (0) if unmuted.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Microphone mute state of the device.
            </comment>
        </event>

        <event name="Transmit Audio State" id="0x0E03">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the device Tx audio path is on and false (0) if Tx audio path is off.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Transmit (microphone) audio state of the device.
            </comment>
        </event>

        <event name="Receive Audio State" id="0x0E05">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the device Rx audio path is on and false (0) if Rx audio path is off.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Receive (speaker) audio state of the device.
            </comment>
        </event>

        <event name="LED Status Generic" id="0x0E07">
            <payload_in/>
            <payload_out>
                <item name="ID" type="BYTE_ARRAY">
                    <comment>
                        Array of LED IDs.
                    </comment>
                </item>
                <item name="color" type="BYTE_ARRAY">
                    <comment>
                        Array of LED colors.
                    </comment>
                </item>
                <item name="state" type="BYTE_ARRAY">
                    <comment>
                        Array of LED states.
                    </comment>
                </item>
            </payload_out>
            <comment>
				LED status of the device.
            </comment>
        </event>
        
        <event name="Headset Available" id="0x0E09">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the headset is connected and false (0) if the headset is disconnected.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Availability of the headset based on connection state (wireless or wired).
            </comment>
        </event>
		
        <event name="Speaker Volume" id="0x0E0A">
            <payload_in/>
            <payload_out>
                <item name="volumeValueType" type="BYTE">
                    <comment>
                        Identifies the type of volume value returned.
                    </comment>
                </item>
                <item name="volume" type="SHORT">
                    <comment>
                        Varies depending on volume value type.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Speaker volume of the device.
            </comment>
        </event>

        <event name="Y Cable Connection" id="0x0E0B">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        True (1) if the Y-Cable is connected and false (0) if the Y-Cable is disconnected.
                    </comment>
                </item>
            </payload_out>
            <comment>
				Connection state for a Y-Cable.
            </comment>
        </event>
        
        <event name="Current Selected Language Changed" id="0x0E1A">
            <payload_out>
                <item type="SHORT" name="LanguageId">
                    <comment>
                        Current Selected Language
                    </comment>
                </item>
            </payload_out>
            <comment>
                 <![CDATA[
                    Returns the USB LANGID for the device's spoken language.  The full list of LANGID
                    values is <a href="http://www.usb.org/developers/docs/USB_LANGIDs.pdf">here</a>.
                    <p>
                    For example, here are some non-normative values.  Please refer to the standard for the latest correct values:
                    <br><br>
                    <table>
                    <tbody>
                    <tr><th class="topLeft"><b>Language</b></th><th class="topLeft"><b>Value (hexadecimal)</b></th></tr>
                    <tr><td>English (U.S.)</td><td>0x0409</td></tr>
                    <tr><td>English (U.K.)</td><td>0x0809</td></tr>
                    <tr><td>Japanese</td><td>0x0411</td></tr>
                    <tr><td>Portuguese (Brazil)</td><td>0x0416</td></tr>
                    <tr><td>Portuguese (Portugal)</td><td>0x0816</td></tr>
                    <tr><td>French (France)</td><td>0x040c</td></tr>
                    <tr><td>Spanish (Mexico)</td><td>0x080a</td></tr>
                    </tbody>
                    </table>
                    <br>
                    This must be implemented on all devices that feature spoken prompts.
                    ]]>
            </comment>

        </event>
		
        <event name="Audio status" id="0x0E1E">
            <payload_out>
                <item name="codec" type="BYTE">
                    <comment>
                        <![CDATA[
                            <table border=1 cellspacing=0 cellpadding=2>
                            <tr>
                            <td><b>Codec</b></td>
                            <td><b>Constant</b></td>
                            <td><b>Value</b></td>
                            </tr>
                            <tr>
                            <td>None</td>
                            <td><tt>AudioNone</tt>
                            </td>
                            <td>0x00</td>
                            </tr>
                            <tr>
                            <td>CVSD</td>
                            <td><tt>AudioCVSD</tt>
                            </td>
                            <td>0x01</td>
                            </tr>
                            <tr>
                            <td>G.726</td>
                            <td><tt>AudioG726</tt>
                            </td>
                            <td>0x02</td>
                            </tr>
                            <tr>
                            <td>G.722</td>
                            <td><tt>AudioG722</tt>
                            </td>
                            <td>0x03</td>
                            </tr>
                            <tr>
                            <td>mSBC</td>
                            <td><tt>AudioMSBC</tt>
                            </td>
                            <td>0x04</td>
                            </tr>
                            <tr>
                            <td>A2DP</td>
                            <td><tt>AudioA2DPSink</tt>
                            </td>
                            <td>0x05</td>
                            </tr>
                            </table>
                        ]]>
                    </comment>
                    <definedValue name="CodecAudioNone"     value="0x00" />
                    <definedValue name="CodecAudioCVSD"     value="0x01" />
                    <definedValue name="CodecAudioG726"     value="0x02" />
                    <definedValue name="CodecAudioG722"     value="0x03" />
                    <definedValue name="CodecAudioMSBC"     value="0x04" />
                    <definedValue name="CodecAudioA2DPSink" value="0x05" />
                </item>
                <item name="port" type="BYTE">
                    <comment>
                        <![CDATA[
                            The port of the device to which that the audio status relates
                        ]]>
                    </comment>
                </item>
                <item name="speaker gain" type="BYTE">
                    <comment>
                        Speaker gain is in the range 0x0-0xF.
                    </comment>
                </item>
                <item name="mic gain" type="BYTE">
                    <comment>
                        Mic gain is in the range 0x0-0xF. Mic gain == 0x0 means 'muted.'
                    </comment>
                </item>
            </payload_out>
            <comment>
                <![CDATA[
                    This Event reports the current audio status, as in the <a href="#Audio status">
                    Audio status</a> Setting.
                    <p>
                    The recipient device sends it to its initiator(s) whenever its audio status changes.
                    
                    <p>If the codec is CVSD, G.726, G.722, or mSBC, the value of
                    the Speaker Gain field refers to SCO audio volume.  If the codec is A2DP,
                    Speaker Gain holds the A2DP streaming audio volume.  If codec is None, Speaker
                    Gain holds the previously-used SCO audio volume.</p>
                    
                    <p><b>[Implementation note</b>: Some devices use only two
                    values for mic gain: zero, meaning muted, and not-zero, meaning not muted.]</p>
                ]]>
            </comment>
        </event>

        <event name="Headset Call status" id="0x0E22">
            <payload_out>
                <item type="UNSIGNED_SHORT" name="number of devices">
                    <comment>
                        The number of devices in the status
                    </comment>
                </item>

                <item type="BYTE" name="connectionId">
                    <comment>
                        ConnectionId to which the Headset call status refers
                    </comment>
                </item>
                <item name="state" type="BYTE">
                    <comment>
                        The current call state. (same as call state)
                    </comment>
                </item>
                <item name="number" type="STRING">
                    <comment>
                        The incoming or dialed number, if available. This will be the empty
                        string if the state is Idle or number is not available.
                    </comment>
                </item>
            </payload_out>

            <comment>
                This contains the telephone call state of all devices connected to the device.
                The returned payload is repeated for each connected device able to make phone calls
                The device will issue "Headset Call status" event whenever any call of the connected device state changes.
            </comment>
        </event>

    </section>
    
    <section title="General compatibility with Spokes (0x0Fnn)">
        
        <comment>
            <![CDATA[
                The messages in this section are required for compatibility with Spokes.  All are used in
                existing Spokes implementations.
                <br/>
                Many of these messages take or return an <i>interfaceType</i> value, to designate
                the interface to which the message applies.  The legal
                <i>interfaceType</i> values and their meanings are:
                
                <br/>
                <a name="interface types">
                <table>
                <tbody>
                <tr><th class="topLeft"><b>Value (decimal)</b></th><th class="topLeft"><b>Interface</b></th></tr>
                <tr><td>0</td><td>PSTN</td></tr>
                <tr><td>1</td><td>VOIP</td></tr>
                <tr><td>2</td><td>Mobile phone</td></tr>
                </tbody>
                </table>
                
                <p>
                Other messages in this section take or return a volume value.  The legal volume
                values and their meanings are:
                
                <br/>
                <a name="volume values">
                <table>
                <tbody>
                <tr><th class="topLeft"><b>Value (decimal)</b></th><th class="topLeft"><b>Volume</b></th></tr>
                <tr><td>0</td><td>Off</td></tr>
                <tr><td>1</td><td>Low</td></tr>
                <tr><td>2</td><td>Standard</td></tr>
                </tbody>
                </table>
                </a>
                
                <p>
                The time-weighted average-related messages in this section take or return a special loudness
                value.  The legal values and their meanings are:<br/>
                
                <a name="time-weighted average values">
                <table>
                <tbody>
                <tr><th class="topLeft"><b>Value (decimal)</b></th><th class="topLeft"><b>TWA</b></th></tr>
                <tr><td>0</td><td>Off</td></tr>
                <tr><td>1</td><td>85 dB</td></tr>
                <tr><td>2</td><td>80 dB</td></tr>
                </tbody>
                </table>
                </a>
            ]]>
        </comment>
        
        <command name="Set Ringtone" id="0x0F02" associatedSettingId="0x0F02" associatedEventId="0x0F02">
            <payload_in>
                <item name="interfaceType" type="BYTE" identifier="true">
                    <comment>
                        <![CDATA[
                            The <a href="#interface types"> interface</a>
                        ]]>
                    </comment>
                </item>
                <item name="ringTone" type="BYTE">
                    <comment>The ring tone to set, a value in the range [0..2] inclusive.</comment>
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0806
            </throws>
            
            <comment>
                Set the ring tone for a particular interface.
            </comment>
        </command>
        
        <command name="Set Audio Bandwidth" id="0x0F04" associatedSettingId="0x0F04" associatedEventId="0x0F04">
            <payload_in>
                <item name="interfaceType" type="BYTE" identifier="true">
                    <comment>
                        <![CDATA[
                            The<a href="#interface types">interface</a>
                        ]]>
                    </comment>
                </item>
                <item name="bandwidth" type="BYTE">
                    <comment>The bandwidth, either 1 (narrowband) or 2 (wideband).</comment>
                    <definedValue name="BandwidthNarrowband" value="1" />
                    <definedValue name="BandwidthWideband" value="2" />
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0806
            </throws>
            <comment>
                Set the bandwidth (narrowband or wideband) for the given interface.
            </comment>
        </command>
        
        <command name="Set Ringtone Volume" id="0x0F06" associatedSettingId="0x0F06" associatedEventId="0x0F06">
            <payload_in>
                <item name="interfaceType" type="BYTE" identifier="true">
                    <comment>
                        <![CDATA[
                            The <a href="#interface types">interface</a>
                        ]]>
                    </comment>
                </item>
                <item name="volume" type="BYTE">
                    <comment>
                        <![CDATA[
                            The volume, as specified <a href="#volume values"> here</a>.
                        ]]>
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0806
            </throws>
            <comment>
                Set the ring tone volume for the given interface.
            </comment>
        </command>
        
        <command name="Set Default Outbound Interface" id="0x0F08" associatedSettingId="0x0F08" associatedEventId="0x0F08">
            <payload_in>
                <item name="interfaceType" type="BYTE" identifier="true">
                    <comment>
                        <![CDATA[
                            The <a href="#interface types">interface</a>
                        ]]>
                    </comment>
                    <definedValue name="InterfacePstn" value="0" />
                    <definedValue name="InterfaceUsb" value="1" />
                    <definedValue name="InterfaceMobile" value="2" />
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0806
            </throws>
            <comment>
                Set the interface to be the default for subsequent outgoing calls.
            </comment>
        </command>
        
        <command name="Set Tone Control" id="0x0F1A">
            <payload_in> 
		        <item name="interfaceType" type="BYTE" identifier="true">
                    <comment>
                        <![CDATA[
                        The <a href="#interface types">interface, limited to PSTN (0) and VOIP (1)</a>
                        ]]>
                    </comment>
                </item>
                <item name="toneLevel" type="BYTE">
                    <comment>The tone level to set, a value in the range [0..6] inclusive.</comment>
                    <definedValue name="ToneLevelMaxBass" value="0" />
                    <definedValue name="ToneLevelMidBass" value="1" />
                    <definedValue name="ToneLevelMinBass" value="2" />
                    <definedValue name="ToneLevelNoBoost" value="3" />
                    <definedValue name="ToneLevelMinTreble" value="4" />
                    <definedValue name="ToneLevelMidTreble" value="5" />
                    <definedValue name="ToneLevelMaxTreble" value="6" />
                </item>
	    </payload_in>
	    <payload_out/>
            <throws>
                0x0806	  <!-- Number out of range -->
            </throws>
            
            <comment>
                Sets the tone level for a particular interface (PSTN or VOIP).
            </comment>
        </command>
        
        <command name="Set Audio Sensing" id="0x0F1C">
            
            <payload_in>            
	        <item type="BOOLEAN" name="audioSensing">
                    <comment>
                        True if the radio link should automatically be established between the base and wireless headset without needing to press the call control button, false otherwise.
                    </comment>
                </item>            	    
	    </payload_in>
            <payload_out/>
            
            <comment>
                Configure whether the radio link should automatically be established between the base and wireless headset without
                needing to press the call control button.
            </comment>
            
        </command>
        
        <command name="Set Intellistand Auto-Answer" id="0x0F1E">
            
            <payload_in>
                <item type="BOOLEAN" name="intellistand">
                    <comment>
                        True if the incoming calls should be automatically answered when the headset is removed from the charging cradle.   False if the headset call control button or base PC/desk phone talk button must be pressed to answer the incoming call.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            
            <comment>
                Configure whether an incoming call should be answered automatically when the headset is removed from the charging cradle.
            </comment>
            
        </command>
        
        <command name="Set Auto-Connect to Mobile" id="0x0F20">
            
            <payload_in>
                <item type="BOOLEAN" name="autoConnect">
                    <comment>
                        Set to true if the base should automatically establish a Bluetooth link to the mobile phone when the headset is undocked from the base and the mobile phone is within range.   Set to false if it should not automatically establish the link.
                    </comment>
                </item>
	        </payload_in>
            <payload_out/>
           
            <comment>
                Configure whether or not a Bluetooth link to the mobile phone should automatically be established when the headset is undocked and the mobile phone is within range.
            </comment>
            
        </command>
        
        <command name="Set Stop Auto-Connect on Dock" id="0x0F22">
            
            <payload_in>
                <item type="BOOLEAN" name="stopAutoConnect">
                    <comment>
                        Set to true if the Bluetooth connection to the mobile phone should be dropped when the headset is docked, false if the connection should not be dropped. Only applicable if Set Auto-Connect to Mobile is true.
                    </comment>
                </item>

            </payload_in>
            <payload_out/>
            
            <comment>
                Configures whether or not the Bluetooth connection to the mobile phone should be dropped automatically when the headset is docked (only  applicable if Set Auto-Connect to Mobile is true).
            </comment>
            
        </command>
        
        <command name="Set Bluetooth Enabled" id="0x0F24">
            
            <payload_in>
                <item type="BOOLEAN" name="bluetoothEnabled">
                    <comment>
                        Set to true if  Bluetooth should be enabled, false otherwise.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>

            <comment>
                Configures whether or not Bluetooth is enabled.
            </comment>
            
        </command>
        
        <command name="Set Over-the-Air Subscription" id="0x0F26">
            
            <payload_in>
                <item type="BOOLEAN" name="otaEnabled">
                    <comment>
                        Set to true if a headset can subscribe to the base without docking the headset, otherwise set to false.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Configures whether or not a headset can be subscribed to the base without docking the headset.
            </comment>
            
        </command>
        
        <command name="Set System Tone Volume" id="0x0F28">
            <payload_in>
                <item name="volume" type="BYTE">
                    <comment>
                        <![CDATA[
                        The system tone volume, as specified <a href="#volume values"> here</a>
                        ]]>.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0808  <!-- Illegal value -->
            </throws>
            <comment>
                Sets the system tone volume.
            </comment>
        </command>
        
        <command name="Set Power Level" id="0x0F2A">
            <payload_in>
                <item name="powerLevel" type="BYTE">
                    <comment>
                        Sets the power level (range), a value in the range [0..2] inclusive:
                        Low - up to 50 feet
                        Medium - up to 150 feet
                        High - up to 300 feet
                    </comment>
                    <definedValue name="powerLevelFixedLow" value="0"/>
                    <definedValue name="powerLevelAdaptiveMedium" value="1"/>
                    <definedValue name="powerLevelAdaptiveHigh" value="2"/>
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0808    <!-- Illegal value -->
            </throws>
            <comment>
                Configures the power level which, if minimized, can improve user density, help with deskphone/PC buzzing, or restrict the range of a user.
            </comment>
        </command>
        
        <command name="Set Mobile Voice Commands" id="0x0F2C">
            <payload_in>
                <item type="BOOLEAN" name="mobileVoiceCommands">
                    <comment>
                        Sets whether or not you can put a paired mobile phone in voice command mode by pressing the mobile phone button on the base.  If true, pressing the mobile phone button on the base will enable voice commands on the mobile phone.  If false, voice commands on the mobile phone will not be enabled when you press the base mobile phone button.
                        
                        
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
           
            <comment>
                Configures the ability to put a paired mobile phone in voice command mode via the mobile phone button on the base.
            </comment>
            
        </command>

        <command name="Set Volume Control Orientation" id="0x0F2E" associatedSettingId="0x0F2E" associatedEventId="0x0F2E">
            <payload_in>
                <item name="orientation" type="BYTE">
                    <comment>
                        Numeric value to set the volume control orientation to the right ear (0) or left ear (1).
                    </comment>
                    <definedValue name="right" value="0" />
                    <definedValue name="left" value="1" />
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0806
            </throws>
            <comment>
                Sets the volume control orientation to the right or left ear.
            </comment>
        </command>
		
		<command name="Set default feature" id="0x0F13">
            
            <payload_in/>
            <payload_out/>
            <comment>	
                sets the default values to certain features.Features that are already locked are ignored.
            </comment>
	    </command> 
        
		
        <setting name="Device interfaces" id="0x0F00">
            <payload_in/>
            <payload_out>
                <item name="interfacesAndRingTones" type="BYTE_ARRAY">
                    <comment>
                        <![CDATA[
                            A byte array containing the <a href="#interface types"> interface
                            types</a> this device features.  The values are returned
                            in no particular order.
                            <p>
                            For example, a device that features mobile phone and VoIP interfaces can return a
                            byte array containing <tt>[0 (PSTN), 2 (Mobile phone)]</tt>
                            or <tt>[2 (Mobile phone), 0 (PSTN)]</tt>; either order
                            is acceptable.
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
                Returns a byte array containing the interface types for every interface the device includes.
            </comment>
        </setting>
        
        <setting name="Ringtones" id="0x0F02">
            <payload_in/>
            <payload_out>
                <item name="ringTones" type="BYTE_ARRAY">
                    <comment>
                        <![CDATA[
                            A byte array containing the ring tones for each interface.  Even devices that
                            omit a particular interface will return a ring tone value for it; the value is undefined.
                            (We provide other means for discovering what interfaces a device includes.)
                            <p>
                            The elements are provided in this order:
                            <p>
                            PSTN, VOIP, Mobile
                        ]]>
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Return the ring tone for all three interface types.
            </comment>
        </setting>
        
        <setting name="Bandwidths" id="0x0F04">
            <payload_in/>
            <payload_out>
                <item name="bandwidths" type="BYTE_ARRAY">
                    <comment>
                        <![CDATA[
                            A byte array containing the bandwidth for each interface.  Even devices that
                            omit a particular interface will return a bandwidth value for it; the value is
                            undefined.  (We provide other means for discovering what interfaces a device includes.)
                            <p>
                            The elements are provided in this order:
                            <p>
                            PSTN, VOIP, Mobile
                        ]]>
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Return the bandwidth for all three interface types.
            </comment>
        </setting>
        
        <setting name="Ringtone volumes" id="0x0F06">
            <payload_in/>
            <payload_out>
                <item name="volumes" type="BYTE_ARRAY">
                    <comment>
                        <![CDATA[
                            A byte array containing the volume for each interface.  Even devices that
                            omit a particular interface will return a volume value for it; the value is
                            undefined.  (We provide other means for discovering what interfaces a device includes.)
                            <p>
                            The values are provided in this order:
                            <p>
                            PSTN, VOIP, Mobile
                        ]]>
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Return the volume for all three interface types.
            </comment>
        </setting>
        
        <setting name="Default Outbound Interface" id="0x0F08">
            <payload_in/>
            <payload_out>
                <item name="interfaceType" type="BYTE">
                    <comment>
                        <![CDATA[
                            The <a href="#interface types">interface</a>
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
                Indicates the current default outbound interface.
            </comment>
        </setting>
        
        <setting name="Tone Controls" id="0x0F1A">
            <payload_in/>

            <payload_out>
                <item name="toneLevels" type="BYTE_ARRAY">
                    <comment>
                        A byte array containing the tone levels for each supported interface (currently PSTN, VOIP).
                        <![CDATA[<p>]]>
                        The elements are provided in this order:
                        <![CDATA[<p>]]>
                        PSTN, VOIP
                    </comment>
                </item>
	    </payload_out>
            
            <comment>
                Returns the tone levels for PSTN and VOIP interface types.
            </comment>
        </setting>
        
        <setting name="Audio Sensing" id="0x0F1C">
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="audioSensing">
                    <comment>
                        Returns true if the radio link between the base and wireless headset will be established without having to press the call control button, otherwise returns false.
                        
                    </comment>
                </item>
	    
            </payload_out>
            
            <comment>
                Indicates whether or not the radio link will be automatically established without having to press the call control button.
            </comment>
            
        </setting>
        
        <setting name="Intellistand Auto-Answer" id="0x0F1E">
            
            <payload_in/>
            <payload_out>
                <item type="BOOLEAN" name="intellistand">
                    <comment>
                        True if  incoming calls should be automatically answered when the headset is removed from the charging cradle, false if not.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Indicates whether incoming calls should be answered automatically when the headset is removed from the charging cradle.
            </comment>
            
        </setting>
        
        <setting name="Auto-Connect to Mobile" id="0x0F20">
            <payload_in/>

            <payload_out>
                <item type="BOOLEAN" name="autoConnect">
                    <comment>
                        Returns true if the Bluetooth link to the mobile phone is automatically established when the headset is undocked and the mobile phone is within range, otherwise returns false.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Indicates whether or not the base automatically establishes a Bluetooth link to the mobile phone when the headset is undocked from the base and the mobile phone is within range.
            </comment>
        </setting>
        
        <setting name="Stop Auto-Connect on Dock" id="0x0F22">
            <payload_in/>


            <payload_out>
                <item type="BOOLEAN" name="stopAutoConnect">
                    <comment>
                        Returns true if the Bluetooth connection to the mobile phone will be dropped when the headset is docked, otherwise returns false.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Indicates whether or not the Bluetooth connection to the mobile phone should be dropped when the headset is docked.   Only applicable if Set Auto-Connect to Mobile is true.
            </comment>
            
        </setting>
        
        <setting name="Bluetooth Enabled" id="0x0F24">
            <payload_in/>

            <payload_out>
                <item type="BOOLEAN" name="bluetoothEnabled">
                    <comment>
                        True if Bluetooth is enabled, false otherwise.
                    </comment>
                </item>

            </payload_out>
            <comment>
                Indicates whether or not Bluetooth is enabled.
            </comment>
        </setting>
        
        <setting name="Over-the-Air Subscription" id="0x0F26">
            <payload_in/>

            <payload_out>
                <item type="BOOLEAN" name="otaEnabled">
                    <comment>
                        Returns true if a headset can subscribe to the base without docking, false otherwise.
                    </comment>
                </item>
	    </payload_out>
            <comment>
                Indicates whether or not the headset can subscribe to the base if it is not docked.
            </comment>
        </setting>
        
        <setting name="System Tone Volume" id="0x0F28">
            <payload_in/>
            <payload_out>
                <item name="volume" type="BYTE">
                    <comment>
                        <![CDATA[
                        Return the system tone volume, as specified <a href="#volume values">here</a>.
                        ]]>
                    </comment>
                </item>
	    </payload_out>
            
            <comment>
                Indicates the system tone volume.
            </comment>
        </setting>
        
        <setting name="Power Level" id="0x0F2A">
            <payload_in/>
            <payload_out>
                <item name="powerLevel" type="BYTE">
                    <comment>
                        Returns the current power level (range).
                    </comment>
                </item>
            </payload_out>
            <comment>
                Indicates the current power level.
            </comment>
        </setting>
        
        <setting name="Mobile Voice Commands" id="0x0F2C">
            <payload_in/>

            <payload_out>
                <item type="BOOLEAN" name="mobileVoiceCommands">
                    <comment>
                        Returns true if the base mobile phone button can be used to enable/disable voice commands on the mobile phone, otherwise returns false.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Indicates whether or not the mobile phone can be put in voice command mode via the mobile phone button on the base.
            </comment>
        </setting>
        
        <setting name="Volume Control Orientation" id="0x0F2E">
            <payload_in/>
            <payload_out>
                <item name="orientation" type="BYTE">
                    <comment>
                        The current volume control orientation - right ear (0) or left ear (1).
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Indicates if the current volume control orientation is the right or left ear.
            </comment>
        </setting>
        
		
        <event name="Set Ringtone" id="0x0F02" >
            <payload_out>
                <item name="interfaceType" type="BYTE">
                    <comment>The interface type</comment>
                </item>
                <item name="ringTone" type="BYTE">
                    <comment>The ring tone.</comment>
                </item>
            </payload_out>
            <comment>
                Notification that the ring tone for a particular interface has been updated.
            </comment>
        </event>
        
        <event name="Set Audio Bandwidth" id="0x0F04">
            <payload_out>
                <item name="interfaceType" type="BYTE">
                    <comment>The interface</comment>
                </item>
                <item name="bandwidth" type="BYTE">
                    <comment>The bandwidth, either 1 (narrowband) or 2 (wideband).</comment>
                </item>
            </payload_out>
            <comment>
                Indicates that the bandwidth narrowband or wideband) has changed for the given interface.
            </comment>
        </event>
        
        <event name="Set Ringtone Volume" id="0x0F06">
            <payload_out>
                <item name="interfaceType" type="BYTE">
                    <comment>The interface</comment>
                </item>
                <item name="volume" type="BYTE">
                    <comment>The ringtone volume.</comment>
                </item>
            </payload_out>
            <comment>
                Notification that the ring tone volume for the given interface has been updated.
            </comment>
        </event>
        
        <event name="Set Default Outbound Interface" id="0x0F08">
            <payload_out>
                <item name="interfaceType" type="BYTE">
                    <comment>The interface</comment>
                </item>
            </payload_out>
            <comment>
                Notification that the default interface for subsequent outgoing calls has been changed.
            </comment>
        </event>
        
        <event name="Set Volume Control Orientation" id="0x0F2E">
            <payload_in/>
            <payload_out>
                <item name="orientation" type="BYTE">
                    <comment>
                        The updated volume control orientation (right ear = 0, left ear = 1).
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the current volume control orientation has changed.
            </comment>
        </event>
        
    </section>
    
    <section title="DSP-related Spokes compatibility (0x0Fnn continued)">
        
        <command name="AAL Acoustic Incident Reporting Enable" id="0x0F01" associatedSettingId="0x0F01" associatedEventId="0x0F01">
            <payload_in>
                <item name="enable" type="BOOLEAN">
                    <comment>The acoustic incident reporting enable state: true or false.</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set AAL acoustic incident reporting to be enabled or disabled, true or false.
            </comment>
        </command>
        
        <command name="AAL Acoustic Incident Reporting Thresholds" id="0x0F03" associatedSettingId="0x0F03" associatedEventId="0x0F03">
            <payload_in>
                <item name="gain threshold" type="BYTE">
                    <comment>The acoustic incident reporting threshold for gain upon which crossed for a set amount of time will result in a report being sent (0 to 12 dB in 1 dB increments).</comment>
                </item>
                <item name="time threshold" type="UNSIGNED_SHORT">
                    <comment>The acoustic incident reporting threshold for the amount of time (in milliseconds) of having a gain above the gain threshold will result in a report being sent (1 to 1000 ms in 1 ms increments).</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set AAL acoustic incident reporting thresholds.
            </comment>
        </command>
        
        <command name="AAL Acoustic Incident Report" id="0x0F05" associatedSettingId="0x0F05" associatedEventId="0x0F05">
            <payload_in/>
            <payload_out/>
            <comment>
                PLACEHOLDER: This command ID is reserved as the command is not supported but no other command shall use the associated ID per policy.
            </comment>
        </command>
        
        <command name="AAL TWA Reporting Enable" id="0x0F07" associatedSettingId="0x0F07" associatedEventId="0x0F07">
            <payload_in>
                <item name="enable" type="BOOLEAN">
                    <comment>The TWA reporting enable state: true or false.</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set AAL TWA reporting to be enabled or disabled, true or false.
            </comment>
        </command>
        
        <command name="AAL TWA Reporting Time Period" id="0x0F09" associatedSettingId="0x0F09" associatedEventId="0x0F09">
            <payload_in>
                <item name="time period" type="UNSIGNED_INT">
                    <comment>The time period interval (in milliseconds) at which a TWA report is sent out (1 to 10 minutes in 60,000 ms increments).</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set AAL TWA reporting time period interval.
            </comment>
        </command>
        
        <command name="Set Anti-startle" id="0x0F0A" associatedSettingId="0x0F0A" associatedEventId="0x0F0A">
            <payload_in>
        
                <item name="enable" type="BOOLEAN">
                    <comment>The new anti-startle value: true or false.</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set the new anti-startle value, true or false.
            </comment>
        </command>
        
        <command name="AAL TWA Report" id="0x0F0B" associatedSettingId="0x0F0B" associatedEventId="0x0F0B">
            <payload_in/>
            <payload_out/>
            <comment>
                PLACEHOLDER: This command ID is reserved as the command is not supported but no other command shall use the associated ID per policy.
            </comment>
        </command>
        
        <command name="Set G616" id="0x0F0C" associatedSettingId="0x0F0C" associatedEventId="0x0F0C">
            <payload_in>
                <item name="enable" type="BOOLEAN">
                    <comment>The new G.616 value, true or false.</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set the new G.616 value, true or false.
            </comment>
        </command>
        
        <command name="Conversation Dynamics Reporting Enable" id="0x0F0D" associatedSettingId="0x0F0D" associatedEventId="0x0F0D">
            <payload_in>
                <item name="enable" type="BOOLEAN">
                    <comment>The conversation dynamics reporting enable state: true or false.</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set conversation dynamics reporting to be enabled or disabled, true or false.
            </comment>
        </command>
        
        <command name="Set time-weighted average" id="0x0F0E" associatedSettingId="0x0F0E" associatedEventId="0x0F0E">
            <payload_in>
                <item name="twa" type="BYTE">
                    <comment>
                        <![CDATA[
                            The new <a href="#time-weighted average values">time-weighted
                            average value.</a>
                        ]]>
                    </comment>
                    <definedValue name="TwaOff" value="0" />
                    <definedValue name="Twa85dB" value="1" />
                    <definedValue name="Twa80dB" value="2" />
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0806
            </throws>
            <comment>
                Set the new time-weighted average value.
            </comment>
        </command>
        
        <command name="Conversation Dynamics Reporting Time Period" id="0x0F0F" associatedSettingId="0x0F0F" associatedEventId="0x0F0F">
            <payload_in>
                <item name="time period" type="UNSIGNED_INT">
                    <comment>The time period interval (in milliseconds) at which a conversation dynamics report is sent out (1 to 60 seconds in 1,000 ms increments).</comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set conversation dynamics reporting time period interval.
            </comment>
        </command>

        <command name="Set time-weighted average period" id="0x0F10" associatedSettingId="0x0F10" associatedEventId="0x0F10">
            <payload_in>
                <item name="twa" type="BYTE">
                    <comment>
                        <![CDATA[
                            The new time-weighted average period value.  Legal values are<br/>
                            <a name="time-weighted average period values">
                            <table>
                            <tbody>
                            <tr><th class="topLeft"><b>Value (decimal)</b></th><th class="topLeft"><b>TWA Period</b></th></tr>
                            <tr><td>0</td><td>Off</td></tr>
                            <tr><td>1</td><td>2 hours</td></tr>
                            <tr><td>2</td><td>4 hours</td></tr>
                            <tr><td>3</td><td>6 hours</td></tr>
                            <tr><td>4</td><td>8 hours</td></tr>
                            </tbody>
                            </table>
                            </a>
                            The command will throw an exception if another value is supplied.
                        ]]>
                    </comment>
                    <definedValue name="TwaPeriod2hours" value="1" />
                    <definedValue name="TwaPeriod4hours" value="2" />
                    <definedValue name="TwaPeriod6hours" value="3" />
                    <definedValue name="TwaPeriod8hours" value="4" />
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0808
            </throws>
            <comment>
                Set the new time-weighted average period value.
            </comment>
        </command>
        
        <command name="Conversation Dynamics Report" id="0x0F11" associatedSettingId="0x0F11" associatedEventId="0x0F11">
            <payload_in/>
            <payload_out/>
            <comment>
                PLACEHOLDER: This command ID is reserved as the command is not supported but no other command shall use the associated ID per policy.
            </comment>
        </command>
        
        <command name="Bluetooth DSP Send Message" id="0x0F30">
            <payload_in>
                <item name="message_id" type="SHORT">
                    <comment>
                        Message ID to send to DSP
                    </comment>
                </item>
                <item name="parameter_a" type="SHORT">
                    <comment>
                        First parameter for DSP message
                    </comment>
                </item>
                <item name="parameter_b" type="SHORT">
                    <comment>
                        Second parameter for DSP message
                    </comment>
                </item>
                <item name="parameter_c" type="SHORT">
                    <comment>
                        Third parameter for DSP message
                    </comment>
                </item>
                <item name="parameter_d" type="SHORT">
                    <comment>
                        Fourth parameter for DSP message
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Send a message to the DSP
            </comment>
        </command>
        
        <command name="Bluetooth DSP Send Message Long" id="0x0F32">
            <payload_in>
                <item name="message_id" type="SHORT">
                    <comment>
                        Message ID from DSP
                    </comment>
                </item>
                <item name="parameter" type="BYTE_ARRAY">
                    <comment>
                        Byte array with DSP parameters
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Send a message long to the DSP
            </comment>
        </command>
        
        <command name="Bluetooth DSP Load" id="0x0F34" associatedEventId="0x0F34" streamingId="0x0F30">
            <payload_in>
                <item name="load" type="BOOLEAN" enabler="true">
                    <comment>
                        TRUE to load and start the DSP code
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                If TRUE load and start the DSP code
            </comment>
        </command>
        
        <command name="Set DSP Parameters" id="0x0F42">
            <payload_in>
                <item name="codec" type="BYTE">
                    <comment>
                        <![CDATA[
                            CVSD     0x01<br/>
                            G726     0x02<br/>
                            G722     0x03<br/>
                            MSBC     0x04<br/>
                            A2DPSink 0x05<br/>
                        ]]>
                    </comment>
                </item>
                <item name="store is volatile" type="BOOLEAN">
                    <comment>
                        this is for the DSP to say how it is stored - not the vm ---------------
                        FALSE = store in Non-Volatile storage        ---- set pskey value to payload
                        TRUE = store in Volatile storage          ------ send message to dsp
                    </comment>
                </item>
                <item name="Parameter index" type="SHORT">
                    <comment>
                        Zero based index into KAT
                    </comment>
                </item>
                <item name="Payload" type="SHORT_ARRAY">
                    <comment>
                        DSP payload data
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set DSP parameters, either in persistent or volatile storage.
            </comment>
        </command>

        <command name="DSP Update Parameters" id="0x0F44">
            <payload_in>
                <item name="codec" type="BYTE">
                    <comment>
                        <![CDATA[
                            CVSD     0x01<br/>
                            G726     0x02<br/>
                            G722     0x03<br/>
                            MSBC     0x04<br/>
                            A2DPSink 0x05<br/>
                        ]]>
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Update DSP for given type
            </comment>
        </command>
        
		
        <setting name="AAL Acoustic Incident Reporting Enable" id="0x0F01" associatedEventId="0x0F01">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>The acoustic incident reporting enable state: true or false.</comment>
                </item>
            </payload_out>
            <comment>
                Get AAL acoustic incident reporting to be enabled or disabled, true or false.
            </comment>
        </setting>
        
        <setting name="AAL Acoustic Incident Reporting Thresholds" id="0x0F03" associatedEventId="0x0F03">
            <payload_in/>
            <payload_out>
                <item name="gain threshold" type="BYTE">
                    <comment>The acoustic incident reporting threshold for gain (in dB) upon which crossed for a set amount of time will result in a report being sent (0 to 12 dB in 1 dB increments).</comment>
                </item>
                <item name="time threshold" type="UNSIGNED_SHORT">
                    <comment>The acoustic incident reporting threshold for the amount of time (in milliseconds) of having a gain above the gain threshold will result in a report being sent (1 to 1000 ms in 1 ms increments).</comment>
                </item>
            </payload_out>
            <comment>
                Get AAL acoustic incident reporting thresholds.
            </comment>
        </setting>
        
        <setting name="AAL Acoustic Incident Report" id="0x0F05" associatedEventId="0x0F05">
            <payload_in/>
            <payload_out/>
            <comment>
                PLACEHOLDER: This setting ID is reserved as the setting is not supported but no other setting shall use the associated ID per policy.
            </comment>
        </setting>
        
        <setting name="AAL TWA Reporting Enable" id="0x0F07" associatedEventId="0x0F07">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>The TWA reporting enable state: true or false.</comment>
                </item>
            </payload_out>
            <comment>
                Get AAL TWA reporting to be enabled or disabled, true or false.
            </comment>
        </setting>
        
        <setting name="AAL TWA Reporting Time Period" id="0x0F09" associatedEventId="0x0F09">
            <payload_in/>
            <payload_out>
                <item name="time period" type="UNSIGNED_INT">
                    <comment>The time period interval (in milliseconds) at which a TWA report is sent out (1 to 10 minutes in 60,000 ms increments).</comment>
                </item>
            </payload_out>
            <comment>
                Get AAL TWA reporting time period interval.
            </comment>
        </setting>
        
        <setting name="Anti-startle" id="0x0F0A">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>The current anti-startle value, true or false.</comment>
                </item>
            </payload_out>
        
            <comment>
                Return the current anti-startle value.
            </comment>
        </setting>
        
        <setting name="AAL TWA Report" id="0x0F0B" associatedEventId="0x0F0B">
            <payload_in/>
            <payload_out/>
            <comment>
                PLACEHOLDER: This setting ID is reserved as the setting is not supported but no other setting shall use the associated ID per policy.
            </comment>
        </setting>
        
        <setting name="G616" id="0x0F0C">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>The current G.616 value, true or false.</comment>
                </item>
            </payload_out>
            
            <comment>
                Return the current G.616 value.
            </comment>
        </setting>
        
        <setting name="Conversation Dynamics Reporting Enable" id="0x0F0D" associatedEventId="0x0F0D">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>The conversation dynamics reporting enable state: true or false.</comment>
                </item>
            </payload_out>
            <comment>
                Get conversation dynamics reporting to be enabled or disabled, true or false.
            </comment>
        </setting>
        
        <setting name="Time-weighted average" id="0x0F0E">
            <payload_in/>
            <payload_out>
                <item name="twa" type="BYTE">
                    <comment>
                        <![CDATA[
                            The current <a href="#time-weighted average values">time-weighted
                            average value.</a>
                        ]]>
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Return the current time-weighted average value.
            </comment>
        </setting>
        
        <setting name="Conversation Dynamics Reporting Time Period" id="0x0F0F" associatedEventId="0x0F0F">
            <payload_in/>
            <payload_out>
                <item name="time period" type="UNSIGNED_INT">
                    <comment>The time period interval (in milliseconds) at which a conversation dynamics report is sent out (1 to 60 seconds in 1,000 ms increments).</comment>
                </item>
            </payload_out>
            <comment>
                Get conversation dynamics reporting time period interval.
            </comment>
        </setting>

        <setting name="Time-weighted average period" id="0x0F10">
            <payload_in/>
            <payload_out>
                <item name="twa" type="BYTE">
                    <comment>
                        <![CDATA[
                            The current <a href="#time-weighted average period values">time-weighted
                            average period value.</a>
                        ]]>
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Return the current time-weighted average period value.
            </comment>
        </setting>
        
        <setting name="Conversation Dynamics Report" id="0x0F11" associatedEventId="0x0F11">
            <payload_in/>
            <payload_out/>
            <comment>
                PLACEHOLDER: This setting ID is reserved as the setting is not supported but no other setting shall use the associated ID per policy.
            </comment>
        </setting>
        
        <setting name="Get Supported DSP capabilities" id="0x0F40">
            <payload_in/>
            <payload_out>
                <item name="Supported and Active" type="SHORT_ARRAY">
                    <comment>
                        <![CDATA[
                            An array consisting of pairs of bytes for each supported DSP
                            The first contains the DSP type the second returned as zero if DSP is inactive
                            and non-zero to indicate that it is active.
                            
                            CVSD     0x01<br/>
                            G726     0x02<br/>
                            G722     0x03<br/>
                            MSBC     0x04<br/>
                            A2DPSink 0x05<br/>
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
                Returns a list of supported DSP capabilities
            </comment>
        </setting>
        
        <setting name="Get DSP Parameters" id="0x0F42">
            <payload_in>
                <item name="codec" type="BYTE">
                    <comment>
                        <![CDATA[
                            CVSD     0x01<br/>
                            G726     0x02<br/>
                            G722     0x03<br/>
                            MSBC     0x04<br/>
                            A2DPSink 0x05<br/>
                        ]]>
                    </comment>
                </item>
                <item name="store is volatile" type="BOOLEAN">
                    <comment>
                        this is for the DSP to say how it is stored - not the vm ---------------
                        FALSE = read from PSKEY
                        TRUE = read from  DSP RAM  --------- optional may not be able to support this may ask dsp for current value
                        returns error on true if not supported
                    </comment>
                </item>
                <item name="Parameter index" type="SHORT">
                    <comment>
                        Zero based index into KAT
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="codec" type="BYTE">
                    <comment>
                        <![CDATA[
                            CVSD     0x01<br/>
                            G726     0x02<br/>
                            G722     0x03<br/>
                            MSBC     0x04<br/>
                            A2DPSink 0x05<br/>
                        ]]>
                    </comment>
                </item>
                <item name="store is volatile" type="BOOLEAN">
                    <comment>
                        this is for the DSP to say how it is stored - not the vm ---------------
                        FALSE = read from PSKEY
                        TRUE  = read from  DSP RAM
                    </comment>
                </item>
                <item name="Parameter index" type="SHORT">
                    <comment>
                        Zero based index into KAT
                    </comment>
                </item>
                <item name="Payload" type="SHORT_ARRAY">
                    <comment>
                        DSP payload data
                    </comment>
                </item>
            </payload_out>
            <comment>
                Get DSP parameters either from persistent or volatile storage.
            </comment>
        </setting>

		
        <event name="AAL Acoustic Incident Reporting Enable" id="0x0F01">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>The acoustic incident reporting enable state: true or false.</comment>
                </item>
            </payload_out>
            <comment>
                Notification of change for AAL acoustic incident reporting to be enabled or disabled, true or false.
            </comment>
        </event>
        
        <event name="AAL Acoustic Incident Reporting Thresholds" id="0x0F03">
            <payload_in/>
            <payload_out>
                <item name="gain threshold" type="BYTE">
                    <comment>The acoustic incident reporting threshold for gain (in dB) upon which crossed for a set amount of time will result in a report being sent (0 to 12 dB in 1 dB increments).</comment>
                </item>
                <item name="time threshold" type="UNSIGNED_SHORT">
                    <comment>The acoustic incident reporting threshold for the amount of time (in milliseconds) of having a gain above the gain threshold will result in a report being sent (1 to 1000 ms in 1 ms increments).</comment>
                </item>
            </payload_out>
            <comment>
                Notification of change for AAL acoustic incident reporting thresholds.
            </comment>
        </event>
        
        <event name="AAL Acoustic Incident Report" id="0x0F05">
            <payload_in/>
            <payload_out>
                <item name="IncidentType" type="BYTE">
                    <comment>The type of AAL fast SPL limiter provided in response to the acoustic incident.</comment>
					<definedValue name="G616"    				value="0x00"/>
					<definedValue name="AntiStartleLevel"    	value="0x01"/>
					<definedValue name="AntiStartleDuration"	value="0x02"/>
					<definedValue name="AntiStartleDelta"    	value="0x03"/>
                </item>
                <item name="incident duration" type="UNSIGNED_INT">
                    <comment>The time duration (in milliseconds) of the incident (1 to 300,000 ms in 1 ms increments).</comment>
                </item>
                <item name="pre limiter spl estimate" type="BYTE">
                    <comment>The estimate of the highest SPL (in dB) to which the user would have been exposed had the SPL limiter not been enabled (0 to 200 dB in 1 dB increments).</comment>
                </item>
                <item name="gain reduction" type="BYTE">
                    <comment>The peak total gain reduction (in dB) applied by all fast SPL limiters during the acoustic event (0 to 50 dB in 1 dB increments).</comment>
                </item>
            </payload_out>
            <comment>
                Notification of an AAL acoustic incident containing incident data, sent when reporting is enabled.
            </comment>
        </event>
        
        <event name="AAL TWA Reporting Enable" id="0x0F07">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>The TWA reporting enable state: true or false.</comment>
                </item>
            </payload_out>
            <comment>
                Notification of change for AAL TWA reporting to be enabled or disabled, true or false.
            </comment>
        </event>
        
        <event name="AAL TWA Reporting Time Period" id="0x0F09">
            <payload_in/>
            <payload_out>
                <item name="time period" type="UNSIGNED_INT">
                    <comment>The time period interval (in milliseconds) at which a TWA report is sent out (1 to 10 minutes in 60,000 ms increments).</comment>
                </item>
            </payload_out>
            <comment>
                Notification of change for AAL TWA reporting time period interval.
            </comment>
        </event>
        
        <event name="AAL TWA Report" id="0x0F0B">
            <payload_in/>
            <payload_out>
                <item name="pre limiter long term spl estimate" type="BYTE">
                    <comment>The estimate of the current long term average SPL (in dB) to which the user would be exposed if the SPL limiter were not enabled (0 to 200 dB in 1 dB increments).</comment>
                </item>
                <item name="post limiter long term spl estimate" type="BYTE">
                    <comment>The estimate of the long term average SPL (in dB) to which the user is exposed with the SPL limiter enabled (0 to 200 dB in 1 dB increments).</comment>
                </item>
            </payload_out>
            <comment>
                AAL TWA report containing TWA data, sent when reporting is enabled.
            </comment>
        </event>
        
        <event name="Conversation Dynamics Reporting Enable" id="0x0F0D">
            <payload_in/>
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>The conversation dynamics reporting enable state: true or false.</comment>
                </item>
            </payload_out>
            <comment>
                Notification of change for conversation dynamics reporting to be enabled or disabled, true or false.
            </comment>
        </event>
        
        <event name="Conversation Dynamics Reporting Time Period" id="0x0F0F">
            <payload_in/>
            <payload_out>
                <item name="time period" type="UNSIGNED_INT">
                    <comment>The time period interval (in milliseconds) at which a conversation dynamics report is sent out (1 to 60 seconds in 1,000 ms increments).</comment>
                </item>
            </payload_out>
            <comment>
                Notification of change for conversation dynamics reporting time period interval.
            </comment>
        </event>
        
        <event name="Conversation Dynamics Report" id="0x0F11">
            <payload_in/>
            <payload_out>
                <item name="time period" type="UNSIGNED_SHORT">
                    <comment>The time period interval (in milliseconds) in effect when the conversation dynamics report was sent out (1 to 60 seconds in 1 ms increments).</comment>
                </item>
                <item name="far end duration" type="UNSIGNED_SHORT">
                    <comment>The duration (in milliseconds) in which the far end conversation participant was speaking since the last report was sent (1 to 60 seconds in 1 ms increments).</comment>
                </item>
                <item name="near end duration" type="UNSIGNED_SHORT">
                    <comment>The duration (in milliseconds) in which the near end conversation participant was speaking since the last report was sent (1 to 60 seconds in 1 ms increments).</comment>
                </item>
                <item name="crosstalk duration" type="UNSIGNED_SHORT">
                    <comment>The duration (in milliseconds) in which both the far and near end conversation participants were speaking since the last report was sent (1 to 60 seconds in 1 ms increments).</comment>
                </item>
                <item name="no talk duration" type="UNSIGNED_SHORT">
                    <comment>The duration (in milliseconds) in which neither the far or near end conversation participants were speaking since the last report was sent (1 to 60 seconds in 1 ms increments).</comment>
                </item>
            </payload_out>
            <comment>
                Conversation dynamics report containing conversation dynamics data, sent when reporting is enabled.
            </comment>
        </event>
        
        <event name="Set Anti-startle" id="0x0F0A">
            <payload_out>
                
                <item name="enable" type="BOOLEAN">
                    <comment>The  anti-startle value: true or false.</comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the anti-startle value has been updated.
            </comment>
        </event>
        
        <event name="Set G616" id="0x0F0C">
            <payload_out>
                <item name="enable" type="BOOLEAN">
                    <comment>The G.616 value, true or false.</comment>
                </item>
            </payload_out>
            
            <comment>
                Notification that the G.616 value has been updated.
            </comment>
        </event>
        
        <event name="Set time-weighted average" id="0x0F0E">
            <payload_out>
                <item name="twa" type="BYTE">
                    <comment>
                        The time weighted average
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the time-weighted average value has been updated.
            </comment>
        </event>
        
        <event name="Set time-weighted average period" id="0x0F10">
            <payload_out>
                <item name="twa" type="BYTE">
                    <comment>
                        The time-weighted average period value.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that the time-weighted average period value has been updated.
            </comment>
        </event>
        
        <event name="Bluetooth DSP Status Changed" id="0x0F30">
            <payload_out>
                <item name="message_id" type="SHORT">
                    <comment>
                        Message ID from DSP
                    </comment>
                </item>
                <item name="parameter_a" type="SHORT">
                    <comment>
                        First parameter from DSP
                    </comment>
                </item>
                <item name="parameter_b" type="SHORT">
                    <comment>
                        Second parameter from DSP
                    </comment>
                </item>
                <item name="parameter_c" type="SHORT">
                    <comment>
                        Third parameter from DSP
                    </comment>
                </item>
                <item name="parameter_d" type="SHORT">
                    <comment>
                        Fourth parameter from DSP
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that Bluetooth DSP has issued a message.
            </comment>
        </event>
        
        <event name="Bluetooth DSP Status Changed Long" id="0x0F32">
            <payload_out>
                <item name="keyAddr" type="SHORT">
                    <comment>
                    </comment>
                </item>
                <item name="key parameter" type="SHORT_ARRAY">
                    <comment>
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </event>
        
        <event name="Bluetooth DSP Load Changed" id="0x0F34">
            <payload_out>
                <item name="load" type="BOOLEAN">
                    <comment>
                        TRUE indicates that the DSP code has loaded
                    </comment>
                </item>
            </payload_out>
            <comment>
                Event which is issued on when DSP code is loaded or unloaded.
            </comment>
        </event>
        
        <event name="DSP Parameters" id="0x0F42">
            <payload_out>
                <item name="codec" type="BYTE">
                    <comment>
                        <![CDATA[
                            CVSD     0x01<br/>
                            G726     0x02<br/>
                            G722     0x03<br/>
                            MSBC     0x04<br/>
                            A2DPSink 0x05<br/>
                        ]]>
                    </comment>
                </item>
                <item name="store is volatile" type="BOOLEAN">
                    <comment>
                        this is for the DSP to say how it is stored - not the vm ---------------
                        FALSE = read from PSKEY
                        TRUE  = read from  DSP RAM
                    </comment>
                </item>
                <item name="Parameter index" type="SHORT">
                    <comment>
                        Zero based index into KAT
                    </comment>
                </item>
                <item name="Payload" type="SHORT_ARRAY">
                    <comment>
                        DSP payload data
                    </comment>
                </item>
            </payload_out>
            <comment>
                Get DSP parameters either from persistent or volatile storage.
            </comment>
        </event>

    </section>
    
    <section title="Security-related Spokes compatibility (0x0Fnn continued)">
        
        <comment>
            <![CDATA[
                The security features described in this section are purely advisory, primarily intended to
                allow administrators to "lock" headset features to prevent inadvertent change.
                <b>All enforcement is done in the client (initiator).</b>  This is
                an important point: a malicious or buggy app can still cause the device to
                perform "locked" commands.<br/>
                A device that implements any of the features in this section must implement them all.
            ]]>
        </comment>
        
        <command name="Set feature lock" id="0x0F12" associatedSettingId="0x0F12" associatedEventId="0x0F12">
            <payload_in>
                <item name="commands" type="SHORT_ARRAY">
                    <comment>
                        <![CDATA[
                            A short array containing the IDs of commands to enable or disable.
                        ]]>
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <throws>
                0x0F12
            </throws>
            
            <comment>
                <![CDATA[
                    Command is used to enable or disable specific Deckard commands.<br/>
                    A device shall reply with an exception to any Deckard commands which are already set as locked.<br/>
                    The device shall raise an exception as a result of any Set Feature Lock command
                    which contains an invalid, or unsupported Deckard Command ID. The exception shall 
                    contain a short array of illegal IDs.
                ]]>
            </comment>
        </command>
        
        <command name="Set password" id="0x0F16" associatedSettingId="0x0F16">
            <payload_in>
                <item name="password" type="STRING">
                    <comment>
                        The password to associate with the device.
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Set the device's password value.
                The device is not expected to undertake any checking mechanism to validate the password.
            </comment>
        </command>
        
        <setting name="Feature lock" id="0x0F12">
            <payload_in/>
            <payload_out>
                <item name="commands" type="SHORT_ARRAY">
                    <comment>
                        A short array containing the IDs of commands that are disabled.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                <![CDATA[
                    The setting will return the Deckard command IDs that are disabled on the device.
                ]]>
            </comment>
        </setting>

      <setting name="Feature lock Mask" id="0x0F14">
        <payload_in/>
        <payload_out>
          <item name="commands" type="SHORT_ARRAY">
            <comment>
              A short array containing the IDs of Deckard commands that are lockable,
              regardless of whether they are currently locked or not.
            </comment>
          </item>
        </payload_out>

        <comment>
          <![CDATA[
                    The setting will return the Deckard command IDs that are lockable on the device.
                ]]>
        </comment>
      </setting>

      <setting name="Password" id="0x0F16">
            <payload_in/>
            <payload_out>
                <item name="password" type="STRING">
                    <comment>The password associated with the device.</comment>
                </item>
            </payload_out>
            
            <comment>
                Return the device's password value.
            </comment>
        </setting>
        
        <setting name="Protected state" id="0x0F18">
            <payload_in/>
            <payload_out>
                <item name="state" type="BOOLEAN">
                    <comment>
                        The current Protected state.  True if the password is equal to something other
                        than the device default value, false otherwise.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                Return the device's Protected state: true true if the password is equal to something other
                than the device default value, false otherwise.
            </comment>
        </setting>
        
        <event name="Set feature lock" id="0x0F12">
            <payload_out>
              <item name="lock" type="BOOLEAN">
                <comment>
                  <![CDATA[
                      A boolean to denote whether the Deckard IDs have been enabled or disabled on the device
                      When the boolean is TRUE, the Deckard IDs have been locked.<br/>
                      when the boolean is FALSE, the Deckard IDs have been unlocked.
                        ]]>
                </comment>
              </item>
              <item name="commands" type="SHORT_ARRAY">
                <comment>
                  <![CDATA[
                            A short array containing the IDs of commands that have changed (either enabled or disabled).
                        ]]>
                </comment>
              </item>
            </payload_out>
            <comment>
                Notification that the Set Feature Lock feature has been updated.
            </comment>
        </event>

      <event name="Password Changed" id="0x0F16">
        <payload_out/>
        <comment>
          Notification that the Password has been updated.
        </comment>
      </event>

      <exception name="Feature lock ID Not valid" id="0x0F12">
        <payload_out>
          <item name="commands" type="SHORT_ARRAY">
            <comment>
              <![CDATA[
                   A short array containing the IDs of commands that are not valid.
                        ]]>
            </comment>
          </item>
        </payload_out>
        <comment>
                This exception is sent in response to a call to the Set feature lock command.
        </comment>
      </exception>
		
      <exception name="Feature Is Locked" id="0x0F14">
        <payload_out/>
        <comment>
                This exception is sent in response to a command message for which the command is currently locked.
        </comment>
      </exception>
        
    </section>

    <section title="HAL Interface (0x11nn)">

        <command name="Hal Current Scenario" id="0x1100" associatedSettingId="0x1100" associatedEventId="0x1100">
            <payload_in>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        <![CDATA[
                            The new scenario number. Legal values are<br/>
                            <a name="ScenarioNumbers">
                            <table>
                            <tbody>
                            <tr><th class="topLeft"><b>Value (decimal)</b></th><th class="topLeft"><b>Scenario</b></th></tr>
                            <tr><td>0</td><td>Current</td></tr>
                            <tr><td>1</td><td>Mixed Gaming</td></tr>
                            <tr><td>2</td><td>Mixed Gaming no Chat</td></tr>
                            <tr><td>3</td><td>Mixed Gaming chat in</td></tr>
                            <tr><td>4</td><td>Conference</td></tr>
                            <tr><td>5</td><td>Phone</td></tr>
                            <tr><td>6</td><td>Media</td></tr>
                            <tr><td>7</td><td>Gaming</td></tr>
                            </tbody>
                            </table>

                            The command will throw an exception if another value is supplied.</a>
                        ]]>
                    </comment>
                    <definedValue name="Current" value="0" />
                    <definedValue name="MixedGaming" value="1" />
                    <definedValue name="MixedGamingNoChat" value="2" />
                    <definedValue name="MixedGamingChatIn" value="3" />
                    <definedValue name="Conference" value="4" />
                    <definedValue name="Phone" value="5" />
                    <definedValue name="Media" value="6" />
                    <definedValue name="Gaming" value="7" />
                </item>
            </payload_in>
            <payload_out/>

            <comment>
                Allows HAL to set the current scenario
            </comment>
        </command>

        <setting name="Hal Current Scenario" id="0x1100">
            <payload_in/>
            <payload_out>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        The current scenario.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Return the device's current scenario.
            </comment>
        </setting>

        <event name="Hal Current Scenario" id="0x1100">
            <payload_out>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        The current scenario.
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that device's current scenario has been updated.
            </comment>
        </event>

        <command name="Hal Configure Volume" id="0x1102" associatedSettingId="0x1102" associatedEventId="0x1102">
            <payload_in>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        <![CDATA[
                            The new scenario number to update volumes for<br/>
                            a href="#ScenarioNumbers"
                        ]]>
                    </comment>
                </item>
                <item name="volumes" type="BYTE_ARRAY">
                    <comment>

                    </comment>
                </item>
            </payload_in>
            <payload_out/>

            <comment>
                Allows HAL to configure devices volumes
            </comment>
        </command>

        <setting name="Hal Current Volume" id="0x1102">
            <payload_in>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        <![CDATA[
                            The scenario number to request volumes for<br/>
                            a href="#ScenarioNumbers"
                        ]]>
                    </comment>
                </item>
                <item name="volumes" type="BYTE_ARRAY">
                    <comment>

                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        <![CDATA[
                            The new scenario number<br/>
                            a href="#ScenarioNumbers"
                        ]]>
                    </comment>
                </item>
                <item name="volumes" type="BYTE_ARRAY">
                    <comment>
                    </comment>
                </item>
            </payload_out>

            <comment>
                Return the device's current volumes for a scenario.
            </comment>
        </setting>

        <event name="Hal Configure Volume" id="0x1102">
            <payload_out>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        <![CDATA[
                            The scenario number that has had volume changes<br/>
                        ]]>
                    </comment>
                </item>
                <item name="volumes" type="BYTE_ARRAY">
                    <comment>
                    </comment>
                </item>
            </payload_out>
            <comment>
                Notification that device's volume have changed in a scenario has been updated.
            </comment>
        </event>

        <command name="Hal Configure EQ" id="0x1104" associatedSettingId="0x1104" associatedEventId="0x1104">
            <payload_in>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        The scenario to act on for the EQ setting
                    </comment>
                </item>
                <item name="numberOfEQs" type="UNSIGNED_SHORT">
                    <comment>
                        The number of EQ setting specified in this message
                    </comment>
                </item>
                <item name="EQId" type="BYTE">
                    <comment>
                        The EQ to control
                    </comment>
                </item>
                <item name="EQSettings" type="BYTE_ARRAY">
                    <comment>
                        Array of EQ settings.
                        Where the EQ is represented as individual sliders, the range is 0..255 to represent 0..100%
                    </comment>
                </item>
            </payload_in>
            <payload_out/>
            <comment>
                Command to set one or more EQ settings within the headset.
            </comment>
        </command>

        <setting name="Hal Current EQ" id="0x1104">
            <payload_in>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        The scenario for the EQ query
                    </comment>
                </item>
                <item name="EQs" type="BYTE_ARRAY">
                    <comment>
                        Array containing Ids of the EQ to return values for
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        The scenario for the volume event
                    </comment>
                </item>
                <item name="numberOfEQs" type="UNSIGNED_SHORT">
                    <comment>
                        The number of EQ settings specified in this message
                    </comment>
                </item>
                <item name="EQId" type="BYTE">
                    <comment>
                        The EQ Id
                    </comment>
                </item>
                <item name="EQSettings" type="BYTE_ARRAY">
                    <comment>
                        Array of EQ settings.
                        Where the EQ is represented as individual sliders, the range is 0..255 to represent 0..100%
                    </comment>
                </item>
            </payload_out>
            <comment>
                Returns current volume settings for a scenario
            </comment>
        </setting>

        <event name="Hal EQ Changed" id="0x1104">
            <payload_out>
                <item name="scenario" type="UNSIGNED_SHORT">
                    <comment>
                        The scenario for the volume event
                    </comment>
                </item>
                <item name="numberOfEQs" type="UNSIGNED_SHORT">
                    <comment>
                        The number of EQ setting specified in this message
                    </comment>
                </item>
                <item name="EQId" type="BYTE">
                    <comment>
                        The EQ to control
                    </comment>
                </item>
                <item name="EQSettings" type="BYTE_ARRAY">
                    <comment>
                        Array of EQ settings.
                        Where the EQ is represented as individual sliders, the range is 0..255 to represent 0..100%
                    </comment>
                </item>
            </payload_out>
            <comment>
                Event to inform the host that a scenario's volume settings have changed.
            </comment>
        </event>

        <setting name="Hal Generic" id="0x1106">
            <payload_in>
                <item name="hal generic" type="SHORT_ARRAY">
                    <comment>
                        Array of deckard messages
                    </comment>
                </item>
            </payload_in>
            <payload_out>
                <item name="hal generic" type="SHORT_ARRAY">
                    <comment>
                        Array of device settings
                    </comment>
                </item>
            </payload_out>
            <comment>
                Allows a number of devices settings to be queried in a single message
            </comment>
        </setting>
    </section>

    <section title="Global Exceptions (0x00nn)">
        
        <exception name="Command unknown" id="0x0010" global="true">
            
            <payload_out/>
            
            <comment>
                The device throws this exception when it's sent a command it doesn't implement.
            </comment>
            
        </exception>
        
        <exception name="Setting unknown" id="0x0012" global="true">
            
            <payload_out/>
            
            <comment>
                The device throws this exception when it's asked for the value of a setting it
                doesn't implement.
            </comment>
            
        </exception>
        
        <exception name="Invalid packet length" id="0x0014" global="true">
            
            <payload_out>
                <item type="UNSIGNED_SHORT" name="invalidLength">
                    <comment>
                        The invalid length.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                The device throws this exception when it receives a packet containing an invalid
                length field, like zero.
            </comment>
            
        </exception>
        
        <exception name="Invalid packet type" id="0x0016" global="true">
            
            <payload_out>
                <item type="BYTE" name="invalidType">
                    <comment>
                        The invalid packet type.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                The device throws this exception when it receives a packet containing an invalid
                packet type field.
            </comment>
            
        </exception>
        
        <exception name="Invalid message type" id="0x0018" global="true">
            
            <payload_out>
                <item type="UNSIGNED_SHORT" name="invalidType">
                    <comment>
                        The invalid message type.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                The device throws this exception when it receives a packet containing an invalid
                message type field.
            </comment>
            
        </exception>
        
        <exception name="Message too short" id="0x001A" global="true">
            
            <payload_out/>
            
            <comment>
                The device throws this exception when it encounters the delimiter marking the start
                of a new packet while consuming another.
            </comment>
            
        </exception>
        
        <exception name="Memory allocation failed" id="0x001C" global="true">
            
            <payload_out/>
            
            <comment>
                The device throws this exception when attempts to allocate memory, as for an
                incoming packet, and fails.
            </comment>
            
        </exception>
        
    </section>
    
    <section title="Specific Exceptions">
        
        <exception name="Number out of range" id="0x0806">
            <payload_out>
                <item name="minimum" type="LONG">
                    <comment>
                        The minimum legal value.
                    </comment>
                </item>
                <item name="maximum" type="LONG">
                    <comment>
                        The maximum legal value.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                A general-purpose exception used to signal that a numeric value is out of range.
            </comment>
        </exception>
        
        <exception name="Illegal value" id="0x0808">
            <payload_out>
                <item name="value" type="LONG">
                    <comment>
                        The nearest legal value.
                    </comment>
                </item>
            </payload_out>
            
            <comment>
                A general-purpose exception used to signal that a provided numeric value is illegal.
            </comment>
        </exception>

        <exception name="Invalid Power State" id="0x0814">
            <payload_out/>
            <comment>
                Unable to enter the required power state.
            </comment>
        </exception>

        <exception name="No tombstone" id="0x0A38">
            <payload_out/>
            
            <comment>
                Thrown by the device in response to a request for the last tombstone (crash log),
                when there is none.
                There won't be one if the device has never panicked, or after it executes the
                command "Clear tombstone".
            </comment>
        </exception>
        
    </section>
	   
       
    <section title="BaDangle messages (0xFFnn)">

        <comment>
            Messages intended to be used for communicating with the BaDangle device.
        </comment>
        
        <!-- ***********************************************************************************************
                                                Innovation Exceptions
         *********************************************************************************************** -->
        
        <exception name="Invalid service IDs" id="0xFF90">
            <payload_out>
                <item type="SHORT_ARRAY" name="ids">
                    <comment>
                        <![CDATA[
                            Reference "Configure services" command for valid <a href="#ServiceIDs">service IDs</a>.
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
                The device throws this exception when it receives a invalid service ID
            </comment>
        </exception>
        
        <exception name="Invalid characteristics or opcodes" id="0xFF91">
            <payload_out>
                <item type="SHORT_ARRAY" name="characteristics or opcodes">
                    <comment>
                        <![CDATA[
                            An array of service IDs followed by invalid supplied characteristics<br/> [serviceID,characteristic,serviceID,characteristic].
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </exception>
        
        <exception name="Invalid service modes" id="0xFF92">
            <payload_out>
                <item type="SHORT_ARRAY" name="modes">
                    <comment>
                        <![CDATA[
                            Reference "Configure services" command for valid <a href="#ServiceIDs">service IDs</a>.
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </exception>
        
        <exception name="Invalid payload data" id="0xFF93">
            <payload_out>
                <item type="SHORT_ARRAY" name="modes">
                    <comment>
                        <![CDATA[
                            An array of service IDs for which invalid or malformed
                            data was supplied. <br/>
						    Reference "Configure services" command for valid <a href="#ServiceIDs">service IDs</a>.
						]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </exception>

        <exception name="Device not ready" id="0xFF94">
            <payload_out>
            </payload_out>
            <comment>
                A request for status information could not be completed, due to device not being ready
            </comment>
        </exception>
        
        <!-- ***********************************************************************************************
                                              Innovation  Commands
         *********************************************************************************************** -->
        
        <command name="Configure services" id="0xFF00" associatedSettingId="0xFF00" associatedEventId="0xFF00">
            <comment>
                Configure one or more service characteristics.
            </comment>
            
            <payload_in>
                <item type="UNSIGNED_SHORT" name="service ID" identifier="true">
                    <comment>
                        <![CDATA[
                            Reference "Configure services" command for valid <a href="#ServiceIDs">service IDs</a>.
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic" identifier="true">
                    <comment>
                        <![CDATA[
                            Valid service characteristics (prefixed with "-"):<br/>
                        
                            UI                                        <br/>
                                - scroll display message        0x0000<br/>
                                - marquee display message       0x0001<br/>
                                - flip display                  0x0002<br/>
                                - rotate display                0x0003<br/>
                                - display message               0x0004<br/>
                                - toggle display                0x0005<br/>
                                - invert display                0x0006<br/>
                                - clear display                 0x0007<br/>
                                - display punctuation state     0x0008<br/>
                                - display icon state            0x0009<br/>
                             RTC                                      <br/>
                                - configure                     0x0000<br/>
                             NFC                                      <br/>
                                - write data                    0x0000<br/>
								- Set NDEF BT Handover          0x0001<br/>
                        ]]>
                    </comment>
					<definedValue name="UI_ScrollMessage"       value="0x0000"/>
					<definedValue name="UI_Marquee"             value="0x0001"/>
					<definedValue name="UI_DisplayFlip"         value="0x0002"/>
					<definedValue name="UI_DisplayRotate"       value="0x0003"/>
					<definedValue name="UI_DisplayMessage"      value="0x0004"/>
					<definedValue name="UI_DisplayToggle"       value="0x0005"/>
					<definedValue name="UI_DisplayInvert"       value="0x0006"/>
					<definedValue name="UI_DisplayClear"        value="0x0007"/>
					<definedValue name="UI_DisplayPunctuation"  value="0x0008"/>
					<definedValue name="UI_DisplayIcon"         value="0x0009"/>
					<definedValue name="RTC_Configure"          value="0x0000"/>
					<definedValue name="NFC_SetNDEF"            value="0x0000"/>					
                    <definedValue name="NFC_Write"              value="0x0001"/>
                </item>
                <item type="BYTE_ARRAY" name="configuration data">
                    <comment>
                        <![CDATA[
                        Characteristic-specific configuration data with the following format and constants:<br/>
                         <br/>
                         UI<br/>
                            - scroll display message <br/>
                                n bytes <br/>
                                Unsigned byte containing display ID. <br/>
                                Unsigned byte containing scroll direction. <br/>
                                Unsigned byte containing a flag to "use both" display for a total of 12 characters. <br/>
                                Unsigned byte containing the offset to shift the characters on the display. <br/>
                                Unsigned short containing the length of UCS-2 encoded string to follow (length in 2-byte blocks). <br/>
                                Short[] array of UCS-2 encoded message string. <br/>
                            - marquee display message <br/>
                                n bytes <br/>
                                Unsigned byte containing display ID. <br/>
                                Unsigned byte containing scroll direction. <br/>
                                Unsigned byte containing a flag to "use both" display for a total of 12 characters. <br/>
                                Unsigned byte containing the offset to shift the characters on the display. <br/>
                            - flip display <br/>
                                2 bytes <br/>
                                Unsigned byte containing display ID. <br/>
                                Unsigned byte containing flip axis. <br/>
                            - rotate display <br/>
                                1 byte <br/>
                                Unsigned byte containing display ID <br/>
                            - display message <br/>
                                n bytes <br/>
                                Unsigned byte containing display ID. <br/>
                                Unsigned byte containing a flag to "use both" display for a total of 12 characters. <br/>
                                Unsigned short containing the length of UCS-2 encoded string to follow (length in 2-byte blocks). <br/>
                                Short[] array of UCS-2 encoded message string. <br/>
                            - toggle display <br/>
                                2 bytes <br/>
                                Unsigned byte containing display ID. <br/>
                                Unsigned byte containing a flag indicating ON or OFF. <br/>
                            - invert display <br/>
                                2 bytes <br/>
                                Unsigned byte containing display ID. <br/>
                                Unsigned byte containing a flag indicating inverted or not inverted. <br/>
                            - clear display <br/>
                                1 byte <br/>
                                Unsigned byte containing display ID. <br/>
                            - display punctuation state <br/>
                                2 bytes<br/>
                                Unsigned byte containing display ID. <br/>
                                Unsigned byte containing punctuation state. <br/>
                            - display icon state <br/>
                                3 bytes <br/>
                                Unsigned byte containing display ID. <br/>
                                Unsigned byte containing icon ID. <br/>
                                Unsigned byte containing icon state. <br/>
                         RTC <br/>
                            - config <br/>
                                8 bytes <br/>
                                Byte 0 = seconds <br/>
                                Byte 1 = minutes<br/>
                                Byte 2 = hours <br/>
                                Byte 3 = day of week (sunday == 0) <br/>
                                Byte 4 = day<br/>
                                Byte 5 = mon th <br/>
                                Byte 6 = year1 <br/>
                                Byte 7 = year2 <br/>
                                (Derived from RTC_setCalendarTime() in //plantronics/NPD/programs/badangle/TI/RTC/rtc.c) <br/>
                         NFC<br/>
                            - write data<br/>
                                n bytes<br/>
                                Unsigned short (2 bytes) containing NDEF application selector. <br/>
                                Unsigned short (2 bytes) containing file selector. <br/>
                                Unsigned long (4 bytes) containing length of data to follow. <br/>
                                Byte[] array containing data to write. <br/>
							- Set NDEF Record <br/>
							    1 byte - 0x00 disable NFC, 0x01 enable NFC, 0x02-0xFF RFU <br/>							  
                         <br/>
                                
                        Constants:<br/>
                         <br/>
                        Display IDs:<br/>
                            Top display                     0x00 <br/>
                            Bottom display                  0x01 <br/>
                        Scroll/marquee directions:<br/>
                            Left                            0x00 <br/>
                            Right                           0x01 <br/>
                        Display axis:<br/>
                            Horizontal                      0x00 <br/>
                            Vertical                        0x01 <br/>
                        Punctuation states:<br/>
                            Off                             0x00 <br/>
                            Decimal point                   0x01 <br/>
                            Colon                           0x02 <br/>
                            High dot (?)                    0x03 <br/>
                            High colon (?)                  0x04 <br/>
                            All on                          0x05 <br/>
                        Icons:
                            Battery                         0x00 <br/>
                            Heart                           0x01 <br/>
                            Altitude                        0x02 <br/>
                            Humidity                        0x03 <br/>
                            Temperature                     0x04 <br/>
                            Compass                         0x05 <br/>
                            Clock                           0x06 <br/>
                            Pedometer                       0x07 <br/>
                            Connec                          0x08 <br/>
                            Lock                            0x09 <br/>
                        Icon states:<br/>
                            Off                             0x00 <br/>
                            On                              0x01 <br/>
                            Empty                           0x02 <br/>
                            1/4                             0x03 <br/>
                            1/2                             0x04 <br/>
                            3/4                             0x05 <br/>
                            Full                            0x06 <br/>                       
                        ]]>
                    </comment>
                </item>
                <!-- Zero or more following triplets -->
            </payload_in>
            <payload_out>
            </payload_out>
            <throws>
                0xFF90
            </throws>
            <throws>
                0xFF91
            </throws>
            <throws>
                0xFF93
            </throws>
        </command>
        
        <command name="Calibrate services" id="0xFF01" associatedSettingId="0xFF01" associatedEventId="0xFF01">
            <comment>
                Calibrate one or more service characteristics.
            </comment>
            
            <payload_in>
                <item type="UNSIGNED_SHORT" name="service ID" identifier="true">
                    <comment>
                        <![CDATA[
                           Reference "Configure services" command for valid <a href="#ServiceIDs">service IDs</a>.
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic" identifier="false">
                    <comment>
                        <![CDATA[
                            Valid service characteristics (prefixed with "-"):<br/>
                                                                              <br/>
                            Head orientation                                  <br/>
                                - calibration                   0x0000        <br/>
                            Pedometer                                         <br/>
                                - calibration                   0x0000        <br/>
                            Free Fall                                         <br/>
                                - calibration                   0x0000        <br/>
                            Taps                                              <br/>
                                - calibration                   0x0000        <br/>
                            Ambient Temp 1                                    <br/>
                                - calibration                   0x0000        <br/>
                            Ambient Temp 2                                    <br/>
                                - calibration                   0x0000        <br/>
                            Skin Temp                                         <br/>
                                - calibration                   0x0000        <br/>
                            Optical Sensor                                    <br/>
                                - calibrate                     0x0000        <br/>								
                        ]]>
                    </comment>
					<definedValue name="HeadOrientation_Cal"       value="0x0000"/>
					<definedValue name="Pedometer_Cal"             value="0x0000"/>
					<definedValue name="FreeFall_Cal"              value="0x0000"/>
					<definedValue name="Taps_Cal"                  value="0x0000"/>
					<definedValue name="AmbientTemp1_Cal"          value="0x0000"/>
					<definedValue name="AmbientTemp2_Cal"          value="0x0000"/>
                    <definedValue name="SkinTemp_Cal"              value="0x0000"/>
					<definedValue name="OpticalSensor_Cal"         value="0x0000"/>
                </item>
                <item type="BYTE_ARRAY" name="calibration data">
                    <comment>
                        <![CDATA[
                            Characteristic-specific calibration data with the following format:<br/>
                                                                                               <br/>
                            Head orientation                                                   <br/>
                                - quaternion calibration                                       <br/>
                                    16 bytes                                                    <br/>
                                    4 sets of 4 byte integers describing the head orientation reference quaternion components, x,y,z,w<br/>
                                - euler angle calibration                                      <br/>
                                    12 bytes                                                    <br/>
                                    4 sets of 4 byte integers describing the head orientation reference euler angle components, x,y,z<br/>
                            Pedometer                                                                                         <br/>
                                - calibration                                                                                 <br/>
                                    1 byte                                                                                    <br/>
                                    If >0, reset the pedometer counter to 0.                                                  <br/>
                            Free Fall                                                                                         <br/>
                                - calibration                                                                                 <br/>
                                    1 byte                                                                                    <br/>
                                    If >0, reset free fall status to 'false'.                                                 <br/>
                                    NOTE: Free fall is "sticky." Once a free fall is sensed, the free fall queries/events reports 'true' until<br/>
                                    reset with this command.                                                                                  <br/>
                            Taps                                                                                                              <br/>
                                - calibration                                                                                                 <br/>
                                    1 byte                                                                                                    <br/>
                                    If >0, reset the tap count to 0.                                                                          <br/>
                                    NOTE: Taps count is "sticky." Once a taps are sensed, taps queries/events report the same value until     <br/>
                                    reset with this command.                                                                                  <br/>
                            Ambient Temp 1                                                                                                    <br/>
                                - calibration                                                                                                 <br/>
                                    2 bytes                                                                                                   <br/>
                                    Signed integer containing a calibration temperature offset is degrees Celsius.                            <br/>
                            Ambient Temp 2                                                                                                    <br/>
                                - calibration                                                                                                 <br/>
                                    2 bytes                                                                                                   <br/>
                                    Signed integer containing a calibration temperature offset is degrees Celsius.                            <br/>
                            Skin Temp                                                                                                         <br/>
                                - calibration                                                                                                 <br/>
                                    2 bytes                                                                                                   <br/>
                                    Signed integer containing a calibration temperature offset is degrees Celsius.                            <br/>
                            Optical Sensor                                                                                                    <br/>
                                - calibration                                                                                                 <br/>
                                    2 byte                                                                                                    <br/>
                                    0x00000 = enable calibration                                                                              <br/>
                                    0x00001 = start white card test                                                                           <br/>                        
                                    0x00002 = start black card test                                                                           <br/>
									0x00003 - 0xfffe = RFU                                                                                    <br/>
									0xffff  = disable calibration                                                                             <br/>
					]]>
                    </comment>					
                </item>
                <!-- Zero or more following triplets -->
            </payload_in>
            <payload_out>
            </payload_out>
            <throws>
                0xFF90
            </throws>
            <throws>
                0xFF91
            </throws>
            <throws>
                0xFF93
            </throws>
        </command>
        
        <command name="Configure application" id="0xFF02" associatedSettingId="0xFF02" associatedEventId="0xFF02">
            <comment>
                Configure one or more application characteristics.
            </comment>
            
            <payload_in>
                <item type="UNSIGNED_SHORT" name="feature_ID" identifier="true">
                    <comment>
                        <![CDATA[
                            <a name="FeatureIDs">
                            Valid application IDs:<br/>

                            Display Readout                    0x0000  <br/>
                            Units                              0x0001  <br/>
                            Lock on powerup                    0x0002  <br/>
                            Lock on doff                       0x0003  <br/>
                            Enable button lock                 0x0004  <br/>
                            Enable panic sequence              0x0005  <br/>
                            Date and time                      0x0006  <br/>
                            Contacts                           0x0007  <br/>
                            </a>
                        ]]>
                    </comment>
                    <definedValue name="FeatureID_DisplayReadout"      value="0x0000"/>
                    <definedValue name="FeatureID_Units"               value="0x0001"/>
                    <definedValue name="FeatureID_LockOnPowerup"       value="0x0002"/>
                    <definedValue name="FeatureID_LockOnDoff"          value="0x0003"/>
                    <definedValue name="FeatureID_EnableButtonLock"    value="0x0004"/>
                    <definedValue name="FeatureID_EnablePanicSequence" value="0x0005"/>
                    <definedValue name="FeatureID_DateAndTime"         value="0x0006"/>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic" identifier="true">
                    <comment>
                        <![CDATA[
                            Valid application characteristics (prefixed with "-"):  <br/>
                                                                                    <br/>
                            Display Readout                             <br/>
                                - display heartrate             0x0000  <br/>
                                - display pedometer             0x0001  <br/>
                                - display compass               0x0002  <br/>
                                - display altitude              0x0003  <br/>
                                - display ambient temp          0x0004  <br/>
                                - display ambient humidity      0x0005  <br/>
                                - display skin temp             0x0006  <br/>
                                - display skin humidity         0x0007  <br/>
                                - display light                 0x0008  <br/>
                            Units                                       <br/>
                                - configuration                 0x0000  <br/>
                            Lock on powerup                             <br/>
                                - configuration                 0x0000  <br/>
                            Lock on doff                                <br/>
                                - configuration                 0x0000  <br/>
                            Enable button lock                          <br/>
                                - configuration                 0x0000  <br/>
                            Enable panic sequence                       <br/>
                                - configuration                 0x0000  <br/>
                            Date and time                               <br/>
                                - format                        0x0000  <br/>
                            Contacts                                    <br/>
                                - add                           0x0000  <br/>
                                - remove                        0x0001  <br/>
                        ]]>
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="configuration data">
                    <comment>
                        <![CDATA[
                            Characteristic-specific configuration data with the following format and constants:<br/>
                                                                                                               <br/>
                            Display Readout                                                                    <br/>
                                - display heartrate                                                            <br/>
                                    1 byte                                                                     <br/>
                                    Signed byte, readout label display ID. -1 == disabled.                     <br/>
                                - display pedometer                                                            <br/>
                                    1 byte                                                                     <br/>
                                    Signed byte, readout label display ID. -1 == disabled.                     <br/>
                                - display compass                                                              <br/>
                                    1 byte                                                                     <br/>
                                    Signed byte, readout label display ID. -1 == disabled.                     <br/>
                                - display altitude                                                             <br/>
                                    1 byte                                                                     <br/>
                                    Signed byte, readout label display ID. -1 == disabled.                     <br/>
                                - display ambient temp                                                         <br/>
                                    1 byte                                                                     <br/>
                                    Signed byte, readout label display ID. -1 == disabled.                     <br/>
                                - display ambient humidity                                                     <br/>
                                    1 byte                                                                     <br/>
                                    Signed byte, readout label display ID. -1 == disabled.                     <br/>
                                - display skin temp                                                            <br/>
                                    1 byte                                                                     <br/>
                                    Signed byte, readout label display ID. -1 == disabled.                     <br/>
                                - display skin humidity                                                        <br/>
                                    1 byte                                                                     <br/>
                                    Signed byte, readout label display ID. -1 == disabled.                     <br/>
                                - display light                                                                <br/>
                                    1 byte                                                                     <br/>
                                    Signed byte, readout label display ID. -1 == disabled.                     <br/>
                            Units                                                                              <br/>
                                - config                                                                       <br/>
                                    1 byte                                                                     <br/>
                                    Flag. 0==Metric, 1==Imperial.                                              <br/>
                            Lock on powerup                                                                    <br/>
                                - config                                                                       <br/>
                                    1 byte                                                                     <br/>
                                    Flag. 0==don't lock on powerup, 1==lock on powerup.                        <br/>
                            Lock on doff                                                                       <br/>
                                - config                                                                       <br/>
                                    1 byte                                                                     <br/>
                                    Flag. 0=don't lock on doff, 1==lock on doff.                               <br/>
                            Enable button lock                                                                 <br/>
                                - config                                                                       <br/>
                                    1 byte                                                                     <br/>
                                    Flag. 0==button lock disabled, 1==button lock enabled.                     <br/>
                            Enable panic sequence                                                              <br/>
                                - config                                                                       <br/>
                                    1 byte                                                                     <br/>
                                    Flag. 0==don't enable panic sqeuence, 1==enable don't sequence.            <br/>
                            Date and time                                                                      <br/>
                                - format                                                                       <br/>
                                    n bytes                                                                    <br/>
                                    T.B.D. will specify display format.                                        <br/>
                                    For the time being, ASCII "12" indicates using 12-hour time, and ASCII "24" indicates using 24-hour time. <br/>
                            Contacts                                                                           <br/>
                                - add                                                                          <br/>
                                    n bytes                                                                    <br/>
                                    Unsigned short containing length of UCS-2 encoded contact name to add (length in 2-byte blocks). Contact names greater than 11 characters will be clipped to 11 characters.                                                      <br/>
                                    Unsigned byte array containing UCS-2 encoded string of specified length.                                  <br/>
                                    Unsigned short containing length of contact number (encoded as ASCII string).                             <br/>
                                    Unsigned byte array containing contact number ASCII data.                                                 <br/>
                                    [...]                                                                                                     <br/>
                                    [repeat above format to pack additional contacts]                                                         <br/>
                                - remove                                                                                                      <br/>   
                                    n bytes                                                                                                   <br/>
                                    Unsigned short containing length of UCS-2 encoded contact name to remove (length in 2-byte blocks). Contact names greater than 11 characters will be clipped to 11 characters.                                                      <br/>
                                    Unsigned byte array containing UCS-2 encoded string of specified length.                                  <br/>
                                    [...]                                                                                                     <br/>
                                    [repeat above format to pack additional contacts]                                                         <br/>

                                    If no payload exists remove all contacts.

                        ]]>
                    </comment>
                </item>
                <!-- Zero or more following triplets -->
            </payload_in>
            <payload_out>
            </payload_out>
            <throws>
                0xFF90
            </throws>
            <throws>
                0xFF91
            </throws>
            <throws>
                0xFF93
            </throws>
        </command>
        
        <command name="Perform application action" id="0xFF03" associatedEventId="0xFF03">
            <comment>
                Performs an application action.
            </comment>
            
            <payload_in>
                <item type="UNSIGNED_SHORT" name="Application_ID">
                    <comment>
                        <![CDATA[
                            <table>
                                <tr><td>                  </td><td>Valid application IDs</td></tr>
                                <tr><td>Audio prompt      </td><td>0x0000</td></tr>
                                <tr><td>Haptic prompt     </td><td>0x0001</td></tr>
                                <tr><td>Dialog            </td><td>0x0002</td></tr>
                                <tr><td>Lock              </td><td>0x0003</td></tr>
                            </table>
                        ]]>
                    </comment>
                    <definedValue name="ApplicationID_AudioPrompt"       value="0x0000"/>
                    <definedValue name="ApplicationID_HapticPrompt"      value="0x0001"/>
                    <definedValue name="ApplicationID_Dialog"            value="0x0002"/>
                    <definedValue name="ApplicationID_Lock"              value="0x0003"/>					
                </item>
                <item type="UNSIGNED_SHORT" name="action">
                    <comment>
                        <![CDATA[
                            <table>
                                <tr><td>                      </td><td>Valid application actions</td></tr>
                                <tr><td>Audio prompt          </td><td>canned                        0x0000<br/>
                                                                       tts                           0x0001<br/>
                                                                       wav                           0x0002</td></tr>
                                <tr><td>Haptic prompt         </td><td>canned                        0x0000<br/>
                                                                       custom format                 0x0001</td></tr>
                                <tr><td>Dialog interaction    </td><td>text alert                    0x0000<br/>
                                                                       yes/no                        0x0001<br/>
                                                                       enter one number              0x0002<br/>
                                                                       choose one                    0x0003<br/>
                                                                       choose multiple               0x0004</td></tr>
                                <tr><td>Lock state            </td><td>config                        0x0000</td></tr>
                            </table>
                        ]]>
                    </comment>
                    <definedValue name="AudioPromptCanned"               value="0x0000"/>
                    <definedValue name="AudioPromptTTS"                  value="0x0001"/>
                    <definedValue name="AudioPromptWav"                  value="0x0002"/>
                    <definedValue name="HapticPromptCanned"              value="0x0000"/>					
                    <definedValue name="HapticPromptCustom"              value="0x0001"/>
                    <definedValue name="DialogAlert"                     value="0x0000"/>
                    <definedValue name="DialogYesNo"                     value="0x0001"/>
				    <definedValue name="DialogEnterOneNumber"            value="0x0002"/>
                    <definedValue name="DialogChooseOne"                 value="0x0003"/>
                    <definedValue name="DialogChooseMulti"               value="0x0004"/>
					<definedValue name="LockConfig"                      value="0x0000"/>
                </item>
                <item type="BYTE_ARRAY" name="operating data">
                    <comment>
                        <![CDATA[
                            Action-specific operating data with the following format and constants:                             <br/>
                                                                                                                                <br/>
                            Audio prompt                                                                                        <br/>
                                - canned                                                                                        <br/>
                                    1 byte                                                                                      <br/>
                                    Unsigned byte indicating canned prompt ID.                                                  <br/>
                                - tts                                                                                           <br/>
                                    n bytes                                                                                     <br/>
                                    Unsigned short containing length of UCS-2 encoded string to follow (length in 2-byte blocks).<br/>
                                    Unsigned byte array containing UCS-2 encoded string of specified length.                    <br/>
                                - wav                                                                                           <br/>
                                    n bytes                                                                                     <br/>
                                    Unsigned short containing length of WAV data to follow.                                     <br/>
                                    Unsigned byte array containing WAV data of specified length.                                <br/>
                                                                                                                                <br/>
                                    Vibration prompt                                                                            <br/>
                                - canned                                                                                        <br/>
                                    1 byte                                                                                      <br/>
                                    Unsigned byte indicating canned prompt ID.                                                  <br/>
                                - custom format                                                                                 <br/>
                                    n bytes                                                                                     <br/>
                                    Unsigned long containing length of custom format data to follow.                            <br/>
                                    Unsigned byte array containing custom format data of specified length.                      <br/>
                            Dialog interaction                                                                                  <br/>
                                - text alert                                                                                    <br/>
                                    n bytes                                                                                     <br/>
                                    Unsigned short containing length of top display UCS-2 encoded prompt string to follow (length in 2-byte blocks).    <br/>
                                    Unsigned byte array containing top display UCS-2 encoded string of specified length.                                <br/>
                                    Unsigned short containing length of bottom display UCS-2 encoded prompt string to follow (length in 2-byte blocks). <br/>
                                    Unsigned byte array containing bottom display UCS-2 encoded string of specified length.                             <br/>
                                    Unsigned byte containing prompt attention type.                                 <br/>
                                    * if attention type==Canned audio or canned vibration:                          <br/>
                                        Unsigned byte indicating canned prompt ID.                                  <br/>
                                    * if attention type==wav or custom format vibration:                            <br/>
                                        Unsigned long containing length of wav/custom format data to follow.        <br/>
                                        Unsigned byte array containing wav/custom format data of specified length.  <br/>
                                    * if attention type==tts                                                        <br/>
                                        Unsigned long containing length of UCS-2 encoded string to follow (length in 2-byte blocks).                    <br/>
                                        Unsigned byte array containing UCS-2 encoded string of specified length.                                        <br/>
                                - yes/no                                                                            <br/>
                                    n bytes                                                                         <br/>
                                    Unsigned short containing length of bottom display UCS-2 encoded prompt string to follow (length in 2-byte blocks). <br/>
                                    Unsigned byte array containing bottom display UCS-2 encoded string of specified length.                             <br/>
                                - enter one number                                                                  <br/>
                                    n bytes                                                                         <br/>
                                    Unsigned short containing length of bottom display UCS-2 encoded prompt stgring to follow (length in 2-byte blocks).<br/>
                                    Unsigned byte array containing bottom display UCS-2 encoded string of specified length.                             <br/>
                                - choose one                                                                        <br/>
                                    n bytes                                                                         <br/>
                                    Unsigned short containing length of bottom display UCS-2 encoded prompt string to follow (length in 2-byte blocks). <br/>
                                    Unsigned byte array containing bottom display UCS-2 encoded string of specified length.                             <br/>
                                    Unsigned short containing length of array to follow (length in 2-byte blocks).                                      <br/>
                                    Unsigned short array containing ending array indexes for the following packed array of UCS-2 encoded characters (indexed in 2-byte blocks). <br/>
                                    Unsigned byte array containing UCS-2 encoded string of length equal to the previous unsigned short plus one.                                <br/>
                                                                                                                                            <br/>
                                    Example:                                                                                                <br/>
                                    If the choices are, "cheeseburgers", "french fries" or "mayonaise", UCS-2 encoded string would look like this:                              <br/>
                                    "cheeseburgersfrench friesmayonaise" // (each character is 2-bytes wide)                                                                    <br/>
                                    And the index array would look like this:                                                               <br/>
                                    0x000C, 0x0018, 0x0021                                                                                  <br/>
                                - choose multiple                                                                                           <br/>
                                    n bytes                                                                                                 <br/>
                                    Unsigned short containing length of bottom display UCS-2 encoded prompt string to follow (length in 2-byte blocks).                         <br/>
                                    Unsigned byte array containing bottom display UCS-2 encoded string of specified length.                                                     <br/>
                                    Unsigned short containing length of array to follow (length in 2-byte blocks).                                                              <br/>
                                    Unsigned short array containing ending array indexes for the following packed array of UCS-2 encoded characters (indexed in 2-byte blocks). <br/>
                                    Unsigned byte array containing UCS-2 encoded string of length equal to the previous unsigned short plus one.                                <br/>
                                                                                                                                            <br/>
                                    See example under "Choose one" opcode.                                                                  <br/>
                            Lock state                                                                                                      <br/>
                                - config                                                                                                    <br/>
                                    1 byte                                                                                                  <br/>
                                    Flag. 0==unlock device, 1==lock device.                                                                 <br/>
                                                                                                                                            <br/>
                                                                                                                                            <br/>
                            Constants:                                                                                                      <br/>
                                                                                                                                            <br/>
                            Prompt attention types:                                                                                         <br/>
                                Canned audio                    0x00                                                                        <br/>
                                TTS audio                       0x01                                                                        <br/>
                                WAV audio                       0x02                                                                        <br/>
                                Canned vibration                0x10                                                                        <br/>
                                Formatted vibration             0x11                                                                        <br/>
                        ]]>
                    </comment>
                </item>
            </payload_in>
            <payload_out>
            </payload_out>
            <throws>
                0xFF90
            </throws>
            <throws>
                0xFF91
            </throws>
            <throws>
                0xFF93
            </throws>
        </command>
        
        <command name="Subscribe to services" id="0xFF0A" associatedEventId="0xFF0A" streamingId="FF0D">
            <payload_in>
                <comment>
                    Subscribes to one or more services.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="service_ID">
                    <comment>
                        <![CDATA[
                        <a name="ServiceIDs">
                        <table>
                            <tr><td>Head orientation                <td/><td>0x0000<td/><tr/>
                            <tr><td>Heading                         <td/><td>0x0001<td/><tr/>
                            <tr><td>Pedometer                       <td/><td>0x0002<td/><tr/>
                            <tr><td>Free Fall                       <td/><td>0x0003<td/><tr/>
                            <tr><td>Taps                            <td/><td>0x0004<td/><tr/>
                            <tr><td>Magnetometer Calibration Status <td/><td>0x0005<td/><tr/>
                            <tr><td>Gyroscope Calibration Status    <td/><td>0x0006<td/><tr/>
                            <tr><td>Versions                        <td/><td>0x0007<td/><tr/>
                            <tr><td>Humidity                        <td/><td>0x0008<td/><tr/>
                            <tr><td>Light                           <td/><td>0x0009<td/><tr/>
                            <tr><td>Optical proximity               <td/><td>0x000a<td/><tr/>
                            <tr><td>Ambient Temp 1                  <td/><td>0x000b<td/><tr/>
                            <tr><td>Ambient Temp 2                  <td/><td>0x000c<td/><tr/>
                            <tr><td>Skin Temp                       <td/><td>0x000d<td/><tr/>
                            <tr><td>Skin Conductivity               <td/><td>0x000e<td/><tr/>
                            <tr><td>Ambient Pressure                <td/><td>0x000f<td/><tr/>
                            <tr><td>Heart Rate                      <td/><td>0x0010<td/><tr/>
                            <tr><td>UI                              <td/><td>0x0011<td/><tr/>
                            <tr><td>RTC                             <td/><td>0x0012<td/><tr/>
                            <tr><td>Acceleration                    <td/><td>0x0013<td/><tr/>
                            <tr><td>Angular velocity                <td/><td>0x0014<td/><tr/>
                            <tr><td>Magnetic field                  <td/><td>0x0015<td/><tr/>
                        </table>
                        </a>
                        ]]>
                    </comment>
                    <definedValue name="ServiceID_HeadOrientation"               value="0x0000"/>
                    <definedValue name="ServiceID_Heading"                       value="0x0001"/>
                    <definedValue name="ServiceID_Pedometer"                     value="0x0002"/>
                    <definedValue name="ServiceID_FreeFall"                      value="0x0003"/>
                    <definedValue name="ServiceID_Taps"                          value="0x0004"/>
                    <definedValue name="ServiceID_MagnetometerCalibrationStatus" value="0x0005"/>
                    <definedValue name="ServiceID_GyroscopeCalibrationStatus"    value="0x0006"/>
                    <definedValue name="ServiceID_Versions"                      value="0x0007"/>
                    <definedValue name="ServiceID_Humidity"                      value="0x0008"/>
                    <definedValue name="ServiceID_Light"                         value="0x0009"/>
                    <definedValue name="ServiceID_OpticalProximity"              value="0x000a"/>
                    <definedValue name="ServiceID_AmbientTemp1"                  value="0x000b"/>
                    <definedValue name="ServiceID_AmbientTemp2"                  value="0x000c"/>
                    <definedValue name="ServiceID_SkinTemp"                      value="0x000d"/>
                    <definedValue name="ServiceID_SkinConductivity"              value="0x000e"/>
                    <definedValue name="ServiceID_AmbientPressure"               value="0x000f"/>
                    <definedValue name="ServiceID_HeartRate"                     value="0x0010"/>
                    <definedValue name="ServiceID_UI"                            value="0x0011"/>
                    <definedValue name="ServiceID_RTC"                           value="0x0012"/>
                    <definedValue name="ServiceID_Acceleration"                  value="0x0013"/>
                    <definedValue name="ServiceID_AngularVelocity"               value="0x0014"/>
                    <definedValue name="ServiceID_MagneticField"                 value="0x0015"/>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                        <a name="CharacteristicIDs">
                            <tr><td>                               <td/><td>service data<td/><tr/>
                            <tr><td>Head orientation               <td/><td>0x0000<td/><tr/>
                            <tr><td>Heading                        <td/><td>0x0000<td/><tr/>
                            <tr><td>Pedometer                      <td/><td>0x0000<td/><tr/>
                            <tr><td>Free Fall                      <td/><td>0x0000<td/><tr/>
                            <tr><td>Taps                           <td/><td>0x0000<td/><tr/>
                            <tr><td>Magnetometer Calibration Status<td/><td>0x0000<td/><tr/>
                            <tr><td>Gyroscope Calibration Status   <td/><td>0x0000<td/><tr/>
                            <tr><td>Versions                       <td/><td>0x0000<td/><tr/>
                            <tr><td>Humidity                       <td/><td>0x0000<td/><tr/>
                            <tr><td>Light                          <td/><td>0x0000<td/><tr/>
                            <tr><td>Optical proximity              <td/><td>0x0000<td/><tr/>
                            <tr><td>Ambient Temp 1                 <td/><td>0x0000<td/><tr/>
                            <tr><td>Ambient Temp 2                 <td/><td>0x0000<td/><tr/>
                            <tr><td>Skin Temp                      <td/><td>0x0000<td/><tr/>
                            <tr><td>Skin Conductivity              <td/><td>0x0000<td/><tr/>
                            <tr><td>Ambient Pressure               <td/><td>0x0000<td/><tr/>
                            <tr><td>Heart Rate                     <td/><td>0x0000<td/><tr/>
                            <tr><td>UI                             <td/><td>0x0000<td/><tr/>
                            <tr><td>Acceleration                   <td/><td>0x0000<td/><tr/>
                            <tr><td>Angular velocity               <td/><td>0x0000<td/><tr/>
                            <tr><td>Magnetic field                 <td/><td>0x0000<td/><tr/>
                        </table>
                        </a>
                        ]]>
                    </comment>
                    <definedValue name="Characteristic_HeadOrientation_QuaternionData"            value="0x0000"/>
                    <definedValue name="Characteristic_HeadOrientation_EulerAnglesData"           value="0x0001"/>
                    <definedValue name="Characteristic_Pedometer_ServiceData"                     value="0x0000"/>
                    <definedValue name="Characteristic_FreeFall_ServiceData"                      value="0x0000"/>
                    <definedValue name="Characteristic_Taps_ServiceData"                          value="0x0000"/>
                    <definedValue name="Characteristic_MagnetometerCalibrationStatus_ServiceData" value="0x0000"/>
                    <definedValue name="Characteristic_GyroscopeCalibrationStatus_ServiceData"    value="0x0000"/>
                    <definedValue name="Characteristic_Versions_ServiceData"                      value="0x0000"/>
                    <definedValue name="Characteristic_Humidity_ServiceData"                      value="0x0000"/>
                    <definedValue name="Characteristic_Light_ServiceData"                         value="0x0000"/>
                    <definedValue name="Characteristic_OpticalProximity_ServiceData"              value="0x0000"/>
                    <definedValue name="Characteristic_AmbientTemp1_ServiceData"                  value="0x0000"/>
                    <definedValue name="Characteristic_AmbientTemp2_ServiceData"                  value="0x0000"/>
                    <definedValue name="Characteristic_SkinTemp_ServiceData"                      value="0x0000"/>
                    <definedValue name="Characteristic_SkinConductivity_ServiceData"              value="0x0000"/>
                    <definedValue name="Characteristic_AmbientPressure_ServiceData"               value="0x0000"/>
                    <definedValue name="Characteristic_HeartRate_ServiceData"                     value="0x0000"/>
                    <definedValue name="Characteristic_UIButton_Press"                            value="0x0000"/>
                    <definedValue name="Characteristic_DisplayReadoutDisplay_HeartRate"           value="0x0000"/>
                    <definedValue name="Characteristic_DisplayReadoutDisplay_Pedometer"           value="0x0001"/>
                    <definedValue name="Characteristic_DisplayReadoutDisplay_Compass"             value="0x0002"/>
                    <definedValue name="Characteristic_DisplayReadoutDisplay_Altitude"            value="0x0003"/>
                    <definedValue name="Characteristic_DisplayReadoutDisplay_AmbientTemp"         value="0x0004"/>
                    <definedValue name="Characteristic_DisplayReadoutDisplay_AmbientHumidity"     value="0x0005"/>
                    <definedValue name="Characteristic_DisplayReadoutDisplay_SkinTemp"            value="0x0006"/>
                    <definedValue name="Characteristic_DisplayReadoutDisplay_SkinHumidity"        value="0x0007"/>
                    <definedValue name="Characteristic_DisplayReadoutDisplay_Light"               value="0x0008"/>
                    <definedValue name="Characteristic_Units_Configuration"                       value="0x0000"/>
                    <definedValue name="Characteristic_LockOnPowerUp_Configuration"               value="0x0000"/>
                    <definedValue name="Characteristic_LockOnDoff_Configuration"                  value="0x0000"/>
                    <definedValue name="Characteristic_EnableButtonLock_Configuration"            value="0x0000"/>
                    <definedValue name="Characteristic_EnablePanicSequence_Configuration"         value="0x0000"/>
                    <definedValue name="Characteristic_DateAndTime_Format"                        value="0x0000"/>
                    <definedValue name="Characteristic_UIScroll_DisplayMessage"                   value="0x0000"/>
                    <definedValue name="Characteristic_UIMarquee_DisplayMessage"                  value="0x0001"/>
                    <definedValue name="Characteristic_UI_FlipDisplay"                            value="0x0002"/>
                    <definedValue name="Characteristic_UI_RotateDisplay"                          value="0x0003"/>
                    <definedValue name="Characteristic_UI_DisplayMessage"                         value="0x0004"/>
                    <definedValue name="Characteristic_UI_ToggleDisplay"                          value="0x0005"/>
                    <definedValue name="Characteristic_UI_InvertDisplay"                          value="0x0006"/>
                    <definedValue name="Characteristic_UI_ClearDisplay"                           value="0x0007"/>
                    <definedValue name="Characteristic_UI_DisplayPunctuationState"                value="0x0008"/>
                    <definedValue name="Characteristic_UI_DisplayIconState"                       value="0x0009"/>
                    <definedValue name="Characteristic_RTC_Configure"                             value="0x0000"/>
                    <definedValue name="Characteristic_NFC_WriteData"                             value="0x0000"/>
                    <definedValue name="Characteristic_Acceleration_ServiceData"                  value="0x0000"/>
                    <definedValue name="Characteristic_AngularVelocity_ServiceData"               value="0x0000"/>
                    <definedValue name="Characteristic_MagneticField_ServiceData"                 value="0x0000"/>
                </item>
                <item type="UNSIGNED_SHORT" name="mode" enabler="true">
                    <comment>
                        <![CDATA[
                            The update mode for the service.<br/>
                                0 = off,<br/>
                                1 = on-change,<br/>
                                2 = periodic<br/>
                        ]]>
                    </comment>
                    <definedValue name="ModeOff"        value="0"/>
                    <definedValue name="ModeOnCchange"  value="1"/>
                    <definedValue name="ModePeriodic"   value="2"/>
                </item>
                <item type="UNSIGNED_SHORT" name="period">
                    <comment>
                        <![CDATA[
                        The minimum update period for the service in milliseconds.<br/>
                        If mode == 0, this value may be arbitrary.
                        ]]>
                    </comment>
                </item>
                <!-- Zero or more following quadruplets -->
            </payload_in>
            <payload_out>
            </payload_out>
            <comment>
            </comment>
            <throws>
                0xFF90
            </throws>
            <throws>
                0xFF91
            </throws>
            <throws>
                0xFF92
            </throws>
            <throws>
                0xFF93
            </throws>
        </command>

        <command name="Pass Through Protocol" id="0xFF0F" associatedEventId="0xFF0F">
            <comment>
                <![CDATA[
                    <p>A generic means of transporting some other protocol's messages inside of Bladerunner packets.<br />
                    In a initiator/receiver connection, packets are sent from the initiator with this command and received <br />
                    from the receiver via event ID 0xFF0F. <br />
                    In a connection where both devices are initiator, packets are send to each other using this command. The event is not needed.<br />
                    </p>
                ]]>
            </comment>
            
            <payload_in>
                <item type="UNSIGNED_SHORT" name="protocol_id">
                    <comment>
                        <![CDATA[
                            <p>A unique identifier for the protocol being passed through. <br />
                            Examples: APDU, HTTP, FTP, etc <br /></p>
                        ]]>
                    </comment>
                    <definedValue name="ProtocolNone"        value="0"/>
                    <definedValue name="ProtocolAPDU"        value="1"/>
                </item>
                <item type="BYTE_ARRAY" name="data">
                    <comment>
                        <![CDATA[
                            <p>A blob of outgoing data from the specified protocol. <br />
                            Examples: FTP "ls" command. <br /></p>
                        ]]>
                    </comment>                  
                </item>
            </payload_in>
            <payload_out>
            </payload_out>
        </command>
        
        <!-- ***********************************************************************************************
                                                Innovation Settings
         *********************************************************************************************** -->
        
        <setting name="Query services configuration data" id="0xFF00">
            <payload_in>
                <comment>
                    Queries service configuration data in one or more successive pairs.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="service ID">
                    <comment>
                        <![CDATA[
                            Reference "Configure services" command for valid <a href="#ServiceIDs">service IDs</a>.
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                            Reference "Configure services" command for valid  <a href="#CharacteristicIDs">characteristics</a>.
                        ]]>
                    </comment>
                </item>
                <!-- One or more following pairs-->
            </payload_in>
            <payload_out>
                <comment>
                    Service configuration query response data in one or more successive triplets.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="service ID">
                    <comment>
                        <![CDATA[
                            Reference Configure servicescommand for valid <a href="#ServiceIDs">service IDs</a>.
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                            Reference "Configure services" command for valid <a href="#CharacteristicIDs">characteristics</a>.
                        ]]>
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="configuration data">
                    <comment>
                        <![CDATA[
                            Reference "Configure services" command for valid byte array formats.
                        ]]>
                    </comment>
                </item>
                <!-- One or more following triplets-->
            </payload_out>
            <comment>
            </comment>
            <throws>
                0xFF90
            </throws>
            <throws>
                0xFF91
            </throws>
        </setting>
        
        <setting name="Query services calibration data" id="0xFF01">
            <payload_in>
                <comment>
                    Queries service calibration data in one or more successive pairs.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="service ID">
                    <comment>
                        <![CDATA[
                            Reference Calibrate services command for valid <a href="#ServiceIDs">service IDs</a> .
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                            Reference "Calibrate services" command for valid <a href="#CharacteristicIDs">characteristics</a>.
                        ]]>
                    </comment>
                </item>
                <!-- One or more following pairs-->
            </payload_in>
            <payload_out>
                <comment>
                    Service calibration query response data in one or more successive triplets.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="service ID">
                    <comment>
                        <![CDATA[
                            Reference "Calibrate services" command for valid <a href="#ServiceIDs">service IDs</a>.
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                            Reference "Calibrate services" command for valid <a href="#CharacteristicIDs">characteristics</a>.
                        ]]>
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="calibration data">
                    <comment>
                        Reference "Calibrate services" command for byte array formats.
                    </comment>
                </item>
                <!-- One or more following triplets-->
            </payload_out>
            <comment>
            </comment>
            <throws>
                0xFF90
            </throws>
            <throws>
                0xFF91
            </throws>
        </setting>
        
        <setting name="Query application configuration data" id="0xFF02">
            <payload_in>
                <comment>
                    Queries application configuration data in one or more successive pairs.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="feature ID">
                    <comment>
                        Reference "Configure applciation" command for valid feature IDs.
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                            Reference "Configure application" command for valid <a href="#CharacteristicIDs">characteristics</a>.
                        ]]>
                    </comment>
                </item>
                <!-- One or more following pairs-->
            </payload_in>
            <payload_out>
                <comment>
                    Application configuration query response data in one or more successive triplets.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="feature ID">
                    <comment>
                        Reference "Configure application" command for valid feature IDs.
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                            Reference "Configure application" command for valid <a href="#CharacteristicIDs">characteristics</a>.             <br/>
                                                                                                                                              <br/>
                            Reference "Configure application" command for valid byte array formats.                                           <br/>
                            Most featureID/characteristic pairs hold a one-to-one mapping with the "Configure Application" command. Some don't. Those that don't are documented below. <br/>
                                                                                                                                              <br/>
                            Contacts                                     <br/>
                                - read                           0x0000  <br/>
                        ]]>
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="configuration data">
                    <comment>
                        <![CDATA[
                            Reference "Configure application" command for valid byte array formats.                                           <br/>
                            Most featureID/characteristic pairs hold a one-to-one mapping with the "Configure Application" command. Some don't. Those that don't are documented below. <br/>
                                                                                                                                              <br/>
                            Contacts                                                                                                          <br/>
                                - read                                                                                                        <br/>
                                    n bytes                                                                                                   <br/>
                                    Unsigned short containing length of UCS-2 encoded contact name (length in 2-byte blocks).                 <br/>
                                    Unsigned byte array containing UCS-2 encoded string of specified length.                                  <br/>
                                    Unsigned byte array containing 10-digit contact number [length 10 bytes]                                  <br/>
                                    [...]                                                                                                     <br/>
                                    [repeat above format to pack ALL contacts]                                                                <br/>
                        ]]>
                    </comment>
                </item>
                <!-- One or more following triplets-->
            </payload_out>
            <comment>
            </comment>
            <throws>
                0xFF90
            </throws>
            <throws>
                0xFF91
            </throws>
        </setting>
        
        <setting name="Query services data" id="0xFF0D">
            <payload_in>
                <comment>
                    Queries service data in one or more successive pairs.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="Service_ID">
                    <comment>
                        <![CDATA[
                            Reference "Subscribe to services" command for valid <a href="#ServiceIDs">service IDs.</a>
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                            Reference "Subscribe to services" command for valid <a href="#CharacteristicIDs">characteristics</a>.
                        ]]>
                    </comment>
                </item>
                <throws>
                    0xFF94
                </throws>
            </payload_in>
            
            <payload_out>
                <comment>
                    Service data query response in one or more successive triplets.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="service ID">
                    <comment>
                        <![CDATA[
                            Reference "Subscribe to services" command for valid <a href="#ServiceIDs">service IDs.</a>
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                            Reference "Subscribe to services" command for valid <a href="#CharacteristicIDs">characteristics</a>.
                        ]]>
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="service_data">
                    <comment>
                        <![CDATA[
                            A byte array containing the characteristic-specific data in the following format and constants:<br/>
                            <br/>
                            <table>
                            <tr><td>                               </td><td>service data</td>
                            <tr><td>Head orientation               </td><td>Quaternion data (0x0000)<br/>
                                                                            16 bytes<br/>
                                                                            4 sets of 4 bytes describing the configured (calibrated) head orientation quaternion components, x,y,z,w</td>
                            <tr><td>                               </td>                                                
                                                                            <td>Euler angle data (0x0001)<br/>
                                                                            12 bytes<br/>
                                                                            3 sets of 4 bytes describing the configured (calibrated) head orientation euler angles components, x,y,z</td>
                            <tr><td>Heading                        </td><td>4 bytes<br/>
                                                                            Unsigned integer containing the number of degrees from megnetic north, increasing clockwise.</td>
                            <tr><td>Pedometer                      </td><td>4 bytes<br/>
                                                                            Unsigned integer containing the number of steps recorded since last reset.</td>
                            <tr><td>Free Fall                      </td><td>1 byte<br/>
                                                                            Flag indicating if the device is in free-fall. Only once event is sent with flag == true
                                                                            during the duration of a free fall.</td>
                            <tr><td>Taps                           </td><td>2 bytes<br/>
                                                                            Unsigned byte containing the tap directions.
                                                                            Unisnged byte containing the number of taps.</td>
                            <tr><td>Magnetometer Calibration Status</td><td>1 byte<br/>
                                                                            Unsigned byte containing the calibration status.</td>
                            <tr><td>Gyroscope Calibration Status   </td><td>1 byte<br/>
                                                                            Unsigned byte containing the calibration status.</td>
                            <tr><td>Versions                       </td><td>Not yet defined.<br/>
                                                                            To contain an array of various software and hardware component versions.</td>
                            <tr><td>Humidity                       </td><td>2 bytes<br/>
                                                                            Unsigned integer containing percentage humidity with scale factor 100.</td>
                            <tr><td>Light                          </td><td>2 bytes<br/>
                                                                            Unsigned integer containing light intensity in lux.</td>
                            <tr><td>Optical proximity              </td><td>4 bytes<br/>
                                                                            Unsigned integer containing distance in mm.<br/>
                                                                            Unisgned integer containing the light level in lumens.<br/>
                                                                            0xffff returned value for each sensor if not available</td>
                            <tr><td>Ambient Temp 1                 </td><td>2 bytes<br/>
                                                                            Signed integer containing temperature in degrees Celsius with scale factor 100.</td>
                            <tr><td>Ambient Temp 2                 </td><td>2 bytes<br/>
                                                                             Signed integer containing temperature in degrees Celsius with scale factor 100.</td>
                            <tr><td>Skin Temp                      </td><td>2 bytes<br/>
                                                                            Signed integer containing temperature in degrees Celsius with scale factor 100.</td>
                            <tr><td>Skin Conductivity              </td><td>2 bytes<br/>
                                                                            Unsigned integer containing conductivity in Ohms with scale factor 100.</td>
                            <tr><td>Ambient Pressure               </td><td>2 bytes<br/>
                                                                            Unsigned integer containing pressure in mb.</td>
                            <tr><td>Heart Rate                     </td><td>1 byte<br/>
                                                                            Unsigned integer containing heart rate in bpm.</td>
                            <tr><td>UI                             </td><td>5 bytes<br/>
                                                                            Unsigned long indicating buttons pressed (bitmask).<br/>
                                                                            Unsigned byte indicating press state.</td>
                            <tr><td>Acceleration                     </td><td>12 bytes<br/>
                                                                            3 sets of 4 bytes containing raw acceleration vector components (x,y,z) in g's.</td>
                            <tr><td>Angular velocity                 </td><td>12 bytes<br/>
                                                                            3 sets of 4 bytes containing raw angular velocity vector components (x,y,z) in deg/sec.</td>
                            <tr><td>Magnetic field                   </td><td>12 bytes<br/>
                                                                            3 sets of 4 bytes containing raw megnetic field components (x,y,z) in uT (mico-Teslas).</td>
                            </table>
                            <br/>
                            Constants:<br/>
                            <table>
                            <tr><td>Wearning state:                </td><td>Not being worn                  0x00<br/>
                                                                            Being worn                      0x01</td>
                            <tr><td>Tap directions:                </td><td>X up                            0x01<br/>
                                                                            X down                          0x02<br/>
                                                                            Y up                            0x03<br/>
                                                                            Y down                          0x04<br/>
                                                                            Z up                            0x05<br/>
                                                                            Z down                          0x06</td>
                            <tr><td>Calibration status:            </td><td>No calibrated                   0x00<br/>
                                                                            Calibrating step 1              0x01<br/>
                                                                            Calibrating step 2              0x02<br/>
                                                                            Calibrated                      0x03</td>
                            <tr><td>Buttons:                       </td><td>Legend vol up                   0x00000001 shift left 0
                                                                            Legend vol down                 0x00000001 shift left 1
                                                                            Legend answser/end              0x00000001 shift left 2
                                                                            Legend mute                     0x00000001 shift left 3
                                                                            Bangle plus                     0x00000001 shift left 10
                                                                            Bangle minus                    0x00000001 shift left 11
                                                                            Bangle enter                    0x00000001 shift left 12
                                                                            Bangle exit                     0x00000001 shift left 13</td>
                            <tr><td>Button states:                 </td><td>Down                            0x00<br/>
                                                                            Up                              0x01</td>
                            </table>
                        ]]>
                    </comment>
					<definedValue name="WearingDon"                  value="0x00"/>
					<definedValue name="WearingDoff"                 value="0x01"/>
					<definedValue name="TapXUp"                      value="0x01"/>
					<definedValue name="TapXDown"                    value="0x02"/>                
					<definedValue name="TapYUp"                      value="0x03"/>
					<definedValue name="TapYDown"                    value="0x04"/> 
					<definedValue name="TapZUp"                      value="0x05"/>
					<definedValue name="TapZDown"                    value="0x06"/> 					
					<definedValue name="CalibrateStatus_None"        value="0x00"/>
					<definedValue name="CalibrateStatus_Step1"       value="0x01"/> 
					<definedValue name="CalibrateStatus_Step2"       value="0x02"/>
					<definedValue name="CalibrateStatus_Calibrated"  value="0x03"/>
					<definedValue name="Button_Up"                   value="0x01"/>
					<definedValue name="Button_Down"                 value="0x00"/>
					
				</item>
            </payload_out>
            <comment>
            </comment>
        </setting>
        
        <setting name="Get device info" id="0xFF20">
            <payload_in>
            </payload_in>
            <payload_out>
                <comment>
                    Returns information about the device and its capabilities.
                </comment>
                
                <item type="BYTE_ARRAY" name="major hardware version">
                    <comment>
                        Unsigned byte indicating hardware version number.
                        e.g. major: 2, minor: 7 == "2.7"
                        Sub-components (IT, etc) can indlude version info in subsequent array indicies.
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="minor hardware version">
                    <comment>
                        Unsigned byte indicating hardware version number.
                        e.g. major: 2, minor: 7 == "2.7"
                        Sub-components (IT, etc) can indlude version info in subsequent array indicies.
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="major firmware version">
                    <comment>
                        Unsigned byte indicating firmware version number.
                        e.g. major: 2, minor: 7 == "2.7"
                        Sub-components (IT, etc) can indlude version info in subsequent array indicies.
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="minor firmware version">
                    <comment>
                        Unsigned byte indicating firmware version number.
                        e.g. major: 2, minor: 7 == "2.7"
                        Sub-components (IT, etc) can indlude version info in subsequent array indicies.
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="supported services">
                    <comment>
                        <![CDATA[
                        Array of unsigned shorts identifying supported <a href="#ServiceIDs">service IDs.</a>
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </setting>
        
        <!-- ***********************************************************************************************
                                                Innovation Events
         *********************************************************************************************** -->

        <event name="Subscribe to services" id="0xFF0A">
            <payload_out>
                <comment>
                    Information regarding change in subscribe to service
                </comment>

                <item type="UNSIGNED_SHORT" name="service_ID">
                    <comment>
                        <![CDATA[
                        See <a ref="ServiceIDs">ServiceIds</a>for valid values
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                        <a ref="CharacteristicIDs">CharacteristicIDs</a>for valid values
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="mode" enabler="true">
                    <comment>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="period">
                    <comment>
                        <![CDATA[
                        The minimum update period for the service in milliseconds.<br/>
                        If mode == 0, this value may be arbitrary.
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </event>

        <event name="Subscribed service data" id="0xFF0D">
            <payload_out>
                <comment>
                    Sent when subscribed service data changes.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="service ID">
                    <comment>
                        <![CDATA[
                        Reference "Subscribe to services" command for valid <a href="#ServiceIDs">service IDs.</a>
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        Reference "Subscribe to services" command for valid characteristics.
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="service data">
                    <comment>
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </event>
        
        <event name="Service configuration changed" id="0xFF00">
            <payload_out>
                <comment>
                    Sent when service configuration data changes.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="service ID">
                    <comment>
                        <![CDATA[
                            Reference "Configure services" command for valid <a href="#ServiceIDs">service IDs.</a>
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                            Reference "Configure services" command for valid characteristics.
                        ]]>
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="configuration data">
                    <comment>
                        <![CDATA[
                            Reference "Configure services" command for valid byte array formats.
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </event>
        
        <event name="Service calibration changed" id="0xFF01">
            <payload_out>
                <comment>
                    Sent when service calibration data changes.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="service ID">
                    <comment>
                        <![CDATA[
                            Reference "Calibrate services" command for valid <a href="#ServiceIDs">service IDs.</a>
                        ]]>
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        Reference "Calibrate services" command for valid characteristics.
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="calibration data">
                    <comment>
                        Reference "Calibrate services" command for valid byte array formats.
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </event>
        
        <event name="Application configuration changed" id="0xFF02">
            <payload_out>
                <comment>
                    Sent when application configuration data changes.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="feature ID">
                    <comment>
                        Reference "Configure application" command for valid feature IDs.
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="characteristic">
                    <comment>
                        <![CDATA[
                            Reference "Configure application" command for valid <a href="#CharacteristicIDs">characteristics</a>.
                        ]]>
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="configuration data">
                    <comment>
                        Reference "Configure application" command for valid byte array formats.
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </event>
        
        <event name="Application action result" id="0xFF03">
            <payload_out>
                <comment>
                    Sent when an application action provides a result.
                    e.g. A dialog action ends.
                </comment>
                
                <item type="UNSIGNED_SHORT" name="feature ID">
                    <comment>
                        Reference "Perform application action" command for valid feature IDs.
                    </comment>
                </item>
                <item type="UNSIGNED_SHORT" name="action">
                    <comment>
                        Reference "Perform application action" command for valid actions.
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="operating data">
                    <comment>
                        Reference "Perform application action" command for valid byte array formats.
                    </comment>
                </item>
                <item type="BYTE_ARRAY" name="result data">
                    <comment>
                        <![CDATA[
                        Application-action specific result data with the following format:<br/>
                        <br/>
                        Audio prompt<br/>
                            - result<br/>
                                1 byte<br/>
                                Unsigned byte indicating result. 0==completed, 2==interrupted.<br/>
                        Vibration prompt<br/>
                            - result<br/>
                                1 byte<br/>
                                Unsigned byte indicating result. 0==completed, 2==interrupted.<br/>
                        Dialog interaction<br/>
                            - text alert<br/>
                                1 byte<br/>
                                Unsigned byte indicating dialog result. 0==acknowledged, 2==interrupted.<br/>
                            - yes/no<br/>
                                2 bytes<br/>
                                Unsigned byte indicating dialog result. 0==completed, 1==canceled, 2==interrupted.<br/>
                                Unsigned byte flag. 1==yes, 0==no.<br/>
                            - enter one number<br/>
                                2 bytes<br/>
                                Unsigned byte indicating dialog result. 0==completed, 1==canceled, 2==interrupted.<br/>
                                Signed byte indicating the number selected.<br/>
                            - choose one<br/>
                                2 bytes<br/>
                                Unsigned byte indicating dialog result. 0==completed, 1==canceled, 2==interrupted.<br/>
                                Unsigned byte indicating the index of the choice that was selected.<br/>
                            - choose multiple<br/>
                                n bytes<br/>
                                Unsigned byte indicating dialog result. 0==completed, 1==canceled, 2==interrupted.<br/>
                                Unsigned byte array where each sequencial byte specifies the index of an input choice that was selected.<br/>
                        ]]>
                    </comment>
                </item>
            </payload_out>
            <comment>
            </comment>
        </event>

        <event name="Pass Through Protocol" id="0xFF0F" associatedCommandId="0xFF0F">
            <comment>
                <![CDATA[
                    <p>Receiver -> initiator data path for initiator/receiver connections. See "Pass Through Protocol" command 0xFF0F for details.<br />
                    </p>
                ]]>
            </comment>
            
            <payload_out>
                <item type="UNSIGNED_SHORT" name="protocol ID" identifier="true">
                </item>
                <item type="BYTE_ARRAY" name="data">               
                </item>
            </payload_out>
        </event>
        
    </section>

</registry>

