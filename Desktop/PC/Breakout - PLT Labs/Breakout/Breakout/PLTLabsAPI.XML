<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PLTLabsAPI</name>
    </assembly>
    <members>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTDevice">
            <summary>
            The PLTDevice object abstraction describes a device object
            that is available for connecting to with the PLTLabsAPI
            and ultimately subscribing for its services once the connection
            is established.
            </summary>
        </member>
        <member name="F:Plantronics.Innovation.PLTLabsAPI.PLTDevice.m_ProductName">
            <summary>
            The Product Name of the device
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTService">
            <summary>
            An enumeration of all the services you can register for on device
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTStatussDataType">
            <summary>
            An enumaration of datatypes that can be received from subscribed services
            (used for casting void reference back to correct data type when you receive
            some data)
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTMode">
            <summary>
            The mode to receice data, to a time period or as soon as it changes
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTQuaternion">
            <summary>
            An object to hold quaternion
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTOrientation">
            <summary>
            An object to hold an orientation (Euler angles)
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTMotionTrackingData">
            <summary>
            An object to return motion tracking data to the application that is
            registered for motion tracking service.
            Note, depending how you have configured motion tracking you may receive
            raw quaternion only, calibrated quaternions and orientations (Euler
            angles). Refer to the SDK configureService method
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTMoving">
            <summary>
            Flag to indicate if device is moving (Motion state service)
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTSensorCal">
            <summary>
            Object to specify if gyro is calibrated.
            **NOTE:** from device switch on place it on desk until the
            SENSOR_CAL_STATE_SVC returns a PLTSensorCal with
            m_isgyrocal == true.
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTPedometerCount">
            <summary>
            Object with how many steps have been taken with device.
            Note, only starts counting after person has set up a steady
            gait and taken about 8 steps.
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTTapDirection">
            <summary>
            Enum values to determine direction of tap on the device
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTTapInfo">
            <summary>
            Object to return how many taps where made on device and
            in which direction
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTWear">
            <summary>
            Object to return if the headset is worn or not
            and if this is the initial state at application start
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTFreeFall">
            <summary>
            Object to return if device is in freefall
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTProximityType">
            <summary>
            Types of proximity states than can occur with device
            PC-to-device proximity
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTProximity">
            <summary>
            Object to return the current proximity state between
            PC and Device (is it near/far/unknown)
            </summary>
        </member>
        <member name="F:Plantronics.Innovation.PLTLabsAPI.PLTProximity.m_proximity">
            <summary>
            Proximity state enumeration value (Near, Far, Unknown)
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTCallerIdType">
            <summary>
            Type of caller id (Mobile, Softphone, Deskphone)
            (Platform only currently returns Mobile caller id's)
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTCallerId">
            <summary>
            Used to return the caller id from the Plantronics device
            for example during inbound mobile call with mobile paired
            with headset, the PC app will receive the mobile caller id
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTCallStateType">
            <summary>
            A type of call state that can occur
            (on or not on a VoIP call, on or not on a Mobile call)
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTCallState">
            <summary>
            A call status that can occur for given call state type
            i.e. is that call Ringing/OnCall or Idle
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTCallStateInfo">
            <summary>
            Used to return a call state data event from Plantronics
            to your application. This can be used to inform you of
            changes in softphone call state for the ~13 Spokes-supported
            softphones, and also in mobile call states for mobile that
            is paired with headset.
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTConfiguration">
            <summary>
            Type of configurations that can be set in the PLTLabsAPI
            services. For example Motion Service you can configure
            raw or calibrated quaternions, plus quaternion only or
            also orientation output (Euler angles)
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTDock">
            <summary>
            Used to pass back to your app whether the headset device
            is docked or not (when registered for docking service)
            </summary>
        </member>
        <member name="F:Plantronics.Innovation.PLTLabsAPI.PLTDock.m_isdocked">
            <summary>
            Flag to indicate if headset is in it's docking base or not
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTCharge">
            <summary>
            Used to return to app registed for charge service the current
            battery level information of headset.
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTWearingState">
            <summary>
            Used to return to your app whether the headset is worn or not
            and if the wearing state is at application start (initial state event)
            or not.
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTBatteryLevel">
            <summary>
            Enum to define the possible headset battery levels
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTBatteryState">
            <summary>
            Used to return to your app the current headset battery level
            when registered for charging service.
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTConnection">
            <summary>
            PLTConnection is like a proxy service between
            the application and the PLTLabsAPI / Spokes connection.
            When you connect to PLTLabsAPI you receive a PLTConnection
            object, which includes vermaj, vermin members that reveal
            the device firmware version, and the PLTDevice of this
            connection, being the device that is connected to.
            </summary>
        </member>
        <member name="F:Plantronics.Innovation.PLTLabsAPI.PLTConnection.m_device">
            <summary>
            This member holds a reference to the PLTDevice object for this connection
            (the device that is connected to)
            </summary>
        </member>
        <member name="F:Plantronics.Innovation.PLTLabsAPI.PLTConnection.vermaj">
            <summary>
            The major version number of connected device firmware
            </summary>
        </member>
        <member name="F:Plantronics.Innovation.PLTLabsAPI.PLTConnection.vermin">
            <summary>
            The minor version number of connected device firmware
            </summary>
        </member>
        <member name="P:Plantronics.Innovation.PLTLabsAPI.PLTConnection.DeviceName">
            <summary>
            Returns a string representation of the device Product Name
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI">
            <summary>
            PLTLabsAPI - the main object class for PLTLabsAPI for using
            motion tracking etc headset sensors.
            WARNING: only instantiate 1 of these objects (pending to
            convert this to a singleton).
            </summary>
        </member>
        <member name="F:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.SDK_VERSION">
            <summary>
            SDK_VERSION defines the current version of the PLTLabsAPI DLL
            (It matches the rev version of the Developer High-Level API Description document).
            </summary>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.#ctor(Plantronics.Innovation.PLTLabsAPI.PLTLabsCallbackHandler)">
            <summary>
            Constructor for PLTLabsAPI object which is used to connect
            to the Plantronics motion sensor headset devices.
            ***NOTE: Only instantiate 1 of these objects - pending to do make a singleton***
            </summary>
            <param name="aCallBackHandler">Pass reference to your object class that implements
            the PLTLabsCallbackHandler interface to be able to receive motion tracking and other
            sensor data.</param>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.availableDevices">
            <summary>
            Call this method to find out which device(s) are connected.
            NOTE: will only return 1 device with PC Spokes API, that
            being the currently configured Spokes "call control" device.
            </summary>
            <returns>Returns an array of connected Plantronics devices as PLTDevice[] objects.</returns>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.openConnection(Plantronics.Innovation.PLTLabsAPI.PLTDevice)">
            <summary>
            Call this method to instruct device to open a connection to the
            specified device. Once connected you will be able to subscribe
            to data services of the device.
            </summary>
            <param name="aDevice">Pass the PLTDevice object you want to connect to.</param>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.closeConnection(Plantronics.Innovation.PLTLabsAPI.PLTConnection)">
            <summary>
            Call this method to close a conection to the Plantronics
            device. Pass the PLTConnection object reference that you
            wish to close. This method will close all the active
            subscriptions for the device and unattach from the device
            motion sensors.
            </summary>
            <param name="aConnection">Pass the PLTConnection object reference
            that you wish to close.</param>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.getIsConnected(Plantronics.Innovation.PLTLabsAPI.PLTDevice)">
            <summary>
            Call this method to find out if a particular device is attached or not.
            </summary>
            <param name="aDevice">The PLTDevice you want to check if it is connected</param>
            <returns>Returns true if the device is connected</returns>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.calibrateService(Plantronics.Innovation.PLTLabsAPI.PLTService)">
            <summary>
            Call this method to initiate a calibration process of the
            selected PLTService. For example, if you call it for
            the MOTION_TRACKING_SVC it will cause a calibration
            (set to zero) of the motion tracking angles.
            </summary>
            <param name="aService">The PLTService type you want to calibrate.</param>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.configureService(Plantronics.Innovation.PLTLabsAPI.PLTService,Plantronics.Innovation.PLTLabsAPI.PLTConfiguration,System.Object)">
            <summary>
            Call this method to apply service-specific configurations to a service.
            For example, to configure the motion tracking service to provide only raw
            quaternions or calibrated quaternions (calibrated to a reference quaternion).
            Or to tell motion tracking service to provide quaternions as output or
            to  also include orientations (Euler angles).
            </summary>
            <param name="aService">PLTService name being configured</param>
            <param name="aConfiguration">PLTConfiguration enum value of config to be applied</param>
            <param name="data">Optional reference to object for user data, e.g. a PLTQuaternion
            object as a user-supplied reference quaternion for calibration.</param>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.subscribe(Plantronics.Innovation.PLTLabsAPI.PLTService,Plantronics.Innovation.PLTLabsAPI.PLTMode,System.Int32)">
            <summary>
            Call this method to subscribe to the specified data service (PLTService enum) from the
            device. For example you can subscribe to motion tracking service to receive
            head tracking angles etc.
            </summary>
            <param name="aService">The PLTService enum value defines which service to subscribe to</param>
            <param name="aMode">The PLTMode defines On_Change (as soon as new data is available)
            or Periodic mode (return data on specific period). Note not all services are compatible
            with Periodic mode (These are not: Tap service, Free fall service and Call state service)</param>
            <param name="aPeriodmilliseconds">The period in milliseconds to return data
            if using Periodic mode</param>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.unsubscribe(Plantronics.Innovation.PLTLabsAPI.PLTService)">
            <summary>
            Call this method to unsunscribe a previously subscribed device service.
            </summary>
            <param name="aService">The PLTService enum value defines which service to unsubscribe from</param>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.getSubscribed(Plantronics.Innovation.PLTLabsAPI.PLTService)">
            <summary>
            Call this method to query if the specified service is currently subscribed
            </summary>
            <param name="aService">The PLTService enum value defines which service to check</param>
            <returns>Returns a boolean to indicate if service was subscribed or not.</returns>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.getSubscribed">
            <summary>
            Call this method to obtain a list of currently subscribed services
            </summary>
            <returns>Returns an array of subscribed services as PLTService[] enum values.</returns>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.Shutdown">
            <summary>
            Call this method to perform a clean shutdown of the
            PLTLabsAPI object and ensure threads are stopped and
            resources released.
            </summary>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTLabsAPI.HeadsetTrackingUpdate(Plantronics.Innovation.Util.HeadsetTrackingData)">
            <summary>
            This is a method used by the internals of the PLTLabsAPI DLL to receive
            Motion Tracking events from the headset and then distribute them to 
            applications that are subscribed to those data services.
            *** DO NOT CALL THIS METHOD ***
            </summary>
            <param name="headsetData">The data received from headset *** DO NOT CALL THIS METHOD ***</param>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTLabsCallbackHandler">
            <summary>
            This interface allows your application to receive data from the motion
            tracking service and other sensor services of the Plantronics device
            </summary>
        </member>
        <member name="T:Plantronics.Innovation.PLTLabsAPI.PLTInfo">
            <summary>
            The PLTInfo object abstration is used to pass data back to applications
            for the various services that the app can subcribe to.
            </summary>
        </member>
        <member name="F:Plantronics.Innovation.PLTLabsAPI.PLTInfo.m_serviceType">
            <summary>
            This member holds the service type as PLTService enum value.
            </summary>
        </member>
        <member name="F:Plantronics.Innovation.PLTLabsAPI.PLTInfo.m_data">
            <summary>
            This member is a object pointer that can be recast the appropriate
            data type depending on the service type.
            </summary>
        </member>
        <member name="M:Plantronics.Innovation.PLTLabsAPI.PLTInfo.#ctor(Plantronics.Innovation.PLTLabsAPI.PLTService,System.Object)">
            <summary>
            The PLT default constructor
            </summary>
            <param name="serviceType">PLTService enum value</param>
            <param name="data">object pointer to returned data</param>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.DebugLogger">
            <summary>
            interface to allow your application's class to handle log debug tracing from the SpokesWrapper...
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.SpokesDeviceCaps">
            <summary>
            Struct to hold info on Plantronics device capabilities
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.SpokesDeviceCaps.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor: pass in boolean values for whether it has the given device capabilities or not
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.SpokesDeviceCaps.ToString">
            <summary>
            Returns a nice string representation of device capabilites, e.g. for use in logs
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.MuteChangedArgs">
            <summary>
            Event args for Mute Changed event handler
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.LineActiveChangedArgs">
            <summary>
            Event args for Line Active Changed event handler
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.AttachedArgs">
            <summary>
            Event args for Attached (device attached) event handler
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.WearingStateArgs">
            <summary>
            Event args for TakenOff/PutOn events (wearing state) event handlers
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.DockedStateArgs">
            <summary>
            Event args for Docked/UnDocked events (docking) event handlers
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.OnCallCallState">
            <summary>
            Enumeration of call states
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.OnCallArgs">
            <summary>
            Event args for OnCall event handler
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.MobileCallState">
            <summary>
            Enumeration of mobile call states
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.OnMobileCallArgs">
            <summary>
            Event args for OnMobileCall event handler
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.MobileCallerIdArgs">
            <summary>
            Event args for MobileCallerId event handler
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.SerialNumberTypes">
            <summary>
            Enumeration of serial numbers in a Plantronics device (i.e. Headset and base/usb adaptor)
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.SerialNumberArgs">
            <summary>
            Event args for SerialNumber event handler
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.CallAnsweredArgs">
            <summary>
            Event args for CallAnswered event handler
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.CallEndedArgs">
            <summary>
            Event args for CallEnded event handler
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.NotOnCallArgs">
            <summary>
            Event args for NotOnCall event handler
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.MultiLineStateFlags">
            <summary>
            Used with MultiLineStateArgs to hold active/held status of multiple lines (PC, Mobile, Deskphone)
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.MultiLineStateArgs">
            <summary>
            EventArgs used with MultiLineStateChanged event handler to receive status of multiple lines (PC, Mobile, Deskphone) 
            when the state of any of these lines changes.
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.ButtonPressArgs">
            <summary>
            EventArgs used with ButtonPress event handler to receive details of which button
            was pressed
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.BaseButtonPressArgs">
            <summary>
            EventArgs used with BaseButtonPress event handler to receive details of which button
            was pressed
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.CallRequestedArgs">
            <summary>
            EventArgs used with CallRequested event handler to receive details of the
            number requested to dial from dialpad device (Calisto P240/800 series)
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.RawDataReceivedArgs">
            <summary>
            EventArgs used with RawDataReceived event handler to receive raw
            custom events (ODP/BR) from headset.
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.Multiline_LineType">
            <summary>
            Enumeration of multiline device line types
            </summary>
        </member>
        <member name="T:Plantronics.UC.SpokesWrapper.Spokes">
            <summary>
            Defines a Spokes object which you can use to communicate with Plantronics devices.
            Cannot instantiate directly. To obtain singleton call Spokes.Instance.
            Note: using singleton model to avoid possibility of multiple instantiation
            as specified in: http://msdn.microsoft.com/en-us/library/ff650316.aspx
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.#ctor">
            <summary>
            Default constructor, cannot be called directly. To obtain singleton call Spokes.Instance.
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.Finalize">
            <summary>
            Default desctructor, disconnects from Spokes
            </summary>
        </member>
        <member name="F:Plantronics.UC.SpokesWrapper.Spokes.DeviceCapabilities">
            <summary>
            A property containing flags that indicate the capabilities of the attached Plantronics device (if any).
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.SetLogger(Plantronics.UC.SpokesWrapper.DebugLogger)">
            <summary>
            If your application class implements the Spokes.DebugLogger interface you can pass a reference to your application class
            to the SetLogger method. This allows your class to be responsible for debug logging of Spokes related debug trace information.
            </summary>
            <param name="aLogger">For this parameter pass the "this" reference of your class that implements Spokes.DebugLogger interface.</param>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.IsSpokesInstalled(System.Int32)">
            <summary>
            This method returns a boolean to indicate if the Spokes software runtime is currently installed on the system.
            If the return value is false then any subsequent attempt to call Spokes.Instance.Connect("My App") will fail
            because it means that Spokes is not installed so there is no out of proc COM Service for your app to connect to.
            Note: Is also called by default at start of Connect method, so it is not necessary to call this directly from
            your app, but you have the option.
            Note: current version of this function is designed for Spokes 2.x and 3.x. For future major releases would need updating
            in IsSpokesComSessionManagerClassRegistered private function below.
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.Connect(System.String)">
            <summary>
            Instruct Spokes object to connect to Spokes runtime engine and register itself
            so that it can begin to communicate with the attached Plantronics device.
            </summary>
            <param name="SessionName">Optional name of your appplication's session within Spokes runtime engine. If omitted it will default to "COM Session".</param>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.Disconnect">
            <summary>
            Instruct Spokes object to disconnect from Spokes runtime engine and unregister its
            session in Spokes.
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.GetBatteryLevel">
            <summary>
            Request from Spokes information about the battery level in the attached wireless device.
            Typically your app will call this after receiving a BatteryLevel headset event.
            </summary>
            <returns>An BatteryLevel structure containing information about the battery level.</returns>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.RequestAllSerialNumbers">
            <summary>
            Instruct Spokes to tell us the serial numbers of attached Plantronics device, i.e. headset and base/usb adaptor.
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.DialMobileCall(System.String)">
            <summary>
            Instructs a mobile that is paired with Plantronics device to dial an outbound mobile call.
            </summary>
            <param name="numbertodial">The phone number you wish the mobile to call.</param>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.AnswerMobileCall">
            <summary>
            Instructs a mobile that is paired with Plantronics device to answer an inbound (ringing) mobile call
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.EndMobileCall">
            <summary>
            Instructs a mobile that is paired with Plantronics device to end on ongoing mobile call
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.IncomingCall(System.Int32,System.String)">
            <summary>
            Allows your softphone application to inform Plantronics device about an incoming call. The Plantronics device will then automatically ring. 
            Note: will automatically open audio/rf link to wireless device.
            </summary>
            <param name="callid">A unique numeric identifier for the call that your application and Spokes will use to identify it as.</param>
            <param name="contactname">Optional caller's contact name that will display on Plantronics display devices, e.g. Calisto P800 and P240 devices.</param>
            <returns>Boolean indicating if command was issued successfully or not.</returns>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.OutgoingCall(System.Int32,System.String)">
            <summary>
            Allows your softphone application to inform Plantronics device about an outgoing call. Note: will automatically open audio/rf link to wireless device.
            </summary>
            <param name="callid">A unique numeric identifier for the call that your application and Spokes will use to identify it as.</param>
            <param name="contactname">Optional caller's contact name that will display on Plantronics display devices, e.g. Calisto P800 and P240 devices.</param>
            <returns>Boolean indicating if command was issued successfully or not.</returns>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.EndCall(System.Int32)">
            <summary>
            Instructs Spokes to end an ongoing softphone call.
            </summary>
            <param name="callid">The unique numeric id that defines which softphone call you want to end.</param>
            <returns>Boolean indicating if the command was called succesfully or not.</returns>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.RequestSingleSerialNumber(Plantronics.UC.SpokesWrapper.SerialNumberTypes)">
            <summary>
            Instruct Spokes to tell us a serial number of the attached Plantronics device, i.e. headset or base/usb adaptor.
            </summary>
            <param name="serialNumberType">Allows you to say if you would like the headset or base/usb adaptor serial number.</param>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.ConnectAudioLinkToDevice(System.Boolean)">
            <summary>
            This function will establish or close the audio link between PC and the Plantronics audio device.
            It is required to be called where your app needs audio (i.e. when on a call) in order to support Plantronics wireless devices, because
            opening the audio link will also bring up the RF link.
            </summary>
            <param name="connect">Tells Spokes whether to open or close the audio/rf link to device</param>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.IsAudioLinkToDeviceActive">
            <summary>
            This function return true or false to indicate whether there is an active audio/rf
            link between PC and the device.
            </summary>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.SetMute(System.Boolean)">
            <summary>
            Set the microphone mute state of the attached Plantronics device.
            Note: For wireless devices mute only works when the audio/rf link is active (see also ConnectAudioLinkToDevice method).
            </summary>
            <param name="mute">A boolean indicating if you want mute on or off</param>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.SetLineActive(Plantronics.UC.SpokesWrapper.Multiline_LineType,System.Boolean)">
            <summary>
            Instruct the Plantronics multiline device to activate or deactivate the specified phone line.
            </summary>
            <param name="multiline_LineType">The line to activate or deactive, PC, Mobile or Desk Phone</param>
            <param name="activate">Boolean indicating whether to activate or de-activate the line</param>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.SetLineHold(Plantronics.UC.SpokesWrapper.Multiline_LineType,System.Boolean)">
            <summary>
            Instruct the Plantronics multiline device to place on hold or remove from hold the specified phone line.
            </summary>
            <param name="multiline_LineType">The line to place on hold or remove from hold, PC, Mobile or Desk Phone</param>
            <param name="hold">Boolean indicating whether to hold or un-hold the line</param>
        </member>
        <member name="M:Plantronics.UC.SpokesWrapper.Spokes.SendCustomMessageToHeadset(System.String)">
            <summary>
            Used to send a custom message to the attahched Plantronics device
            NOTE: currently no way to check the response from headset
            as IDevice.DataRecieved is not exposed by SDK. Should be in future.
            </summary>
            <param name="message">The custom message to send as a string</param>
        </member>
        <member name="P:Plantronics.UC.SpokesWrapper.Spokes.Instance">
            <summary>
            Returns the single Instance of Spokes which you can use to communicate with Plantronics devices
            </summary>
        </member>
        <member name="P:Plantronics.UC.SpokesWrapper.Spokes.HasDevice">
            <summary>
            Returns boolean to indicate whether there is currently a Plantronics device attached to the PC or not.
            </summary>
        </member>
        <member name="P:Plantronics.UC.SpokesWrapper.Spokes.GetDevice">
            <summary>
            Returns a reference to the currently active Plantronics call control device attached to the PC (if any).
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.TakenOff">
            <summary>
            Triggered when the user takes off the headset (with products that support wearing sensor)
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.PutOn">
            <summary>
            Triggered when the user puts on the headset (with products that support wearing sensor)
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.Near">
            <summary>
            Triggered when a Plantronics device comes near to PC dongle
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.Far">
            <summary>
            Triggered when a Plantronics device goes far from PC dongle
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.ProximityEnabled">
            <summary>
            Triggered when a Plantronics device proximity has been enabled
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.ProximityDisabled">
            <summary>
            Triggered when a Plantronics device proximity has been disabled
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.ProximityUnknown">
            <summary>
            Triggered when a Plantronics device proximity is unknown
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.InRange">
            <summary>
            Triggered when a Plantronics device comes into range of PC dongle
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.OutOfRange">
            <summary>
            Triggered when a Plantronics device goes out of range of PC dongle
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.Docked">
            <summary>
            Triggered when a Plantronics device is docked in its base or cradle
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.UnDocked">
            <summary>
            Triggered when a Plantronics device is undocked from its base or cradle
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.MobileCallerId">
            <summary>
            Triggered when a caller id has been received
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.OnMobileCall">
            <summary>
            Triggered when some mobile calling activity is detected with the device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.NotOnMobileCall">
            <summary>
            Triggered when mobile calling activity comes to an end with the device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.SerialNumber">
            <summary>
            Triggered when a serial number has been received from device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.CallAnswered">
            <summary>
            Triggered when the user answers a call using the headset device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.CallEnded">
            <summary>
            Triggered when the user answers a call using the headset device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.CallSwitched">
            <summary>
            Triggered when the user tries to switch call using the headset device by pressing switch (flash) button
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.OnCall">
            <summary>
            Triggered when some calling activity is detected with the device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.NotOnCall">
            <summary>
            Triggered when calling activity comes to an end with the device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.MuteChanged">
            <summary>
            Triggered when the user mutes or unmutes the headset device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.LineActiveChanged">
            <summary>
            Triggered when the spokes activates or deactivates the line to the headset device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.Attached">
            <summary>
            Triggered when the user attached a Plantronics device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.Detached">
            <summary>
            Triggered when the user detaches a Plantronics device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.CapabilitiesChanged">
            <summary>
            Triggered when the capabilities available on the device changes, e.g. asyncronous proximity registration is completed or mobile caller id registration is completed
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.MultiLineStateChanged">
            <summary>
            Triggered when there is a change of the active or held states of any of the lines of multi-line device (e.g. Savi 7xx)
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.ButtonPress">
            <summary>
            Triggered when a button press event is generated by device
            NOTE: you are advised NOT to use headset buttons e.g. talk button for
            call control, but rather use the IncomingCall/OutgoingCall functions
            and CallAnswered/CallEnded event handlers. (more notes in SpokesWrapper.cs)
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.BaseButtonPress">
            <summary>
            Triggered when a base button press event is generated by device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.CallRequested">
            <summary>
            Triggered when a user call requested event is received from dialpad device
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.BatteryLevelChanged">
            <summary>
            Triggered when the battery level or battery status changes on the device.
            In response you can call GetBatteryLevel method to
            get the battery level.
            </summary>
        </member>
        <member name="E:Plantronics.UC.SpokesWrapper.Spokes.RawDataReceived">
            <summary>
            Triggered when the Plantronics device has sent a raw (ODP/BR) report to PC.
            </summary>
        </member>
    </members>
</doc>
