@!XMLModel("deckard.xml")!
@!Output("plt.msg.js")!
/*
 * Plantronics M2M message library
 * This library provides an abstraction over the raw Plantronics machine messages.
 * @author: Cary A. Bran
 * @version: 1.0
 * @copyright: 2014 Plantronics Inc
 */
if (!plt) {
  plt = (function(my){
    return my;  
   })(plt || {});

}
plt.msg = (function (){
  var my = {};
  my.PROTOCOL_VERSION_TYPE = 0x01;
  my.GET_REQUEST_TYPE = 0x02;
  my.GET_RESULT_SUCCESS_TYPE = 0x03;
  my.GET_RESULT_EXCEPTION_TYPE = 0x04;
  my.COMMAND_TYPE = 0x05;
  my.COMMAND_RESULT_SUCCESS_TYPE = 0x06;
  my.COMMAND_RESULT_EXCEPTION_TYPE =  0x07;
  my.DEVICE_PROTOCOL_VERSION_TYPE = 0x08;
  my.METADATA_TYPE = 0x09;
  my.EVENT_TYPE = 0x0A;
  my.CLOSE_SESSION_TYPE = 0x0B;
  my.HOST_PROTOCOL_NEGOTIATION_REJECTION_TYPE = 0x0C;
  
  var messageTypeToString = {};
  messageTypeToString[my.PROTOCOL_VERSION_TYPE] = "protocol version";
  messageTypeToString[my.GET_REQUEST_TYPE] = "get settings";
  messageTypeToString[my.GET_RESULT_SUCCESS_TYPE] = "get settings success";
  messageTypeToString[my.GET_RESULT_EXCEPTION_TYPE] = "get settings exception";
  messageTypeToString[my.COMMAND_TYPE] = "command";
  messageTypeToString[my.COMMAND_RESULT_SUCCESS_TYPE] = "command success";
  messageTypeToString[my.COMMAND_RESULT_EXCEPTION_TYPE] = "command exception";
  messageTypeToString[my.DEVICE_PROTOCOL_VERSION_TYPE] = "device protocol version";
  messageTypeToString[my.METADATA_TYPE] = "metadata";
  messageTypeToString[my.EVENT_TYPE] = "event";
  messageTypeToString[my.CLOSE_SESSION_TYPE] = "session closed";
  messageTypeToString[my.HOST_PROTOCOL_NEGOTIATION_REJECTION_TYPE] = "protocol negotiation fail";

  //byte sizes for the various parts of a PLTLabs device message
  var BR_HEADER_SIZE = 6;
  var BR_ADDRESS_SIZE = 4;
  var BR_MESSAGE_ID_SIZE = 2;
  var BR_MESSAGE_TYPE_SIZE = 2
  var BR_MESSAGE_BOOL_SIZE = 1;

  //WC1 and Bangle sensor port
  my.SENSOR_PORT = 5;
  
  @!Include("eventtypes.jseance")!
  @!Include("commandtypes.jseance")!
  @!Include("settingtypes.jseance")!
  @!Include("exceptiontypes.jseance")!
  @!Include("commandcreate.jseance")!
  @!Include("settingcreate.jseance")!
  @!Include("settingsuccessparse.jseance")!
  @!Include("eventsuccessparse.jseance")!
  @!Include("exceptionparse.jseance")!
  
  //Creates the Host Negotiate Message
  my.createHostNegotiateMessage = function(options){
    var msg = options ? options : {};
    msg.messageType = my.PROTOCOL_VERSION_TYPE;
    if(!msg.address){
        msg.address = new ArrayBuffer(BR_ADDRESS_SIZE);
    }
    var data = new ArrayBuffer(3);
    var data_view = new Uint8Array(data);
    data_view[0] = 1;
    data_view[1] = 1; 
    msg.messageData = data; 
    
    var rawMessage = createRawMessage(msg);
    
    return my.parse(rawMessage);  
  }
  
  
  my.parse = function(message){
    if(!message){
        throw "parse: requires valid message object";
    }
    var data_view = new Uint8Array(message);
    var packetType =  (data_view[0] >>> 4)
    
    //message length
    var length = data_view[0] & 0X0F;
    length = length << 8;
    length = (length | data_view[1]);
  
    //message address in expanded form
    var address = [(data_view[2] >>>4).toString(16), 
                   (data_view[2] & 0x0F).toString(16),
                   (data_view[3] >>>4).toString(16),
                   (data_view[3] & 0x0F).toString(16),
                   (data_view[4] >>>4).toString(16),
                   (data_view[4] & 0x0F).toString(16),
                   (data_view[5] >>>4).toString(16)];
    
    var messageType = (data_view[5] & 0x0F);
    var payload = [];
    for(i = 6; i < data_view.length; i++){
        var highBs = data_view[i] >>> 4;
        var lowBs = data_view[i] & 0x0F; 
        payload.push(highBs.toString(16) + lowBs.toString(16)); 
    }
    
    var parsedMessage = {type: packetType, messageType: messageType, messageTypeName: messageTypeToString[messageType], length: length, address: address, payloadNibbles: payload, messageBytes: message }
    switch(messageType){
      case my.EVENT_TYPE:
        parsedMessage.payload = parseEventResult(message);
        break;
      case my.GET_RESULT_SUCCESS_TYPE:
        parsedMessage.payload = parseGetSettingResult(message);
        break;
      case my.PROTOCOL_VERSION_TYPE:
        parsedMessage.payload = protocolVersionToNameValuePairs(message);
        break;
      case my.METADATA_TYPE:
        parsedMessage.payload = parseMetaDataToNameValuePairs(message);
        break;
      case my.GET_RESULT_EXCEPTION_TYPE:
      case my.COMMAND_RESULT_EXCEPTION_TYPE:
        parsedMessage.payload = parseException(message);
        break;
      case my.COMMAND_RESULT_SUCCESS_TYPE:
        parsedMessage.payload = parseCommandSuccess(message);
        break;
      case my.GET_REQUEST_TYPE:
      case my.COMMAND_TYPE:
        //include the message id
        parsedMessage.payload = {};
        parsedMessage.payload.messageId =  parseShort(BR_HEADER_SIZE, data_view);
        break;
    }
    return parsedMessage;
  };
  
  
  var createRawMessage = function(msg){
    if(!msg.messageType){
      throw 'createRawMessage: msg requires int field: messageType';
    }
    if(!msg.address || msg.address.byteLength != BR_ADDRESS_SIZE){
      throw 'createRawMessage: msg requires byte[4] field: address';
    }

    var length = BR_ADDRESS_SIZE + (msg.messageId ? BR_MESSAGE_ID_SIZE : 0) 
                 + (msg.messageData ? msg.messageData.byteLength : 0);
    var message = new ArrayBuffer(BR_MESSAGE_TYPE_SIZE + length);
    var message_view = new Uint8Array(message);

    //header type - 4 bits
    message_view[0] = my.PROTOCOL_VERSION_TYPE << 4;

    //message length - 12 bits
    message_view[0] |= ((length & 0x0F00) >> 8);
    message_view[1] = (length & 0x00FF);

    var address_view = new Uint8Array(msg.address);
    //address - 17 bits
    message_view[2] = address_view[0];
    message_view[3] = address_view[1];
    message_view[4] = address_view[2];
    message_view[5] = address_view[3]; //the 2-high bits are part of the address, the 2 low bits part of the message type

    //message type - 4 bits + preserve any addressing
    message_view[5] |= (msg.messageType & 0x00FF);

    if(msg.messageId){
     //message id - split into two bytes
      message_view[6] = ((msg.messageId & 0xFF00) >> 8);
      message_view[7] = (msg.messageId & 0x00FF);
    }

    if(msg.messageData){
      //if there is a message id, shift the start of the data writing by 2 bytes
      var index = msg.messageId ? (BR_HEADER_SIZE + BR_MESSAGE_ID_SIZE) : BR_HEADER_SIZE;
      var data_view = new Uint8Array(msg.messageData);
      for(i=0; i < msg.messageData.byteLength; i++){
        message_view[index++] = data_view[i];
      }
    }

    return message;
  };
  
    var protocolVersionToNameValuePairs = function(message){
    
  };
    
  var parseCommandSuccess = function(message){
    var payload = {};
    var data_view = new Uint8Array(message, BR_HEADER_SIZE);
    payload.messageId =  parseShort(0, data_view);
    return payload;
  }
     
        
  var parseMetaDataToNameValuePairs = function(message){
    var payload = {"supportedCommands" : [],
                   "supportedGetSettings" : [],
                   "supportedEvents" : [],
                   "availablePorts" : []};
     
     var data_view = new Uint8Array(message, BR_HEADER_SIZE);
     var index = 0;
     var bounds = 2;
     var arrayLength = parseShort(index, data_view, bounds);
     
     //adjust the index to point to the start of the array
     index += 2;
    
     //Set the bounds to the upper limit of the array  
     //bounds is multipled by 2 because the array sent back from the device
     //are 16 bit short integers - which map over to message ids
     bounds = index + (2 * arrayLength);
     payload.supportedCommands = parseShortArray(index, data_view, bounds);
     
     index = bounds;
     bounds = index + 2;
     arrayLength = parseShort(index, data_view, bounds);
     index += 2;
     bounds = index +  (2 * arrayLength);
     payload.supportedGetSettings = parseShortArray(index, data_view, bounds);
     
     index = bounds;
     bounds = index + 2;
     arrayLength = parseShort(index, data_view, bounds);
     index += 2;
     bounds = index +  (2 * arrayLength);
     payload.supportedEvents = parseShortArray(index, data_view, bounds);
   
     index = bounds;
     bounds = index + 2;
     arrayLength = parseShort(index, data_view, bounds);
     
     index += 2;
     bounds = index + arrayLength;
     //bytes instead 16 bit integers
     //for available ports - this array is stored as single bits
     payload.availablePorts = parseByteArray(index, data_view, bounds)
    
    return payload;
  };
  
  var muteToneVolumeIdToString = function(muteToneVolume){
    var s = "";
    switch(muteToneVolume){
          case 0:
            s = "off";
            break;
          case 1:
            s = "low";
            break;
          case 2:
            s = "standard";
            break;
          default:
            s = "unknown";
            break;
    }
    return s;    
  };
  
  var pressTypeIdToString = function(pressTypeId){
    switch (pressTypeId) {
      case 0:
        return "Short Press";
      case 1:
        return "Medium Press";
      case 2:
        return "Long Press";
      case 3:
        return "Very Long Press";
      case 4:
        return "Double Press";
      default:
        return "Unknown";
    }
  };
  
  var buttonIdToString = function(buttonId){
   switch(buttonId){
    case 1:
      return "Power";
    case 2: 
      return "Hook";                            
    case 3: 
      return "Talk";
    case 4: 
      return "Volume Up";
    case 5: 
      return "Volume Down";
    case 6: 
      return "Mute";
    default:
      return "Unknown";
   }
  };
  
  var ringTypeIdToString = function(ringType){
    var s = "";
    switch(ringType){
          case 0:
            s = "ignore";
            break;
          case 1:
            s = "ring once";
            break;
          case 2:
            s = "ring continiously";
            break;
          default:
            s = "unknown";
            break;
    }
    return s;     
  };
  
  var boolToByte = function(bool){
    return bool ? 1 : 0;
  };
  
  var byteToBool = function(b){
    return b == 1;
  };
  
  var parseShort = function(index, buffer){
    var val = buffer[index] << 8;
    val += (buffer[index+1] & 0xFF);
    return val;
  };

  var parse32Bit = function(index, buffer){
    if(buffer.length < 4){
      throw "error parsing 32 bit value - array is undersized";
    }
    var val = buffer[index] << 24;
    val += (buffer[index+1] & 0xFF) << 16;
    val += (buffer[index+2] & 0xFF) << 8;
    val += (buffer[index+3] & 0xFF);
    return val;
  }

  var parse64Bit = function(index, buffer){
    if(buffer.length < 8){
      throw "error parsing 32 bit value - array is undersized";
    }
    var val = buffer[index] << 56;
    val += (buffer[index + 1]  & 0xFF) << 48;
    val += (buffer[index + 2] & 0xFF) << 40;
    val += (buffer[index + 3] & 0xFF) << 32;
    val += (buffer[index + 4] & 0xFF) << 24;
    val += (buffer[index + 5] & 0xFF) << 16;
    val += (buffer[index + 6] & 0xFF) << 8;
    val += (buffer[index + 7] & 0xFF)
    return val;
  }
  var parse32BitArray = function(index, buffer, bounds){
    var result = new Array();
    for(index; index < bounds; index+=4){
      result.push(parse32Bit(index, buffer));
    }
    return result;
  }

  var parseShortArray = function(index, buffer, bounds){
    var result = new Array();
    for(index; index < bounds; index+=2){
      result.push(parseShort(index, buffer));
    }
    return result;
  };
  
  var parseByteArray = function(index, buffer, bounds){
   var result = new Array();
   for(index; index < bounds; index++){
    var val = buffer[index]
    result.push(val);
   }
   return result;
  };
    
  var parseString = function(index, buffer, bounds){
    var result = "";
    for(index; index < bounds; index+=2){
      var val = buffer[index] << 8;
      val += (buffer[index+1] & 0xFF);
      result += String.fromCharCode(val);
    }
    return result.toString();
  };
  
  var convertToQuaternion = function(s){
    var w = s[0];
    var x = s[1];
    var y = s[2];
    var z = s[3];
  
    if (w > 32767) w -= 65536;
    if (x > 32767) x -= 65536;
    if (y > 32767) y -= 65536;
    if (z > 32767) z -= 65536;
    
    var x1 = x/16384.0;
    var y1 = y/16384.0;
    var z1 = z/16384.0;
    var w1 = w/16384.0;
    
    return {"w": w1, "x": x1, "y": y1, "z": z1}
  };

  
  
  return my;
}());

@!End!
