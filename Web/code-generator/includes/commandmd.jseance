 
<h2>Command Messages</h2>
@!For("section")!
  @!Code!   
     var title = Models['default'].currentNode.@title;
     title = title.toUpperCase();
     var isNotTestSection = title.indexOf('TESTING');
     var isTestInterfaceSection = title.indexOf('TESTING - TEST AUTOMATION MESSAGES');
  @!End!
  @!If(isNotTestSection == -1 || isTestInterfaceSection > -1)!
    @!For("command")!
      @!Code!
        var name = fixName(Models['default'].currentNode.@name);
        var settingName = Models['default'].currentNode.@name;
        function fixName(str) {
          var name = str.toUpperCase();
          name = replaceAll("-", "_", name);
          name = replaceAll("/", "_", name);
          name = replaceAll(" ", "_", name);
          if(name.indexOf("_COMMAND") == -1){
            name += "_COMMAND";
          }
          return name;
        }
        
        function replaceAll(find, replace, str){
         return str.replace(new RegExp(find, 'g'), replace);
        }
        var childrenSize = Models['default'].currentNode.payload_in.children().length();
        var description = Models['default'].currentNode.comment.text();
        
        var options = "";
      @!End!
<h3><a id="!Eval(name)!">!Eval(settingName)! Command</a></h3>
<b>Description:</b> !Eval(description)!<br>
<b>Message Id:</b> <i>plt.msg.!Eval(name)!</i><br>
<b>Options Object:</b>This object is optional if 'address' is the only attribute specified in the table below
<table>
<tr><th>Name</th><th>Type</th><th>Description</th></tr>
<tr><td>address</td><td>byte array</td><td>Optional - an array of 4 bytes, used to route the message, default address is [0,0,0,0]</td></tr> 
!If(childrenSize > 0)!
 @!For("payload_in")!
     @!For("item")!
      @!Code!
        var type = Models['default'].currentNode.@type;
        var n = Models['default'].currentNode.@name;
        var d = n.split(" ");
        var itemName = "";
        for(j = 0; j < d.length; j++){
          itemName += j == 0 ? itemName += d[j] : d[j].charAt(0).toUpperCase() + d[j].slice(1);
        }
        itemName = replaceAll("_", "", itemName);
        
        var typeInformation = "";
        if(type == "BOOLEAN"){
         typeInformation = "boolean - true or false";
        }
        else if(type == "BYTE"){
         typeInformation = "byte";
        }
        else if(type == "SHORT" || type == "UNSIGNED_SHORT"){
         typeInformation = "short";
        }
        else if(type == "INT" || type == "UNSIGNED_INT"){
         typeInformation = "integer";
        }
        else if(type == "LONG" || type == "UNSIGNED_LONG"){
         typeInformation = "long";
        }
        else if(type == "SHORT_ARRAY"){
         typeInformation = "array of shorts";
        }
        else if(type == "STRING"){
         typeInformation = "string";
        }
        else if(type == "BYTE_ARRAY"){
         typeInformation = "array of bytes";
        }
        
        var c = Models['default'].currentNode.comment;
        var comment = "";
        if(c && c.text() != ""){
          comment = c.text();
        }
                      
        options += "<tr><td> " + itemName + " </td><td> " + typeInformation + " </td><td> " + comment + "</td></tr>";  
      @!End!
     @!End!
@!End!
 @!Else!
      @!Code!
       options = "";
      @!End!
 @!End!
     !Eval(options)!
      </table>
  @!End!
@!End!
@!End!

 
  
  
  
  
  
 