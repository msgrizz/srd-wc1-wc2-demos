 
  //creates a command
  my.createCommand = function(commandId, options){
    if (!commandId) {
      throw "plt.msg.createCommand: command type not specified";
    }
    if (supportedCommands.indexOf(commandId) < 0) {
      throw "plt.msg.createCommand: command " + commandId + " has not been implemented yet...";
    }
    
    var msg = options ? options : {};
    msg.messageType = my.COMMAND_TYPE;
    msg.messageId = commandId;
    if(!msg.address){
        msg.address = new ArrayBuffer(BR_ADDRESS_SIZE);
    }
    switch (commandId) {
@!For("section")!
  @!Code!   
    var title = Models['default'].currentNode.@title;
    title = title.toUpperCase();
    var isNotTestSection = title.indexOf('TESTING');
    var isTestInterfaceSection = title.indexOf('TESTING - TEST AUTOMATION MESSAGES')
   @!End!
@!If(isNotTestSection == -1 || isTestInterfaceSection > -1)!
 @!For("command")!
  @!Code!
     var name = fixName(Models['default'].currentNode.@name);
     function fixName(str) {
       var name = str.toUpperCase();
       name = replaceAll("-", "_", name);
       name = replaceAll("/", "_", name);
       name = replaceAll(" ", "_", name);
       if(name.indexOf("_COMMAND") == -1){
         name += "_COMMAND";
       }
       return name;
     }
     function replaceAll(find, replace, str){
       return str.replace(new RegExp(find, 'g'), replace);
     }
     var childrenSize = Models['default'].currentNode.payload_in.item.length();  
  @!End!
  !If(childrenSize > 0)!
  case my.!Eval(name)!:
  @!For("payload_in")!
      @!Code!
        var outCode = "      var index = 0;\r\n";
        var byteCount = 0;
        //array containing the code snippets for dynamic arrays, strings, etc
        var dynamicDataStructureCode = [];
      @!End!
    @!For("item")!
      @!Code!
         var type =  Models['default'].currentNode.@type;
         var n = Models['default'].currentNode.@name; 
         var d = n.split(" ");
         var itemName = "";
         //fix for inconsistencies in naming of item names - turn to camel case
         //TODO - tried several regex's to do this with .replace() - did not parse correctly
         //if you want to optimize feel free but because this is generating code it doesn't really matter
         for(j = 0; j < d.length; j++){
           if(j == 0){
             itemName += d[j].charAt(0).toLowerCase() + d[j].slice(1);
            }
            else{
             itemName += d[j].charAt(0).toUpperCase() + d[j].slice(1);
            }
            
         }
         itemName = replaceAll("_", "", itemName);
         if(type == "BOOLEAN" && childrenSize == 1){
            byteCount++; 
           //assume this is an enable/disable command
            outCode += "      //default to off if no enabled flag is present\r\n";
            outCode += "      data_view[index] = boolToByte(msg.enable);\r\n";
             
         }
         else{
             if(type == "BOOLEAN"){
               byteCount++;
               outCode += "      data_view[index++] = boolToByte(msg." + itemName + ");\r\n";
             }
             else if(type == "BYTE"){
              byteCount++;
              outCode += "      data_view[index++] = msg." + itemName + ";\r\n";
             }
             else if(type == "SHORT" || type == "UNSIGNED_SHORT"){
               //two bytes increase item count by 2
               byteCount += 2;
               outCode += "      data_view[index++] = (0xFF00 & msg." + itemName + ") >>  8;\r\n";
               outCode += "      data_view[index++] = (0x00FF & msg." + itemName + ");\r\n";
             }
             else if(type == "INT" || type == "UNSIGNED_INT"){
               //4 bytes increase count by 4
               byteCount += 4;
               outCode += "      data_view[index++] = (0xFF000000 & msg." + itemName + ") >>  24;\r\n";
               outCode += "      data_view[index++] = (0x00FF0000 & msg." + itemName + ") >> 16;\r\n";
               outCode += "      data_view[index++] = (0x0000FF00 & msg." + itemName + ") >>  8;\r\n";
               outCode += "      data_view[index++] = (0x000000FF & msg." + itemName + ");\r\n";
               
             }
             else if(type == "LONG" || type == "UNSIGNED_LONG"){
                 //4 bytes increase count by 8
                 byteCount += 8;
                 outCode += "          data_view[index++] = (0xFF00000000000000 & msg." + itemName + ") >> 56;\r\n";
                 outCode += "          data_view[index++] = (0x00FF000000000000 & msg." + itemName + ") >> 48;\r\n";
                 outCode += "          data_view[index++] = (0x0000FF0000000000 & msg." + itemName + ") >> 40;\r\n";
                 outCode += "          data_view[index++] = (0x000000FF00000000 & msg." + itemName + ") >> 32;\r\n";
                 outCode += "          data_view[index++] = (0x00000000FF000000 & msg." + itemName + ") >> 24;\r\n";
                 outCode += "          data_view[index++] = (0x0000000000FF0000 & msg." + itemName + ") >> 16;\r\n";
                 outCode += "          data_view[index++] = (0x000000000000FF00 & msg." + itemName + ") >>  8;\r\n";
                 outCode += "          data_view[index++] = (0x00000000000000FF & msg." + itemName + ");\r\n";
                 
               }
             else if(type == "SHORT_ARRAY"){
               //dynamically add back the array size, and then the actual contents of the array
               var code = "      var " + itemName +"Length = msg." + itemName + ".length + 2;\r\n";
               code += "      bufferSize += (" + itemName + "Length * 2);\r\n";
               dynamicDataStructureCode.push(code);
               outCode += "      //store the array length before adding the array\r\n";
               outCode += "      data_view[index++] = (0xFF00 & msg." + itemName + ".length) >> 8;\r\n";
               outCode += "      data_view[index++] = (0x00FF & msg." + itemName + ".length);\r\n";
               outCode += "      for(i = 0; i < msg."+itemName+".length; i++){\r\n";
               outCode += "        data_view[index++] = (0xFF00 & msg." + itemName + "[i]) >>  8;\r\n";
               outCode += "        data_view[index++] = (0x00FF & msg." + itemName + "[i]);\r\n";
               outCode += "      }\r\n";  
             }
             else if(type == "STRING"){
               //dynamically add back the string size, and then the actual contents of the string
               var code = "      var " + itemName +"Length = msg." + itemName + ".length + 2;\r\n";
               code += "      bufferSize += (" + itemName + "Length * 2);\r\n";
               dynamicDataStructureCode.push(code);
               outCode += "      //store the array length before adding the array\r\n";
               outCode += "      data_view[index++] = (0xFF00 & msg." + itemName + ".length) >> 8;\r\n";
               outCode += "      data_view[index++] = (0x00FF & msg." + itemName + ".length);\r\n";
               outCode += "      for(i = 0; i < msg."+itemName+".length; i++){\r\n";
               outCode += "        var charCode = msg."+itemName+".charCodeAt(i);\r\n"
               outCode += "        data_view[index++] = (0xFF00 & charCode) >>  8;\r\n";
               outCode += "        data_view[index++] = (0x00FF & charCode);\r\n";
               outCode += "      }\r\n";  
             }
             else if(type == "BYTE_ARRAY"){
                //dynamically add back the array size, and then the actual contents of the array
               var code = "      var " + itemName + "_view = new Uint8Array(msg." + itemName +");\r\n";
               code += "      bufferSize += (" + itemName + "_view.length + 2);\r\n";
               dynamicDataStructureCode.push(code);
               outCode += "      //store the array length before adding the array\r\n";
               outCode += "      data_view[index++] = (0xFF00 & " + itemName + "_view.length) >> 8;\r\n";
               outCode += "      data_view[index++] = (0x00FF & " + itemName + "_view.length);\r\n";
               outCode += "      for(i = 0; i < " + itemName + "_view.length; i++){\r\n";
               outCode += "        data_view[index++] = " + itemName + "_view[i];\r\n";
               outCode += "      }\r\n";  
             }
             else{
              outCode += "      throw 'unknown type: " + type + "';\r\n";
             } 
         }  
         outCode += "      msg.messageData = data;";
      @!End!
    @!End!
    @!Code!
    var heading = "var bufferSize = " + byteCount + ";\r\n";
         
         for(i = 0; i < dynamicDataStructureCode.length; i++){
          heading += dynamicDataStructureCode[i];
         }  
          
         heading += "      var data = new ArrayBuffer(bufferSize);\r\n      var data_view = new Uint8Array(data);\r\n";
         outCode = heading + outCode;
    @!End!
    !Eval(outCode)!
      break;
   @!End!
  @!End!
 @!End!
@!End!
@!End!
    }
    var rawMessage = createRawMessage(msg);
    
    return my.parse(rawMessage);  
  };
 