/*
 * Plantronics M2M message library
 * This library provides an abstraction over the raw Plantronics machine messages.
 * @author: Cary A. Bran
 * @version: 1.0
 * @copyright: 2014 Plantronics Inc
 */
if (!plt) {
  plt = (function(my){
    return my;  
   })(plt || {});

}
plt.msg = (function (){
  var my = {};
  my.PROTOCOL_VERSION_TYPE = 0x01;
  my.GET_REQUEST_TYPE = 0x02;
  my.GET_RESULT_SUCCESS_TYPE = 0x03;
  my.GET_RESULT_EXCEPTION_TYPE = 0x04;
  my.COMMAND_TYPE = 0x05;
  my.COMMAND_RESULT_SUCCESS_TYPE = 0x06;
  my.COMMAND_RESULT_EXCEPTION_TYPE =  0x07;
  my.DEVICE_PROTOCOL_VERSION_TYPE = 0x08;
  my.METADATA_TYPE = 0x09;
  my.EVENT_TYPE = 0x0A;
  my.CLOSE_SESSION_TYPE = 0x0B;
  my.HOST_PROTOCOL_NEGOTIATION_REJECTION_TYPE = 0x0C;
  
  var messageTypeToString = {};
  messageTypeToString[my.PROTOCOL_VERSION_TYPE] = "protocol version";
  messageTypeToString[my.GET_REQUEST_TYPE] = "get settings";
  messageTypeToString[my.GET_RESULT_SUCCESS_TYPE] = "get settings success";
  messageTypeToString[my.GET_RESULT_EXCEPTION_TYPE] = "get settings exception";
  messageTypeToString[my.COMMAND_TYPE] = "command";
  messageTypeToString[my.COMMAND_RESULT_SUCCESS_TYPE] = "command success";
  messageTypeToString[my.COMMAND_RESULT_EXCEPTION_TYPE] = "command exception";
  messageTypeToString[my.DEVICE_PROTOCOL_VERSION_TYPE] = "device protocol version";
  messageTypeToString[my.METADATA_TYPE] = "metadata";
  messageTypeToString[my.EVENT_TYPE] = "event";
  messageTypeToString[my.CLOSE_SESSION_TYPE] = "session closed";
  messageTypeToString[my.HOST_PROTOCOL_NEGOTIATION_REJECTION_TYPE] = "protocol negotiation fail";

  //byte sizes for the various parts of a PLTLabs device message
  var BR_HEADER_SIZE = 6;
  var BR_ADDRESS_SIZE = 4;
  var BR_MESSAGE_ID_SIZE = 2;
  var BR_MESSAGE_TYPE_SIZE = 2
  var BR_MESSAGE_BOOL_SIZE = 1;

  //WC1 and Bangle sensor port
  my.SENSOR_PORT = 5;
  
  //EVENTS
  //Section Testing - Test Automation Messages (0x10nn)
  my.TEST_INTERFACE_ENABLE_DISABLE_EVENT = 0x1000;
  my.RAW_BUTTONTEST_EVENT_ENABLE_DISABLE = 0x1007;
  my.RAW_BUTTON_TEST_EVENT = 0x1008;
  my.VOICE_RECOGNITION_TEST_EVENT_ENABLE_DISABLE = 0x100A;
  my.VOICE_RECOGNITION_TEST_EVENT = 0x100B;
  my.RAW_DATA_EVENT = 0x100D;
  my.RAW_DATA_EVENT_ENABLE_DISABLE = 0x100F;
  my.CAPSENSE_RAW_DATA_EVENT = 0x101A;
  my.SOFTWARE_BATTERY_DIAG_EVENT = 0x1110;
  my.HARDWARE_BATTERY_DIAG_EVENT = 0x1112;
  my.COULOMB_COUNTER_DIAG_EVENT = 0x1114;
  //Section Wearing state (0x02nn)
  my.WEARING_STATE_CHANGED_EVENT = 0x0200;
  my.AUTO_ANSWER_ON_DON_EVENT = 0x0204;
  my.CONFIGURE_AUTO_PAUSE_MEDIA_EVENT = 0x0208;
  my.CONFIGURE_AUTO_TRANSFER_CALL_EVENT = 0x020C;
  my.CONFIGURE_AUTO_LOCK_CALL_BUTTON_EVENT = 0x0210;
  my.CONFIGURE_WEARING_SENSOR_ENABLED_EVENT = 0x0216;
  my.CONFIGURE_AUTO_MUTE_CALL_EVENT = 0x0218;
  my.MIC_BOOM_POSITION_EVENT = 0x021C;
  //Section General Configuration (0x04nn)
  my.CONFIGURE_MUTE_TONE_VOLUME_EVENT = 0x0400;
  my.CONFIGURATION_FOR_A_CONNECTED_HEADSET_EVENT = 0x0401;
  my.CONFIGURE_SECOND_INBOUND_CALL_RING_TYPE_EVENT = 0x0404;
  my.MUTE_OFF_VP_ENABLE_STATUS_CHANGED_EVENT = 0x0407;
  my.SCO_OPEN_TONE_ENABLE_EVENT = 0x0408;
  my.OLI_FEATURE_ENABLE_EVENT = 0x0409;
  my.CONFIGURE_MUTE_ALERT_EVENT = 0x040A;
  //Section Advanced Features (0x08nn)
  my.CONFIGURE_SIGNAL_STRENGTH_EVENT = 0x0800;
  my.DSP_TUNING_DATA_EVENT = 0x0801;
  my.CUSTOM_BUTTON_EVENT = 0x0802;
  my.PLATFORM_SPECIFIC_INSTRUMENTATION_DATA_EVENT = 0x0803;
  my.CONFIGURE_CALLER_ANNOUNCEMENT_EVENT = 0x0804;
  my.MANUFACTURING_TEST_MESSAGE_EVENT = 0x0805;
  my.SIGNAL_STRENGTH_EVENT = 0x0806;
  my.FIND_HEADSET_LED_ALERT_STATUS_CHANGED_EVENT = 0x0808;
  my.TRANSMIT_POWER_ENABLED_EVENT = 0x0810;
  my.TRANSMIT_POWER_CHANGED_EVENT = 0x0812;
  my.VOICE_SILENT_DETECTION_SETTING_CHANGED_EVENT = 0x0815;
  my.VOICE_SILENT_DETECTED_EVENT = 0x0816;
  //Section General Information (0x0Ann)
  my.TATTOO_SERIAL_NUMBER_EVENT = 0x0A01;
  my.TATTOO_BUILD_CODE_EVENT = 0x0A03;
  my.PART_NUMBER_EVENT = 0x0A05;
  my.USER_ID_EVENT = 0x0A06;
  my.FIRST_DATE_USED_EVENT = 0x0A07;
  my.CONFIGURE_VR_CALL_REJECT_AND_ANSWER_EVENT = 0x0A08;
  my.LAST_DATE_USED_EVENT = 0x0A09;
  my.LAST_DATE_CONNECTED_EVENT = 0x0A0B;
  my.CONFIGURE_A2DP_EVENT = 0x0A0C;
  my.TIME_USED_EVENT = 0x0A0D;
  my.USER_DEFINED_STORAGE_CHANGED_EVENT = 0x0A0F;
  my.SET_VOCALYST_PHONE_NUMBER_EVENT = 0x0A12;
  my.VOCALYST_INFO_NUMBER_EVENT = 0x0A16;
  my.BATTERY_STATUS_CHANGED_EVENT = 0x0A1C;
  my.SET_GENES_GUID_EVENT = 0x0A1E;
  my.CONFIGURE_MUTE_REMINDER_TIMING_EVENT = 0x0A20;
  my.SET_PAIRING_MODE_EVENT = 0x0A24;
  my.CONFIGURE_SPOKEN_ANSWER_IGNORE_COMMAND_EVENT = 0x0A2E;
  my.LOW_BATTERY_VOICE_PROMPT_EVENT = 0x0A28;
  my.CONFIGURE_LYNC_DIAL_TONE_ON_CALL_PRESS_EVENT = 0x0A32;
  my.CLEAR_TOMBSTONE_EVENT = 0x0A3A;
  my.BLUETOOTH_CONNECTION_EVENT = 0x0A42;
  //Section General (0x0Cnn)
  my.CONNECTED_DEVICE_EVENT = 0x0C00;
  my.DISCONNECTED_DEVICE_EVENT = 0x0C02;
  //Section Device Status (0x0Enn)
  my.CALL_STATUS_CHANGE_EVENT = 0x0E00;
  my.MICROPHONE_MUTE_STATE_EVENT = 0x0E01;
  my.TRANSMIT_AUDIO_STATE_EVENT = 0x0E03;
  my.RECEIVE_AUDIO_STATE_EVENT = 0x0E05;
  my.LED_STATUS_GENERIC_EVENT = 0x0E07;
  my.HEADSET_AVAILABLE_EVENT = 0x0E09;
  my.SPEAKER_VOLUME_EVENT = 0x0E0A;
  my.TRAINING_HEADSET_CONNECTION_EVENT = 0x0E0B;
  my.CURRENT_SELECTED_LANGUAGE_CHANGED_EVENT = 0x0E1A;
  my.AUDIO_STATUS_EVENT = 0x0E1E;
  my.HEADSET_CALL_STATUS_EVENT = 0x0E22;
  my.EXTENDED_CALL_STATUS_CHANGE_EVENT = 0x0E32;
  //Section General compatibility with Spokes (0x0Fnn)
  my.SET_RINGTONE_EVENT = 0x0F02;
  my.SET_AUDIO_BANDWIDTH_EVENT = 0x0F04;
  my.SET_RINGTONE_VOLUME_EVENT = 0x0F06;
  my.SET_DEFAULT_OUTBOUND_INTERFACE_EVENT = 0x0F08;
  my.SET_VOLUME_CONTROL_ORIENTATION_EVENT = 0x0F2E;
  //Section DSP-related Spokes compatibility (0x0Fnn continued)
  my.AAL_ACOUSTIC_INCIDENT_REPORTING_ENABLE_EVENT = 0x0F01;
  my.AAL_ACOUSTIC_INCIDENT_REPORTING_THRESHOLDS_EVENT = 0x0F03;
  my.AAL_ACOUSTIC_INCIDENT_REPORT_EVENT = 0x0F05;
  my.AAL_TWA_REPORTING_ENABLE_EVENT = 0x0F07;
  my.AAL_TWA_REPORTING_TIME_PERIOD_EVENT = 0x0F09;
  my.AAL_TWA_REPORT_EVENT = 0x0F0B;
  my.CONVERSATION_DYNAMICS_REPORTING_ENABLE_EVENT = 0x0F0D;
  my.CONVERSATION_DYNAMICS_REPORTING_TIME_PERIOD_EVENT = 0x0F0F;
  my.CONVERSATION_DYNAMICS_REPORT_EVENT = 0x0F11;
  my.SET_ANTI_STARTLE_EVENT = 0x0F0A;
  my.SET_G616_EVENT = 0x0F0C;
  my.SET_TIME_WEIGHTED_AVERAGE_EVENT = 0x0F0E;
  my.SET_TIME_WEIGHTED_AVERAGE_PERIOD_EVENT = 0x0F10;
  my.BLUETOOTH_DSP_STATUS_CHANGED_EVENT = 0x0F30;
  my.BLUETOOTH_DSP_STATUS_CHANGED_LONG_EVENT = 0x0F32;
  my.BLUETOOTH_DSP_LOAD_CHANGED_EVENT = 0x0F34;
  my.DSP_PARAMETERS_EVENT = 0x0F42;
  //Section Security-related Spokes compatibility (0x0Fnn continued)
  my.SET_FEATURE_LOCK_EVENT = 0x0F12;
  //Section HAL Interface (0x11nn)
  my.HAL_CURRENT_SCENARIO_EVENT = 0x1100;
  my.HAL_CONFIGURE_VOLUME_EVENT = 0x1102;
  my.HAL_EQ_CHANGED_EVENT = 0x1104;
  //Section Global Exceptions (0x00nn)
  //Section Specific Exceptions
  //Section Wearable messages (0xFFnn)
  my.SUBSCRIBE_TO_SERVICES_EVENT = 0xFF0A;
  my.SUBSCRIBED_SERVICE_DATA_EVENT = 0xFF0D;
  my.SERVICE_CONFIGURATION_CHANGED_EVENT = 0xFF00;
  my.SERVICE_CALIBRATION_CHANGED_EVENT = 0xFF01;
  my.APPLICATION_CONFIGURATION_CHANGED_EVENT = 0xFF02;
  my.APPLICATION_ACTION_RESULT_EVENT = 0xFF03;
  my.PASS_THROUGH_PROTOCOL_EVENT = 0xFF0F;
//END EVENTS  //COMMANDS
  //Section Testing - Test Automation Messages (0x10nn)
  my.TEST_INTERFACE_ENABLE_DISABLE_COMMAND = 0x1000;
  my.BUTTON_SIMULATION_COMMAND = 0x1002;
  my.INDIRECT_EVENT_SIMULATION_COMMAND = 0x1004;
  my.RAW_BUTTONTEST_EVENT_ENABLE_DISABLE_COMMAND = 0x1007;
  my.VOICE_RECOGNITION_TEST_EVENT_ENABLE_DISABLE_COMMAND = 0x100A;
  my.TEXT_TO_SPEECH_TEST_COMMAND = 0x100C;
  my.RAW_DATA_EVENT_ENABLE_DISABLE_COMMAND = 0x100E;
  my.RAW_DATA_COMMAND = 0x1010;
  my.MFI_TEST_COMMAND = 0x1018;
  my.CAPSENSE_TEST_COMMAND = 0x101A;
  //Section Wearing state (0x02nn)
  my.AUTO_ANSWER_ON_DON_COMMAND = 0x0204;
  my.CONFIGURE_AUTO_PAUSE_MEDIA_COMMAND = 0x0208;
  my.CONFIGURE_AUTO_TRANSFER_CALL_COMMAND = 0x020C;
  my.CONFIGURE_AUTO_LOCK_CALL_BUTTON_COMMAND = 0x0210;
  my.CONFIGURE_WEARING_SENSOR_ENABLED_COMMAND = 0x0216;
  my.CONFIGURE_AUTO_MUTE_CALL_COMMAND = 0x0218;
  //Section General Configuration (0x04nn)
  my.CONFIGURE_MUTE_TONE_VOLUME_COMMAND = 0x0400;
  my.CONFIGURATION_FOR_A_CONNECTED_HEADSET_COMMAND = 0x0401;
  my.CONFIGURE_SECOND_INBOUND_CALL_RING_TYPE_COMMAND = 0x0404;
  my.CONFIGURE_MUTE_OFF_VP_COMMAND = 0x0407;
  my.SET_SCO_OPEN_TONE_ENABLE_COMMAND = 0x0408;
  my.CONFIGURE_OLI_FEATURE_COMMAND = 0x0409;
  my.CONFIGURE_MUTE_ALERT_COMMAND = 0x040A;
  //Section Advanced Features (0x08nn)
  my.CONFIGURE_SIGNAL_STRENGTH_EVENTS_COMMAND = 0x0800;
  my.DSP_TUNING_MESSAGE_COMMAND = 0x0801;
  my.PLATFORM_SPECIFIC_INSTRUMENTATION_MESSAGE_COMMAND = 0x0803;
  my.CONFIGURE_CALLER_ANNOUNCEMENT_COMMAND = 0x0804;
  my.MANUFACTURING_TEST_MESSAGE_COMMAND = 0x0805;
  my.CONFIGURE_FIND_HEADSET_LED_ALERT_COMMAND = 0x0808;
  my.ENABLE_TXPOWER_REPORTING_COMMAND = 0x0810;
  my.CONFIGURE_DEVICE_POWER_STATE_COMMAND = 0x0814;
  //Section General Information (0x0Ann)
  my.TATTOO_SERIAL_NUMBER_COMMAND = 0x0A01;
  my.TATTOO_BUILD_CODE_COMMAND = 0x0A03;
  my.PART_NUMBER_COMMAND = 0x0A05;
  my.USER_ID_COMMAND = 0x0A06;
  my.FIRST_DATE_USED_COMMAND = 0x0A07;
  my.CONFIGURE_VR_CALL_REJECT_AND_ANSWER_COMMAND = 0x0A08;
  my.LAST_DATE_USED_COMMAND = 0x0A09;
  my.LAST_DATE_CONNECTED_COMMAND = 0x0A0B;
  my.CONFIGURE_A2DP_COMMAND = 0x0A0C;
  my.TIME_USED_COMMAND = 0x0A0D;
  my.USER_DEFINED_STORAGE_COMMAND = 0x0A0F;
  my.SET_VOCALYST_PHONE_NUMBER_COMMAND = 0x0A12;
  my.VOCALYST_INFO_NUMBER_COMMAND = 0x0A16;
  my.SET_GENES_GUID_COMMAND = 0x0A1E;
  my.CONFIGURE_MUTE_REMINDER_TIMING_COMMAND = 0x0A20;
  my.SET_PAIRING_MODE_COMMAND = 0x0A24;
  my.CONFIGURE_SPOKEN_ANSWER_IGNORE_COMMAND = 0x0A2E;
  my.CONFIGURE_LYNC_DIAL_TONE_ON_CALL_PRESS_COMMAND = 0x0A32;
  my.CLEAR_TOMBSTONE_COMMAND = 0x0A3A;
  my.BLUETOOTH_CONNECTION_PRIORITY_COMMAND = 0x0A44;
  my.BLUETOOTH_CONNECT_DISCONNECT_COMMAND = 0x0A46;
  my.BLUETOOTH_DELETE_PAIRING_COMMAND = 0x0A48;
  my.BLUETOOTH_ADD_PAIRING_COMMAND = 0x0A4A;
  //Section General (0x0Cnn)
  //Section Device Status (0x0Enn)
  my.MICROPHONE_MUTE_STATE_COMMAND = 0x0E01;
  my.TRANSMIT_AUDIO_STATE_COMMAND = 0x0E03;
  my.CALL_ANSWER_COMMAND = 0x0E04;
  my.RECEIVE_AUDIO_STATE_COMMAND = 0x0E05;
  my.CALL_END_COMMAND = 0x0E06;
  my.LED_STATUS_GENERIC_COMMAND = 0x0E07;
  my.SET_AUDIO_TRANSMIT_GAIN_COMMAND = 0x0E08;
  my.HEADSET_AVAILABLE_COMMAND = 0x0E09;
  my.SET_SPEAKER_VOLUME_COMMAND = 0x0E0A;
  my.TRAINING_HEADSET_CONNECTION_COMMAND = 0x0E0B;
  my.MAKE_CALL_COMMAND = 0x0E0C;
  my.REDIAL_COMMAND = 0x0E0E;
  my.FLASH_CALL_COMMAND = 0x0E10;
  my.CONFIGURE_CURRENT_LANGUAGE_COMMAND = 0x0E1A;
  my.REMOVE_PARTITION_INFORMATION_COMMAND = 0x0E1C;
  //Section General compatibility with Spokes (0x0Fnn)
  my.SET_RINGTONE_COMMAND = 0x0F02;
  my.SET_AUDIO_BANDWIDTH_COMMAND = 0x0F04;
  my.SET_RINGTONE_VOLUME_COMMAND = 0x0F06;
  my.SET_DEFAULT_OUTBOUND_INTERFACE_COMMAND = 0x0F08;
  my.SET_TONE_CONTROL_COMMAND = 0x0F1A;
  my.SET_AUDIO_SENSING_COMMAND = 0x0F1C;
  my.SET_INTELLISTAND_AUTO_ANSWER_COMMAND = 0x0F1E;
  my.SET_AUTO_CONNECT_TO_MOBILE_COMMAND = 0x0F20;
  my.SET_STOP_AUTO_CONNECT_ON_DOCK_COMMAND = 0x0F22;
  my.SET_BLUETOOTH_ENABLED_COMMAND = 0x0F24;
  my.SET_OVER_THE_AIR_SUBSCRIPTION_COMMAND = 0x0F26;
  my.SET_SYSTEM_TONE_VOLUME_COMMAND = 0x0F28;
  my.SET_POWER_LEVEL_COMMAND = 0x0F2A;
  my.SET_MOBILE_VOICE_COMMANDS = 0x0F2C;
  my.SET_VOLUME_CONTROL_ORIENTATION_COMMAND = 0x0F2E;
  my.SET_DEFAULT_FEATURE_COMMAND = 0x0F13;
  //Section DSP-related Spokes compatibility (0x0Fnn continued)
  my.AAL_ACOUSTIC_INCIDENT_REPORTING_ENABLE_COMMAND = 0x0F01;
  my.AAL_ACOUSTIC_INCIDENT_REPORTING_THRESHOLDS_COMMAND = 0x0F03;
  my.AAL_ACOUSTIC_INCIDENT_REPORT_COMMAND = 0x0F05;
  my.AAL_TWA_REPORTING_ENABLE_COMMAND = 0x0F07;
  my.AAL_TWA_REPORTING_TIME_PERIOD_COMMAND = 0x0F09;
  my.SET_ANTI_STARTLE_COMMAND = 0x0F0A;
  my.AAL_TWA_REPORT_COMMAND = 0x0F0B;
  my.SET_G616_COMMAND = 0x0F0C;
  my.CONVERSATION_DYNAMICS_REPORTING_ENABLE_COMMAND = 0x0F0D;
  my.SET_TIME_WEIGHTED_AVERAGE_COMMAND = 0x0F0E;
  my.CONVERSATION_DYNAMICS_REPORTING_TIME_PERIOD_COMMAND = 0x0F0F;
  my.SET_TIME_WEIGHTED_AVERAGE_PERIOD_COMMAND = 0x0F10;
  my.CONVERSATION_DYNAMICS_REPORT_COMMAND = 0x0F11;
  my.BLUETOOTH_DSP_SEND_MESSAGE_COMMAND = 0x0F30;
  my.BLUETOOTH_DSP_SEND_MESSAGE_LONG_COMMAND = 0x0F32;
  my.BLUETOOTH_DSP_LOAD_COMMAND = 0x0F34;
  my.SET_DSP_PARAMETERS_COMMAND = 0x0F42;
  my.DSP_UPDATE_PARAMETERS_COMMAND = 0x0F44;
  //Section Security-related Spokes compatibility (0x0Fnn continued)
  my.SET_FEATURE_LOCK_COMMAND = 0x0F12;
  //Section HAL Interface (0x11nn)
  my.HAL_CURRENT_SCENARIO_COMMAND = 0x1100;
  my.HAL_CONFIGURE_VOLUME_COMMAND = 0x1102;
  my.HAL_CONFIGURE_EQ_COMMAND = 0x1104;
  //Section Global Exceptions (0x00nn)
  //Section Specific Exceptions
  //Section Wearable messages (0xFFnn)
  my.CONFIGURE_SERVICES_COMMAND = 0xFF00;
  my.CALIBRATE_SERVICES_COMMAND = 0xFF01;
  my.CONFIGURE_APPLICATION_COMMAND = 0xFF02;
  my.PERFORM_APPLICATION_ACTION_COMMAND = 0xFF03;
  my.SUBSCRIBE_TO_SERVICES_COMMAND = 0xFF0A;
  my.PASS_THROUGH_PROTOCOL_COMMAND = 0xFF0F;
  var supportedCommands = [];
  supportedCommands.push(my.TEST_INTERFACE_ENABLE_DISABLE_COMMAND);
  supportedCommands.push(my.BUTTON_SIMULATION_COMMAND);
  supportedCommands.push(my.INDIRECT_EVENT_SIMULATION_COMMAND);
  supportedCommands.push(my.RAW_BUTTONTEST_EVENT_ENABLE_DISABLE_COMMAND);
  supportedCommands.push(my.VOICE_RECOGNITION_TEST_EVENT_ENABLE_DISABLE_COMMAND);
  supportedCommands.push(my.TEXT_TO_SPEECH_TEST_COMMAND);
  supportedCommands.push(my.RAW_DATA_EVENT_ENABLE_DISABLE_COMMAND);
  supportedCommands.push(my.RAW_DATA_COMMAND);
  supportedCommands.push(my.MFI_TEST_COMMAND);
  supportedCommands.push(my.CAPSENSE_TEST_COMMAND);
  supportedCommands.push(my.AUTO_ANSWER_ON_DON_COMMAND);
  supportedCommands.push(my.CONFIGURE_AUTO_PAUSE_MEDIA_COMMAND);
  supportedCommands.push(my.CONFIGURE_AUTO_TRANSFER_CALL_COMMAND);
  supportedCommands.push(my.CONFIGURE_AUTO_LOCK_CALL_BUTTON_COMMAND);
  supportedCommands.push(my.CONFIGURE_WEARING_SENSOR_ENABLED_COMMAND);
  supportedCommands.push(my.CONFIGURE_AUTO_MUTE_CALL_COMMAND);
  supportedCommands.push(my.CONFIGURE_MUTE_TONE_VOLUME_COMMAND);
  supportedCommands.push(my.CONFIGURATION_FOR_A_CONNECTED_HEADSET_COMMAND);
  supportedCommands.push(my.CONFIGURE_SECOND_INBOUND_CALL_RING_TYPE_COMMAND);
  supportedCommands.push(my.CONFIGURE_MUTE_OFF_VP_COMMAND);
  supportedCommands.push(my.SET_SCO_OPEN_TONE_ENABLE_COMMAND);
  supportedCommands.push(my.CONFIGURE_OLI_FEATURE_COMMAND);
  supportedCommands.push(my.CONFIGURE_MUTE_ALERT_COMMAND);
  supportedCommands.push(my.CONFIGURE_SIGNAL_STRENGTH_EVENTS_COMMAND);
  supportedCommands.push(my.DSP_TUNING_MESSAGE_COMMAND);
  supportedCommands.push(my.PLATFORM_SPECIFIC_INSTRUMENTATION_MESSAGE_COMMAND);
  supportedCommands.push(my.CONFIGURE_CALLER_ANNOUNCEMENT_COMMAND);
  supportedCommands.push(my.MANUFACTURING_TEST_MESSAGE_COMMAND);
  supportedCommands.push(my.CONFIGURE_FIND_HEADSET_LED_ALERT_COMMAND);
  supportedCommands.push(my.ENABLE_TXPOWER_REPORTING_COMMAND);
  supportedCommands.push(my.CONFIGURE_DEVICE_POWER_STATE_COMMAND);
  supportedCommands.push(my.TATTOO_SERIAL_NUMBER_COMMAND);
  supportedCommands.push(my.TATTOO_BUILD_CODE_COMMAND);
  supportedCommands.push(my.PART_NUMBER_COMMAND);
  supportedCommands.push(my.USER_ID_COMMAND);
  supportedCommands.push(my.FIRST_DATE_USED_COMMAND);
  supportedCommands.push(my.CONFIGURE_VR_CALL_REJECT_AND_ANSWER_COMMAND);
  supportedCommands.push(my.LAST_DATE_USED_COMMAND);
  supportedCommands.push(my.LAST_DATE_CONNECTED_COMMAND);
  supportedCommands.push(my.CONFIGURE_A2DP_COMMAND);
  supportedCommands.push(my.TIME_USED_COMMAND);
  supportedCommands.push(my.USER_DEFINED_STORAGE_COMMAND);
  supportedCommands.push(my.SET_VOCALYST_PHONE_NUMBER_COMMAND);
  supportedCommands.push(my.VOCALYST_INFO_NUMBER_COMMAND);
  supportedCommands.push(my.SET_GENES_GUID_COMMAND);
  supportedCommands.push(my.CONFIGURE_MUTE_REMINDER_TIMING_COMMAND);
  supportedCommands.push(my.SET_PAIRING_MODE_COMMAND);
  supportedCommands.push(my.CONFIGURE_SPOKEN_ANSWER_IGNORE_COMMAND);
  supportedCommands.push(my.CONFIGURE_LYNC_DIAL_TONE_ON_CALL_PRESS_COMMAND);
  supportedCommands.push(my.CLEAR_TOMBSTONE_COMMAND);
  supportedCommands.push(my.BLUETOOTH_CONNECTION_PRIORITY_COMMAND);
  supportedCommands.push(my.BLUETOOTH_CONNECT_DISCONNECT_COMMAND);
  supportedCommands.push(my.BLUETOOTH_DELETE_PAIRING_COMMAND);
  supportedCommands.push(my.BLUETOOTH_ADD_PAIRING_COMMAND);
  supportedCommands.push(my.MICROPHONE_MUTE_STATE_COMMAND);
  supportedCommands.push(my.TRANSMIT_AUDIO_STATE_COMMAND);
  supportedCommands.push(my.CALL_ANSWER_COMMAND);
  supportedCommands.push(my.RECEIVE_AUDIO_STATE_COMMAND);
  supportedCommands.push(my.CALL_END_COMMAND);
  supportedCommands.push(my.LED_STATUS_GENERIC_COMMAND);
  supportedCommands.push(my.SET_AUDIO_TRANSMIT_GAIN_COMMAND);
  supportedCommands.push(my.HEADSET_AVAILABLE_COMMAND);
  supportedCommands.push(my.SET_SPEAKER_VOLUME_COMMAND);
  supportedCommands.push(my.TRAINING_HEADSET_CONNECTION_COMMAND);
  supportedCommands.push(my.MAKE_CALL_COMMAND);
  supportedCommands.push(my.REDIAL_COMMAND);
  supportedCommands.push(my.FLASH_CALL_COMMAND);
  supportedCommands.push(my.CONFIGURE_CURRENT_LANGUAGE_COMMAND);
  supportedCommands.push(my.REMOVE_PARTITION_INFORMATION_COMMAND);
  supportedCommands.push(my.SET_RINGTONE_COMMAND);
  supportedCommands.push(my.SET_AUDIO_BANDWIDTH_COMMAND);
  supportedCommands.push(my.SET_RINGTONE_VOLUME_COMMAND);
  supportedCommands.push(my.SET_DEFAULT_OUTBOUND_INTERFACE_COMMAND);
  supportedCommands.push(my.SET_TONE_CONTROL_COMMAND);
  supportedCommands.push(my.SET_AUDIO_SENSING_COMMAND);
  supportedCommands.push(my.SET_INTELLISTAND_AUTO_ANSWER_COMMAND);
  supportedCommands.push(my.SET_AUTO_CONNECT_TO_MOBILE_COMMAND);
  supportedCommands.push(my.SET_STOP_AUTO_CONNECT_ON_DOCK_COMMAND);
  supportedCommands.push(my.SET_BLUETOOTH_ENABLED_COMMAND);
  supportedCommands.push(my.SET_OVER_THE_AIR_SUBSCRIPTION_COMMAND);
  supportedCommands.push(my.SET_SYSTEM_TONE_VOLUME_COMMAND);
  supportedCommands.push(my.SET_POWER_LEVEL_COMMAND);
  supportedCommands.push(my.SET_MOBILE_VOICE_COMMANDS);
  supportedCommands.push(my.SET_VOLUME_CONTROL_ORIENTATION_COMMAND);
  supportedCommands.push(my.SET_DEFAULT_FEATURE_COMMAND);
  supportedCommands.push(my.AAL_ACOUSTIC_INCIDENT_REPORTING_ENABLE_COMMAND);
  supportedCommands.push(my.AAL_ACOUSTIC_INCIDENT_REPORTING_THRESHOLDS_COMMAND);
  supportedCommands.push(my.AAL_ACOUSTIC_INCIDENT_REPORT_COMMAND);
  supportedCommands.push(my.AAL_TWA_REPORTING_ENABLE_COMMAND);
  supportedCommands.push(my.AAL_TWA_REPORTING_TIME_PERIOD_COMMAND);
  supportedCommands.push(my.SET_ANTI_STARTLE_COMMAND);
  supportedCommands.push(my.AAL_TWA_REPORT_COMMAND);
  supportedCommands.push(my.SET_G616_COMMAND);
  supportedCommands.push(my.CONVERSATION_DYNAMICS_REPORTING_ENABLE_COMMAND);
  supportedCommands.push(my.SET_TIME_WEIGHTED_AVERAGE_COMMAND);
  supportedCommands.push(my.CONVERSATION_DYNAMICS_REPORTING_TIME_PERIOD_COMMAND);
  supportedCommands.push(my.SET_TIME_WEIGHTED_AVERAGE_PERIOD_COMMAND);
  supportedCommands.push(my.CONVERSATION_DYNAMICS_REPORT_COMMAND);
  supportedCommands.push(my.BLUETOOTH_DSP_SEND_MESSAGE_COMMAND);
  supportedCommands.push(my.BLUETOOTH_DSP_SEND_MESSAGE_LONG_COMMAND);
  supportedCommands.push(my.BLUETOOTH_DSP_LOAD_COMMAND);
  supportedCommands.push(my.SET_DSP_PARAMETERS_COMMAND);
  supportedCommands.push(my.DSP_UPDATE_PARAMETERS_COMMAND);
  supportedCommands.push(my.SET_FEATURE_LOCK_COMMAND);
  supportedCommands.push(my.HAL_CURRENT_SCENARIO_COMMAND);
  supportedCommands.push(my.HAL_CONFIGURE_VOLUME_COMMAND);
  supportedCommands.push(my.HAL_CONFIGURE_EQ_COMMAND);
  supportedCommands.push(my.CONFIGURE_SERVICES_COMMAND);
  supportedCommands.push(my.CALIBRATE_SERVICES_COMMAND);
  supportedCommands.push(my.CONFIGURE_APPLICATION_COMMAND);
  supportedCommands.push(my.PERFORM_APPLICATION_ACTION_COMMAND);
  supportedCommands.push(my.SUBSCRIBE_TO_SERVICES_COMMAND);
  supportedCommands.push(my.PASS_THROUGH_PROTOCOL_COMMAND);
//COMMAND DEFINED VALUES
  my.TYPE_BUTTONACTIONSKP = 0x00;
  my.TYPE_BUTTONACTIONMKP = 0x01;
  my.TYPE_BUTTONACTIONLKP = 0x02;
  my.TYPE_BUTTONACTIONVLKP = 0x03;
  my.TYPE_BUTTONACTIONDKP = 0x04;
  my.TYPE_BUTTONACTIONVVLKP = 0x05;
  my.TYPE_BUTTONACTIONSLKP = 0x06;
  my.TYPE_BUTTONACTIONPRESS = 0x07;
  my.TYPE_BUTTONACTIONRELEASE = 0x08;
  my.TYPE_BUTTONIDCALLANSWEREND = 0x0000;
  my.TYPE_BUTTONIDMUTE = 0x0001;
  my.TYPE_BUTTONIDVOLUMEUP = 0x0002;
  my.TYPE_BUTTONIDVOLUMEDOWN = 0x0003;
  my.TYPE_BUTTONIDMOBILECALLANSWEREND = 0x0004;
  my.TYPE_BUTTONIDCOMPUTERCALLANSWEREND = 0x0005;
  my.TYPE_BUTTONIDDESKPHONECALLANSWEREND = 0x0006;
  my.TYPE_BUTTONIDHOOK = 0x0007;
  my.TYPE_BUTTONIDVR = 0x0008;
  my.TYPE_BUTTONIDPOWER = 0x0009;
  my.TYPE_BUTTONIDDECTSUBSCRIPTION = 0x000A;
  my.TYPE_BUTTONIDBLUETOOTHPAIRING = 0x000B;
  my.TYPE_INDIRECTEVENTHEADSETWEARINGSTATE = 0x00;
  my.TYPE_INDIRECTEVENTBATTERYSTATUSMONITORING = 0x01;
  my.TYPE_INDIRECTEVENTVOICERECOGNITION = 0x02;
  my.TYPE_INDIRECTEVENTPROXIMITY = 0x03;
  my.TYPE_INDIRECTEVENTVOICEPROMPTGENERATION = 0x04;
  my.TYPE_INDIRECTEVENTLEDINDICATIONGENERATION = 0x05;
  my.TYPE_INDIRECTEVENTCHARGERCONNECTIONSTATE = 0x06;
  my.TYPE_INDIRECTEVENTBATTERYLEVELCHANGE = 0x07;
  my.TYPE_INDIRECTEVENTUSBAUDIOCHANGE = 0x08;
  my.TYPE_INDIRECTEVENTQDCONNECTIONSTATE = 0x09;
  my.TYPE_INDIRECTEVENTAALACOUSTICINCIDENTREPORT = 0x0A;
  my.TYPE_INDIRECTEVENTAALTWAREPORT = 0x0B;
  my.TYPE_INDIRECTEVENTCONVERSATIONDYNAMICSREPORT = 0x0C;
  my.TYPE_INDIRECTEVENTYCABLECONNECTIONSTATE = 0x0D;
  my.TYPE_INDIRECTEVENTHEADSETWEARINGSTATEDOFF = 0x00;
  my.TYPE_INDIRECTEVENTHEADSETWEARINGSTATEDON = 0x01;
  my.TYPE_INDIRECTEVENTBATTERYSTATUSMONITORINGSETTALKTIMETOMAX = 0;
  my.TYPE_INDIRECTEVENTBATTERYSTATUSMONITORINGANNOUNCETHECURRENTTALKTIME = 1;
  my.TYPE_INDIRECTEVENTBATTERYSTATUSMONITORINGSETTALKTIMEINMINUTES = 2;
  my.TYPE_INDIRECTEVENTCHARGERCONNECTIONSTATEDISCONNECTED = 0;
  my.TYPE_INDIRECTEVENTCHARGERCONNECTIONSTATECONNECTED = 1;
  my.TYPE_INDIRECTEVENTBATTERYLEVELFULL = 0;
  my.TYPE_INDIRECTEVENTBATTERYLEVELHIGH = 1;
  my.TYPE_INDIRECTEVENTBATTERYLEVELMEDIUM = 2;
  my.TYPE_INDIRECTEVENTBATTERYLEVELLOW = 3;
  my.TYPE_INDIRECTEVENTBATTERYLEVELEMPTY = 4;
  my.TYPE_INDIRECTEVENTBATTERYLEVELUNKNOWN = 5;
  my.TYPE_INDIRECTEVENTUSBTELEPHONYAUDIOOFF = 0;
  my.TYPE_INDIRECTEVENTUSBTELEPHONYAUDIOON = 1;
  my.TYPE_INDIRECTEVENTUSBMUSICAUDIOOFF = 2;
  my.TYPE_INDIRECTEVENTUSBMUSICAUDIOON = 3;
  my.TYPE_INDIRECTEVENTQDCONNECTIONSTATEDISCONNECTED = 0x00;
  my.TYPE_INDIRECTEVENTQDCONNECTIONSTATECONNECTED = 0x01;
  my.TYPE_INDIRECTEVENTYCABLECONNECTIONSTATEDISCONNECTED = 0x00;
  my.TYPE_INDIRECTEVENTYCABLECONNECTIONSTATECONNECTED = 0x01;
  my.TYPE_RESETDOFFBASELINES = 40;
  my.TYPE_ENTERTESTMODE = 48;
  my.TYPE_EXITTESTMODE = 60;
  my.TYPE_VOLUMEOFF = 0;
  my.TYPE_VOLUMELOW = 1;
  my.TYPE_VOLUMESTANDARD = 2;
  my.TYPE_HTOPNEW = 0x00;
  my.TYPE_HTOPLEGACY = 0x01;
  my.TYPE_RINGTYPENONE = 0;
  my.TYPE_RINGTYPEONCE = 1;
  my.TYPE_RINGTYPECONTINUOUS = 2;
  my.TYPE_ENABLE = 1;
  my.TYPE_DISABLE = 0;
  my.TYPE_DONOTANNOUNCECALLERS = 0x00;
  my.TYPE_ANNOUNCEALLCALLERS = 0xFF;
  my.TYPE_POWEROFF = 0x00;
  my.TYPE_POWERON = 0x01;
  my.TYPE_RESTART = 0x02;
  my.TYPE_HIBERNATE = 0x03;
  my.TYPE_UPGRADE = 0x04;
  my.TYPE_SPEAKERVOLUMERELATIVEUPDOWN = 0x00;
  my.TYPE_SPEAKERVOLUMEABSOLUTEPERCENTAGE = 0x01;
  my.TYPE_SPEAKERVOLUMEABSOLUTEDB = 0x02;
  my.TYPE_SPEAKERVOLUMEQ8DOT8FORMAT = 0x03;
  my.TYPE_LANGUAGEIDENGLISHUS = 0x0409;
  my.TYPE_LANGUAGEIDENGLISHUK = 0x0809;
  my.TYPE_LANGUAGEIDJAPANESE = 0x0411;
  my.TYPE_LANGUAGEIDPORTUGUESEBRAZIL = 0x0416;
  my.TYPE_LANGUAGEIDPORTUGUESEPORTUGAL = 0x0816;
  my.TYPE_LANGUAGEIDFRENCHFRANCE = 0x040C;
  my.TYPE_LANGUAGEIDSPANISHMEXICO = 0x080A;
  my.TYPE_BANDWIDTHNARROWBAND = 1;
  my.TYPE_BANDWIDTHWIDEBAND = 2;
  my.TYPE_INTERFACEPSTN = 0;
  my.TYPE_INTERFACEUSB = 1;
  my.TYPE_INTERFACEMOBILE = 2;
  my.TYPE_TONELEVELMAXBASS = 0;
  my.TYPE_TONELEVELMIDBASS = 1;
  my.TYPE_TONELEVELMINBASS = 2;
  my.TYPE_TONELEVELNOBOOST = 3;
  my.TYPE_TONELEVELMINTREBLE = 4;
  my.TYPE_TONELEVELMIDTREBLE = 5;
  my.TYPE_TONELEVELMAXTREBLE = 6;
  my.TYPE_POWERLEVELFIXEDLOW = 0;
  my.TYPE_POWERLEVELADAPTIVEMEDIUM = 1;
  my.TYPE_POWERLEVELADAPTIVEHIGH = 2;
  my.TYPE_RIGHT = 0;
  my.TYPE_LEFT = 1;
  my.TYPE_TWAOFF = 0;
  my.TYPE_TWA85DB = 1;
  my.TYPE_TWA80DB = 2;
  my.TYPE_TWAPERIOD2HOURS = 1;
  my.TYPE_TWAPERIOD4HOURS = 2;
  my.TYPE_TWAPERIOD6HOURS = 3;
  my.TYPE_TWAPERIOD8HOURS = 4;
  my.TYPE_CURRENT = 0;
  my.TYPE_MIXEDGAMING = 1;
  my.TYPE_MIXEDGAMINGNOCHAT = 2;
  my.TYPE_MIXEDGAMINGCHATIN = 3;
  my.TYPE_CONFERENCE = 4;
  my.TYPE_PHONE = 5;
  my.TYPE_MEDIA = 6;
  my.TYPE_GAMING = 7;
  my.TYPE_UI_SCROLLMESSAGE = 0x0000;
  my.TYPE_UI_MARQUEE = 0x0001;
  my.TYPE_UI_DISPLAYFLIP = 0x0002;
  my.TYPE_UI_DISPLAYROTATE = 0x0003;
  my.TYPE_UI_DISPLAYMESSAGE = 0x0004;
  my.TYPE_UI_DISPLAYTOGGLE = 0x0005;
  my.TYPE_UI_DISPLAYINVERT = 0x0006;
  my.TYPE_UI_DISPLAYCLEAR = 0x0007;
  my.TYPE_UI_DISPLAYPUNCTUATION = 0x0008;
  my.TYPE_UI_DISPLAYICON = 0x0009;
  my.TYPE_RTC_CONFIGURE = 0x0000;
  my.TYPE_NFC_SETNDEF = 0x0000;
  my.TYPE_NFC_WRITE = 0x0001;
  my.TYPE_HEADORIENTATION_CAL = 0x0000;
  my.TYPE_PEDOMETER_CAL = 0x0000;
  my.TYPE_FREEFALL_CAL = 0x0000;
  my.TYPE_TAPS_CAL = 0x0000;
  my.TYPE_AMBIENTTEMP1_CAL = 0x0000;
  my.TYPE_AMBIENTTEMP2_CAL = 0x0000;
  my.TYPE_SKINTEMP_CAL = 0x0000;
  my.TYPE_OPTICALSENSOR_CAL = 0x0000;
  my.TYPE_FEATUREID_DISPLAYREADOUT = 0x0000;
  my.TYPE_FEATUREID_UNITS = 0x0001;
  my.TYPE_FEATUREID_LOCKONPOWERUP = 0x0002;
  my.TYPE_FEATUREID_LOCKONDOFF = 0x0003;
  my.TYPE_FEATUREID_ENABLEBUTTONLOCK = 0x0004;
  my.TYPE_FEATUREID_ENABLEPANICSEQUENCE = 0x0005;
  my.TYPE_FEATUREID_DATEANDTIME = 0x0006;
  my.TYPE_APPLICATIONID_AUDIOPROMPT = 0x0000;
  my.TYPE_APPLICATIONID_HAPTICPROMPT = 0x0001;
  my.TYPE_APPLICATIONID_DIALOG = 0x0002;
  my.TYPE_APPLICATIONID_LOCK = 0x0003;
  my.TYPE_AUDIOPROMPTCANNED = 0x0000;
  my.TYPE_AUDIOPROMPTTTS = 0x0001;
  my.TYPE_AUDIOPROMPTWAV = 0x0002;
  my.TYPE_HAPTICPROMPTCANNED = 0x0000;
  my.TYPE_HAPTICPROMPTCUSTOM = 0x0001;
  my.TYPE_DIALOGALERT = 0x0000;
  my.TYPE_DIALOGYESNO = 0x0001;
  my.TYPE_DIALOGENTERONENUMBER = 0x0002;
  my.TYPE_DIALOGCHOOSEONE = 0x0003;
  my.TYPE_DIALOGCHOOSEMULTI = 0x0004;
  my.TYPE_LOCKCONFIG = 0x0000;
  my.TYPE_SERVICEID_HEADORIENTATION = 0x0000;
  my.TYPE_SERVICEID_HEADING = 0x0001;
  my.TYPE_SERVICEID_PEDOMETER = 0x0002;
  my.TYPE_SERVICEID_FREEFALL = 0x0003;
  my.TYPE_SERVICEID_TAPS = 0x0004;
  my.TYPE_SERVICEID_MAGNETOMETERCALIBRATIONSTATUS = 0x0005;
  my.TYPE_SERVICEID_GYROSCOPECALIBRATIONSTATUS = 0x0006;
  my.TYPE_SERVICEID_VERSIONS = 0x0007;
  my.TYPE_SERVICEID_HUMIDITY = 0x0008;
  my.TYPE_SERVICEID_LIGHT = 0x0009;
  my.TYPE_SERVICEID_OPTICALPROXIMITY = 0x000a;
  my.TYPE_SERVICEID_AMBIENTTEMP1 = 0x000b;
  my.TYPE_SERVICEID_AMBIENTTEMP2 = 0x000c;
  my.TYPE_SERVICEID_SKINTEMP = 0x000d;
  my.TYPE_SERVICEID_SKINCONDUCTIVITY = 0x000e;
  my.TYPE_SERVICEID_AMBIENTPRESSURE = 0x000f;
  my.TYPE_SERVICEID_HEARTRATE = 0x0010;
  my.TYPE_SERVICEID_UI = 0x0011;
  my.TYPE_SERVICEID_RTC = 0x0012;
  my.TYPE_SERVICEID_ACCELERATION = 0x0013;
  my.TYPE_SERVICEID_ANGULARVELOCITY = 0x0014;
  my.TYPE_SERVICEID_MAGNETICFIELD = 0x0015;
  my.TYPE_SERVICEID_VOICEEVENT = 0x0016;
  my.TYPE_CHARACTERISTIC_HEADORIENTATION_QUATERNIONDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_HEADORIENTATION_EULERANGLESDATA = 0x0001;
  my.TYPE_CHARACTERISTIC_PEDOMETER_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_FREEFALL_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_TAPS_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_MAGNETOMETERCALIBRATIONSTATUS_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_GYROSCOPECALIBRATIONSTATUS_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_VERSIONS_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_HUMIDITY_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_LIGHT_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_OPTICALPROXIMITY_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_AMBIENTTEMP1_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_AMBIENTTEMP2_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_SKINTEMP_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_SKINCONDUCTIVITY_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_AMBIENTPRESSURE_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_HEARTRATE_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_UIBUTTON_PRESS = 0x0000;
  my.TYPE_CHARACTERISTIC_DISPLAYREADOUTDISPLAY_HEARTRATE = 0x0000;
  my.TYPE_CHARACTERISTIC_DISPLAYREADOUTDISPLAY_PEDOMETER = 0x0001;
  my.TYPE_CHARACTERISTIC_DISPLAYREADOUTDISPLAY_COMPASS = 0x0002;
  my.TYPE_CHARACTERISTIC_DISPLAYREADOUTDISPLAY_ALTITUDE = 0x0003;
  my.TYPE_CHARACTERISTIC_DISPLAYREADOUTDISPLAY_AMBIENTTEMP = 0x0004;
  my.TYPE_CHARACTERISTIC_DISPLAYREADOUTDISPLAY_AMBIENTHUMIDITY = 0x0005;
  my.TYPE_CHARACTERISTIC_DISPLAYREADOUTDISPLAY_SKINTEMP = 0x0006;
  my.TYPE_CHARACTERISTIC_DISPLAYREADOUTDISPLAY_SKINHUMIDITY = 0x0007;
  my.TYPE_CHARACTERISTIC_DISPLAYREADOUTDISPLAY_LIGHT = 0x0008;
  my.TYPE_CHARACTERISTIC_UNITS_CONFIGURATION = 0x0000;
  my.TYPE_CHARACTERISTIC_LOCKONPOWERUP_CONFIGURATION = 0x0000;
  my.TYPE_CHARACTERISTIC_LOCKONDOFF_CONFIGURATION = 0x0000;
  my.TYPE_CHARACTERISTIC_ENABLEBUTTONLOCK_CONFIGURATION = 0x0000;
  my.TYPE_CHARACTERISTIC_ENABLEPANICSEQUENCE_CONFIGURATION = 0x0000;
  my.TYPE_CHARACTERISTIC_DATEANDTIME_FORMAT = 0x0000;
  my.TYPE_CHARACTERISTIC_UISCROLL_DISPLAYMESSAGE = 0x0000;
  my.TYPE_CHARACTERISTIC_UIMARQUEE_DISPLAYMESSAGE = 0x0001;
  my.TYPE_CHARACTERISTIC_UI_FLIPDISPLAY = 0x0002;
  my.TYPE_CHARACTERISTIC_UI_ROTATEDISPLAY = 0x0003;
  my.TYPE_CHARACTERISTIC_UI_DISPLAYMESSAGE = 0x0004;
  my.TYPE_CHARACTERISTIC_UI_TOGGLEDISPLAY = 0x0005;
  my.TYPE_CHARACTERISTIC_UI_INVERTDISPLAY = 0x0006;
  my.TYPE_CHARACTERISTIC_UI_CLEARDISPLAY = 0x0007;
  my.TYPE_CHARACTERISTIC_UI_DISPLAYPUNCTUATIONSTATE = 0x0008;
  my.TYPE_CHARACTERISTIC_UI_DISPLAYICONSTATE = 0x0009;
  my.TYPE_CHARACTERISTIC_RTC_CONFIGURE = 0x0000;
  my.TYPE_CHARACTERISTIC_NFC_WRITEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_ACCELERATION_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_ANGULARVELOCITY_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_MAGNETICFIELD_SERVICEDATA = 0x0000;
  my.TYPE_CHARACTERISTIC_LAUNCHIT = 0x0000;
  my.TYPE_MODEOFF = 0;
  my.TYPE_MODEONCCHANGE = 1;
  my.TYPE_MODEPERIODIC = 2;
  my.TYPE_PROTOCOLNONE = 0;
  my.TYPE_PROTOCOLAPDU = 1;


//END COMMANDS  //SETTINGS
  //Section Testing - Test Automation Messages (0x10nn)
  my.BUTTON_SIMULATION_CAPABILITIES_SETTING = 0x1001;
  my.INDIRECT_EVENT_SIMULATION_CAPABILITIES_SETTING = 0x1003;
  my.DEVICE_STATUS_CAPABILITIES_SETTING = 0x1005;
  my.DEVICE_STATUS_SETTING = 0x1006;
  my.CUSTOM_DEVICE_STATUS_SETTING = 0x1007;
  my.SINGLE_NVRAM_CONFIGURATION_READ_SETTING = 0x1009;
  my.SUPPORTED_TEST_INTERFACE_MESSAGE_IDS_SETTING = 0x1011;
  my.SINGLE_NVRAM_CONFIGURATION_READ_WITH_ADDRESS_ECHO_SETTING = 0x1019;
  my.HARDWARE_BATTERY_METER_SETTING = 0x101C;
  my.SOFTWARE_COULOMB_COUNTER_SETTING = 0x101E;
  //Section Wearing state (0x02nn)
  my.WEARING_STATE_SETTING = 0x0202;
  my.AUTO_ANSWER_ON_DON_SETTING = 0x0206;
  my.AUTO_PAUSE_MEDIA_SETTING = 0x020A;
  my.AUTO_TRANSFER_CALL_SETTING = 0x020E;
  my.GET_AUTO_LOCK_CALL_BUTTON_SETTING = 0x0212;
  my.WEARING_SENSOR_ENABLED_SETTING = 0x0214;
  my.AUTO_MUTE_CALL_SETTING = 0x021A;
  my.MIC_BOOM_POSITION_SETTING = 0x021C;
  //Section General Configuration (0x04nn)
  my.CONFIGURATION_FOR_A_CONNECTED_HEADSET_SETTING = 0x0401;
  my.GET_MUTE_TONE_VOLUME_SETTING = 0x0402;
  my.GET_SECOND_INBOUND_CALL_RING_TYPE_SETTING = 0x0406;
  my.GET_MUTE_OFF_VP_SETTING = 0x0407;
  my.GET_SCO_OPEN_TONE_ENABLE_SETTING = 0x0408;
  my.GET_OLI_FEATURE_ENABLE_SETTING = 0x0409;
  my.MUTE_ALERT_SETTING = 0x040A;
  //Section Advanced Features (0x08nn)
  my.CURRENT_SIGNAL_STRENGTH_SETTING = 0x0800;
  my.CALLER_ANNOUNCEMENT_SETTING = 0x0804;
  my.SIGNAL_STRENGTH_CONFIGURATION_SETTING = 0x0806;
  my.FIND_HEADSET_LED_ALERT_STATUS_SETTING = 0x0808;
  my.TXPOWER_REPORTING_SETTING = 0x0810;
  my.VOICE_SILENT_DETECTION_SETTING = 0x0815;
  //Section General Information (0x0Ann)
  my.PRODUCT_NAME_SETTING = 0x0A00;
  my.TATTOO_SERIAL_NUMBER_SETTING = 0x0A01;
  my.USB_PID_SETTING = 0x0A02;
  my.TATTOO_BUILD_CODE_SETTING = 0x0A03;
  my.FIRMWARE_VERSION_SETTING = 0x0A04;
  my.PART_NUMBER_SETTING = 0x0A05;
  my.USER_ID_SETTING = 0x0A06;
  my.FIRST_DATE_USED_SETTING = 0x0A07;
  my.LAST_DATE_USED_SETTING = 0x0A09;
  my.LAST_DATE_CONNECTED_SETTING = 0x0A0B;
  my.TIME_USED_SETTING = 0x0A0D;
  my.USER_DEFINED_STORAGE_SETTING = 0x0A0F;
  my.VR_CALL_REJECT_AND_ANSWER_SETTING = 0x0A0A;
  my.A2DP_IS_ENABLED_SETTING = 0x0A0E;
  my.VOCALYST_PHONE_NUMBER_SETTING = 0x0A10;
  my.VOCALYST_INFO_NUMBER_SETTING = 0x0A14;
  my.BATTERY_INFO_SETTING = 0x0A1A;
  my.BATTERY_EXTENDED_INFO_SETTING = 0x0A1B;
  my.GENES_GUID_SETTING = 0x0A1E;
  my.MUTE_REMINDER_TIMING_SETTING = 0x0A22;
  my.PAIRING_MODE_SETTING = 0x0A26;
  my.SPOKEN_ANSWER_IGNORE_COMMAND_SETTING = 0x0A30;
  my.LYNC_DIAL_TONE_ON_CALL_PRESS_SETTING = 0x0A34;
  my.MANUFACTURER_SETTING = 0x0A36;
  my.TOMBSTONE_SETTING = 0x0A38;
  my.BLUETOOTH_ADDRESS_SETTING = 0x0A40;
  my.BLUETOOTH_CONNECTION_SETTING = 0x0A42;
  my.DECKARD_VERSION_SETTING = 0x0AFE;
  //Section General (0x0Cnn)
  my.CONNECTION_STATUS_SETTING = 0x0C00;
  //Section Device Status (0x0Enn)
  my.CALL_STATUS_SETTING = 0x0E02;
  my.MICROPHONE_MUTE_STATE_SETTING = 0x0E01;
  my.TRANSMIT_AUDIO_STATE_SETTING = 0x0E03;
  my.RECEIVE_AUDIO_STATE_SETTING = 0x0E05;
  my.LED_STATUS_GENERIC_SETTING = 0x0E07;
  my.HEADSET_AVAILABLE_SETTING = 0x0E09;
  my.TRAINING_HEADSET_CONNECTION_SETTING = 0x0E0B;
  my.SPEAKER_VOLUME_SETTING = 0x0E0A;
  my.SPOKEN_LANGUAGE_SETTING = 0x0E1A;
  my.SUPPORTED_LANGUAGES_SETTING = 0x0E1B;
  my.GET_PARTITION_INFORMATION_SETTING = 0x0E1C;
  my.AUDIO_STATUS_SETTING = 0x0E1E;
  my.LED_STATUS_SETTING = 0x0E20;
  my.HEADSET_CALL_STATUS_SETTING = 0x0E22;
  my.EXTENDED_CALL_STATUS_SETTING = 0x0E32;
  //Section General compatibility with Spokes (0x0Fnn)
  my.DEVICE_INTERFACES_SETTING = 0x0F00;
  my.RINGTONES_SETTING = 0x0F02;
  my.BANDWIDTHS_SETTING = 0x0F04;
  my.RINGTONE_VOLUMES_SETTING = 0x0F06;
  my.DEFAULT_OUTBOUND_INTERFACE_SETTING = 0x0F08;
  my.TONE_CONTROLS_SETTING = 0x0F1A;
  my.AUDIO_SENSING_SETTING = 0x0F1C;
  my.INTELLISTAND_AUTO_ANSWER_SETTING = 0x0F1E;
  my.AUTO_CONNECT_TO_MOBILE_SETTING = 0x0F20;
  my.STOP_AUTO_CONNECT_ON_DOCK_SETTING = 0x0F22;
  my.BLUETOOTH_ENABLED_SETTING = 0x0F24;
  my.OVER_THE_AIR_SUBSCRIPTION_SETTING = 0x0F26;
  my.SYSTEM_TONE_VOLUME_SETTING = 0x0F28;
  my.POWER_LEVEL_SETTING = 0x0F2A;
  my.MOBILE_VOICE_COMMANDS_SETTING = 0x0F2C;
  my.VOLUME_CONTROL_ORIENTATION_SETTING = 0x0F2E;
  //Section DSP-related Spokes compatibility (0x0Fnn continued)
  my.AAL_ACOUSTIC_INCIDENT_REPORTING_ENABLE_SETTING = 0x0F01;
  my.AAL_ACOUSTIC_INCIDENT_REPORTING_THRESHOLDS_SETTING = 0x0F03;
  my.AAL_ACOUSTIC_INCIDENT_REPORT_SETTING = 0x0F05;
  my.AAL_TWA_REPORTING_ENABLE_SETTING = 0x0F07;
  my.AAL_TWA_REPORTING_TIME_PERIOD_SETTING = 0x0F09;
  my.ANTI_STARTLE_SETTING = 0x0F0A;
  my.AAL_TWA_REPORT_SETTING = 0x0F0B;
  my.G616_SETTING = 0x0F0C;
  my.CONVERSATION_DYNAMICS_REPORTING_ENABLE_SETTING = 0x0F0D;
  my.TIME_WEIGHTED_AVERAGE_SETTING = 0x0F0E;
  my.CONVERSATION_DYNAMICS_REPORTING_TIME_PERIOD_SETTING = 0x0F0F;
  my.TIME_WEIGHTED_AVERAGE_PERIOD_SETTING = 0x0F10;
  my.CONVERSATION_DYNAMICS_REPORT_SETTING = 0x0F11;
  my.GET_SUPPORTED_DSP_CAPABILITIES_SETTING = 0x0F40;
  my.GET_DSP_PARAMETERS_SETTING = 0x0F42;
  //Section Security-related Spokes compatibility (0x0Fnn continued)
  my.FEATURE_LOCK_SETTING = 0x0F12;
  my.FEATURE_LOCK_MASK_SETTING = 0x0F14;
  //Section HAL Interface (0x11nn)
  my.HAL_CURRENT_SCENARIO_SETTING = 0x1100;
  my.HAL_CURRENT_VOLUME_SETTING = 0x1102;
  my.HAL_CURRENT_EQ_SETTING = 0x1104;
  my.HAL_GENERIC_SETTING = 0x1106;
  //Section Global Exceptions (0x00nn)
  //Section Specific Exceptions
  //Section Wearable messages (0xFFnn)
  my.QUERY_SERVICES_CONFIGURATION_DATA_SETTING = 0xFF00;
  my.QUERY_SERVICES_CALIBRATION_DATA_SETTING = 0xFF01;
  my.QUERY_APPLICATION_CONFIGURATION_DATA_SETTING = 0xFF02;
  my.QUERY_SERVICES_DATA_SETTING = 0xFF0D;
  my.GET_DEVICE_INFO_SETTING = 0xFF20;
 var supportedSettings = [];
  supportedSettings.push(my.BUTTON_SIMULATION_CAPABILITIES_SETTING);
  supportedSettings.push(my.INDIRECT_EVENT_SIMULATION_CAPABILITIES_SETTING);
  supportedSettings.push(my.DEVICE_STATUS_CAPABILITIES_SETTING);
  supportedSettings.push(my.DEVICE_STATUS_SETTING);
  supportedSettings.push(my.CUSTOM_DEVICE_STATUS_SETTING);
  supportedSettings.push(my.SINGLE_NVRAM_CONFIGURATION_READ_SETTING);
  supportedSettings.push(my.SUPPORTED_TEST_INTERFACE_MESSAGE_IDS_SETTING);
  supportedSettings.push(my.SINGLE_NVRAM_CONFIGURATION_READ_WITH_ADDRESS_ECHO_SETTING);
  supportedSettings.push(my.HARDWARE_BATTERY_METER_SETTING);
  supportedSettings.push(my.SOFTWARE_COULOMB_COUNTER_SETTING);
  supportedSettings.push(my.WEARING_STATE_SETTING);
  supportedSettings.push(my.AUTO_ANSWER_ON_DON_SETTING);
  supportedSettings.push(my.AUTO_PAUSE_MEDIA_SETTING);
  supportedSettings.push(my.AUTO_TRANSFER_CALL_SETTING);
  supportedSettings.push(my.GET_AUTO_LOCK_CALL_BUTTON_SETTING);
  supportedSettings.push(my.WEARING_SENSOR_ENABLED_SETTING);
  supportedSettings.push(my.AUTO_MUTE_CALL_SETTING);
  supportedSettings.push(my.MIC_BOOM_POSITION_SETTING);
  supportedSettings.push(my.CONFIGURATION_FOR_A_CONNECTED_HEADSET_SETTING);
  supportedSettings.push(my.GET_MUTE_TONE_VOLUME_SETTING);
  supportedSettings.push(my.GET_SECOND_INBOUND_CALL_RING_TYPE_SETTING);
  supportedSettings.push(my.GET_MUTE_OFF_VP_SETTING);
  supportedSettings.push(my.GET_SCO_OPEN_TONE_ENABLE_SETTING);
  supportedSettings.push(my.GET_OLI_FEATURE_ENABLE_SETTING);
  supportedSettings.push(my.MUTE_ALERT_SETTING);
  supportedSettings.push(my.CURRENT_SIGNAL_STRENGTH_SETTING);
  supportedSettings.push(my.CALLER_ANNOUNCEMENT_SETTING);
  supportedSettings.push(my.SIGNAL_STRENGTH_CONFIGURATION_SETTING);
  supportedSettings.push(my.FIND_HEADSET_LED_ALERT_STATUS_SETTING);
  supportedSettings.push(my.TXPOWER_REPORTING_SETTING);
  supportedSettings.push(my.VOICE_SILENT_DETECTION_SETTING);
  supportedSettings.push(my.PRODUCT_NAME_SETTING);
  supportedSettings.push(my.TATTOO_SERIAL_NUMBER_SETTING);
  supportedSettings.push(my.USB_PID_SETTING);
  supportedSettings.push(my.TATTOO_BUILD_CODE_SETTING);
  supportedSettings.push(my.FIRMWARE_VERSION_SETTING);
  supportedSettings.push(my.PART_NUMBER_SETTING);
  supportedSettings.push(my.USER_ID_SETTING);
  supportedSettings.push(my.FIRST_DATE_USED_SETTING);
  supportedSettings.push(my.LAST_DATE_USED_SETTING);
  supportedSettings.push(my.LAST_DATE_CONNECTED_SETTING);
  supportedSettings.push(my.TIME_USED_SETTING);
  supportedSettings.push(my.USER_DEFINED_STORAGE_SETTING);
  supportedSettings.push(my.VR_CALL_REJECT_AND_ANSWER_SETTING);
  supportedSettings.push(my.A2DP_IS_ENABLED_SETTING);
  supportedSettings.push(my.VOCALYST_PHONE_NUMBER_SETTING);
  supportedSettings.push(my.VOCALYST_INFO_NUMBER_SETTING);
  supportedSettings.push(my.BATTERY_INFO_SETTING);
  supportedSettings.push(my.BATTERY_EXTENDED_INFO_SETTING);
  supportedSettings.push(my.GENES_GUID_SETTING);
  supportedSettings.push(my.MUTE_REMINDER_TIMING_SETTING);
  supportedSettings.push(my.PAIRING_MODE_SETTING);
  supportedSettings.push(my.SPOKEN_ANSWER_IGNORE_COMMAND_SETTING);
  supportedSettings.push(my.LYNC_DIAL_TONE_ON_CALL_PRESS_SETTING);
  supportedSettings.push(my.MANUFACTURER_SETTING);
  supportedSettings.push(my.TOMBSTONE_SETTING);
  supportedSettings.push(my.BLUETOOTH_ADDRESS_SETTING);
  supportedSettings.push(my.BLUETOOTH_CONNECTION_SETTING);
  supportedSettings.push(my.DECKARD_VERSION_SETTING);
  supportedSettings.push(my.CONNECTION_STATUS_SETTING);
  supportedSettings.push(my.CALL_STATUS_SETTING);
  supportedSettings.push(my.MICROPHONE_MUTE_STATE_SETTING);
  supportedSettings.push(my.TRANSMIT_AUDIO_STATE_SETTING);
  supportedSettings.push(my.RECEIVE_AUDIO_STATE_SETTING);
  supportedSettings.push(my.LED_STATUS_GENERIC_SETTING);
  supportedSettings.push(my.HEADSET_AVAILABLE_SETTING);
  supportedSettings.push(my.TRAINING_HEADSET_CONNECTION_SETTING);
  supportedSettings.push(my.SPEAKER_VOLUME_SETTING);
  supportedSettings.push(my.SPOKEN_LANGUAGE_SETTING);
  supportedSettings.push(my.SUPPORTED_LANGUAGES_SETTING);
  supportedSettings.push(my.GET_PARTITION_INFORMATION_SETTING);
  supportedSettings.push(my.AUDIO_STATUS_SETTING);
  supportedSettings.push(my.LED_STATUS_SETTING);
  supportedSettings.push(my.HEADSET_CALL_STATUS_SETTING);
  supportedSettings.push(my.EXTENDED_CALL_STATUS_SETTING);
  supportedSettings.push(my.DEVICE_INTERFACES_SETTING);
  supportedSettings.push(my.RINGTONES_SETTING);
  supportedSettings.push(my.BANDWIDTHS_SETTING);
  supportedSettings.push(my.RINGTONE_VOLUMES_SETTING);
  supportedSettings.push(my.DEFAULT_OUTBOUND_INTERFACE_SETTING);
  supportedSettings.push(my.TONE_CONTROLS_SETTING);
  supportedSettings.push(my.AUDIO_SENSING_SETTING);
  supportedSettings.push(my.INTELLISTAND_AUTO_ANSWER_SETTING);
  supportedSettings.push(my.AUTO_CONNECT_TO_MOBILE_SETTING);
  supportedSettings.push(my.STOP_AUTO_CONNECT_ON_DOCK_SETTING);
  supportedSettings.push(my.BLUETOOTH_ENABLED_SETTING);
  supportedSettings.push(my.OVER_THE_AIR_SUBSCRIPTION_SETTING);
  supportedSettings.push(my.SYSTEM_TONE_VOLUME_SETTING);
  supportedSettings.push(my.POWER_LEVEL_SETTING);
  supportedSettings.push(my.MOBILE_VOICE_COMMANDS_SETTING);
  supportedSettings.push(my.VOLUME_CONTROL_ORIENTATION_SETTING);
  supportedSettings.push(my.AAL_ACOUSTIC_INCIDENT_REPORTING_ENABLE_SETTING);
  supportedSettings.push(my.AAL_ACOUSTIC_INCIDENT_REPORTING_THRESHOLDS_SETTING);
  supportedSettings.push(my.AAL_ACOUSTIC_INCIDENT_REPORT_SETTING);
  supportedSettings.push(my.AAL_TWA_REPORTING_ENABLE_SETTING);
  supportedSettings.push(my.AAL_TWA_REPORTING_TIME_PERIOD_SETTING);
  supportedSettings.push(my.ANTI_STARTLE_SETTING);
  supportedSettings.push(my.AAL_TWA_REPORT_SETTING);
  supportedSettings.push(my.G616_SETTING);
  supportedSettings.push(my.CONVERSATION_DYNAMICS_REPORTING_ENABLE_SETTING);
  supportedSettings.push(my.TIME_WEIGHTED_AVERAGE_SETTING);
  supportedSettings.push(my.CONVERSATION_DYNAMICS_REPORTING_TIME_PERIOD_SETTING);
  supportedSettings.push(my.TIME_WEIGHTED_AVERAGE_PERIOD_SETTING);
  supportedSettings.push(my.CONVERSATION_DYNAMICS_REPORT_SETTING);
  supportedSettings.push(my.GET_SUPPORTED_DSP_CAPABILITIES_SETTING);
  supportedSettings.push(my.GET_DSP_PARAMETERS_SETTING);
  supportedSettings.push(my.FEATURE_LOCK_SETTING);
  supportedSettings.push(my.FEATURE_LOCK_MASK_SETTING);
  supportedSettings.push(my.HAL_CURRENT_SCENARIO_SETTING);
  supportedSettings.push(my.HAL_CURRENT_VOLUME_SETTING);
  supportedSettings.push(my.HAL_CURRENT_EQ_SETTING);
  supportedSettings.push(my.HAL_GENERIC_SETTING);
  supportedSettings.push(my.QUERY_SERVICES_CONFIGURATION_DATA_SETTING);
  supportedSettings.push(my.QUERY_SERVICES_CALIBRATION_DATA_SETTING);
  supportedSettings.push(my.QUERY_APPLICATION_CONFIGURATION_DATA_SETTING);
  supportedSettings.push(my.QUERY_SERVICES_DATA_SETTING);
  supportedSettings.push(my.GET_DEVICE_INFO_SETTING);
//END SETTINGS  //EXCEPTIONS
  my.TEST_INTERFACE_IS_DISABLED_EXCEPTION = 0x1000;
  my.NO_GENES_GUID_EXCEPTION = 0x0A1E;
  my.GENES_GUID_ALREADY_SET_EXCEPTION = 0x0A20;
  my.FEATURE_LOCK_ID_NOT_VALID_EXCEPTION = 0x0F12;
  my.COMMAND_UNKNOWN_EXCEPTION = 0x0010;
  my.SETTING_UNKNOWN_EXCEPTION = 0x0012;
  my.INVALID_PACKET_LENGTH_EXCEPTION = 0x0014;
  my.INVALID_PACKET_TYPE_EXCEPTION = 0x0016;
  my.INVALID_MESSAGE_TYPE_EXCEPTION = 0x0018;
  my.MESSAGE_TOO_SHORT_EXCEPTION = 0x001A;
  my.MEMORY_ALLOCATION_FAILED_EXCEPTION = 0x001C;
  my.COMMAND_PEM_LOCKED_EXCEPTION = 0x001E;
  my.NUMBER_OUT_OF_RANGE_EXCEPTION = 0x0806;
  my.ILLEGAL_VALUE_EXCEPTION = 0x0808;
  my.INVALID_POWER_STATE_EXCEPTION = 0x0814;
  my.NO_TOMBSTONE_EXCEPTION = 0x0A38;
  my.INVALID_SERVICE_IDS_EXCEPTION = 0xFF90;
  my.INVALID_CHARACTERISTICS_OR_OPCODES_EXCEPTION = 0xFF91;
  my.INVALID_SERVICE_MODES_EXCEPTION = 0xFF92;
  my.INVALID_PAYLOAD_DATA_EXCEPTION = 0xFF93;
  my.DEVICE_NOT_READY_EXCEPTION = 0xFF94;
//END EXCEPTIONS
 
  //creates a command
  my.createCommand = function(commandId, options){
    if (!commandId) {
      throw "plt.msg.createCommand: command type not specified";
    }
    if (supportedCommands.indexOf(commandId) < 0) {
      throw "plt.msg.createCommand: command " + commandId + " has not been implemented yet...";
    }
    
    var msg = options ? options : {};
    msg.messageType = my.COMMAND_TYPE;
    msg.messageId = commandId;
    if(!msg.address){
        msg.address = new ArrayBuffer(BR_ADDRESS_SIZE);
    }
    switch (commandId) {
  
  case my.TEST_INTERFACE_ENABLE_DISABLE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.BUTTON_SIMULATION_COMMAND:
    var bufferSize = 1;
      var buttonIDsLength = msg.buttonIDs.length + 2;
      bufferSize += (buttonIDsLength * 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.buttonAction;
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & msg.buttonIDs.length) >> 8;
      data_view[index++] = (0x00FF & msg.buttonIDs.length);
      for(i = 0; i < msg.buttonIDs.length; i++){
        data_view[index++] = (0xFF00 & msg.buttonIDs[i]) >>  8;
        data_view[index++] = (0x00FF & msg.buttonIDs[i]);
      }
      msg.messageData = data;
      break;
  
  case my.INDIRECT_EVENT_SIMULATION_COMMAND:
    var bufferSize = 2;
      var eventParameter_view = new Uint8Array(msg.eventParameter);
      bufferSize += (eventParameter_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.indirectEvent) >>  8;
      data_view[index++] = (0x00FF & msg.indirectEvent);
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & eventParameter_view.length) >> 8;
      data_view[index++] = (0x00FF & eventParameter_view.length);
      for(i = 0; i < eventParameter_view.length; i++){
        data_view[index++] = eventParameter_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.RAW_BUTTONTEST_EVENT_ENABLE_DISABLE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.VOICE_RECOGNITION_TEST_EVENT_ENABLE_DISABLE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.TEXT_TO_SPEECH_TEST_COMMAND:
    var bufferSize = 0;
      var textLength = msg.text.length + 2;
      bufferSize += (textLength * 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & msg.text.length) >> 8;
      data_view[index++] = (0x00FF & msg.text.length);
      for(i = 0; i < msg.text.length; i++){
        var charCode = msg.text.charCodeAt(i);
        data_view[index++] = (0xFF00 & charCode) >>  8;
        data_view[index++] = (0x00FF & charCode);
      }
      msg.messageData = data;
      break;
      
  case my.MFI_TEST_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.command;
      msg.messageData = data;
      break;
  
  case my.CAPSENSE_TEST_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.command;
      msg.messageData = data;
      break;
  
  case my.AUTO_ANSWER_ON_DON_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_AUTO_PAUSE_MEDIA_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_AUTO_TRANSFER_CALL_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_AUTO_LOCK_CALL_BUTTON_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_WEARING_SENSOR_ENABLED_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_AUTO_MUTE_CALL_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_MUTE_TONE_VOLUME_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.muteToneVolume;
      msg.messageData = data;
      break;
  
  case my.CONFIGURATION_FOR_A_CONNECTED_HEADSET_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.configuration;
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_SECOND_INBOUND_CALL_RING_TYPE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.ringType;
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_MUTE_OFF_VP_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.SET_SCO_OPEN_TONE_ENABLE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_OLI_FEATURE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.oLIenable;
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_MUTE_ALERT_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.mode;
      msg.messageData = data;      data_view[index++] = msg.parameter;
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_SIGNAL_STRENGTH_EVENTS_COMMAND:
    var bufferSize = 11;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.connectionId;
      msg.messageData = data;      data_view[index++] = boolToByte(msg.enable);
      msg.messageData = data;      data_view[index++] = boolToByte(msg.dononly);
      msg.messageData = data;      data_view[index++] = boolToByte(msg.trend);
      msg.messageData = data;      data_view[index++] = boolToByte(msg.reportRssiAudio);
      msg.messageData = data;      data_view[index++] = boolToByte(msg.reportNearFarAudio);
      msg.messageData = data;      data_view[index++] = boolToByte(msg.reportNearFarToBase);
      msg.messageData = data;      data_view[index++] = msg.sensitivity;
      msg.messageData = data;      data_view[index++] = msg.nearThreshold;
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.maxTimeout) >>  8;
      data_view[index++] = (0x00FF & msg.maxTimeout);
      msg.messageData = data;
      break;
  
  case my.DSP_TUNING_MESSAGE_COMMAND:
    var bufferSize = 0;
      var data_view = new Uint8Array(msg.data);
      bufferSize += (data_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & data_view.length) >> 8;
      data_view[index++] = (0x00FF & data_view.length);
      for(i = 0; i < data_view.length; i++){
        data_view[index++] = data_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.PLATFORM_SPECIFIC_INSTRUMENTATION_MESSAGE_COMMAND:
    var bufferSize = 0;
      var data_view = new Uint8Array(msg.data);
      bufferSize += (data_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & data_view.length) >> 8;
      data_view[index++] = (0x00FF & data_view.length);
      for(i = 0; i < data_view.length; i++){
        data_view[index++] = data_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_CALLER_ANNOUNCEMENT_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.value;
      msg.messageData = data;
      break;
  
  case my.MANUFACTURING_TEST_MESSAGE_COMMAND:
    var bufferSize = 0;
      var data_view = new Uint8Array(msg.data);
      bufferSize += (data_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & data_view.length) >> 8;
      data_view[index++] = (0x00FF & data_view.length);
      for(i = 0; i < data_view.length; i++){
        data_view[index++] = data_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_FIND_HEADSET_LED_ALERT_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = boolToByte(msg.enable);
      msg.messageData = data;      data_view[index++] = msg.timeout;
      msg.messageData = data;
      break;
  
  case my.ENABLE_TXPOWER_REPORTING_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.connectionId;
      msg.messageData = data;      data_view[index++] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_DEVICE_POWER_STATE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.deviceState;
      msg.messageData = data;
      break;
  
  case my.TATTOO_SERIAL_NUMBER_COMMAND:
    var bufferSize = 0;
      var serialNumber_view = new Uint8Array(msg.serialNumber);
      bufferSize += (serialNumber_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & serialNumber_view.length) >> 8;
      data_view[index++] = (0x00FF & serialNumber_view.length);
      for(i = 0; i < serialNumber_view.length; i++){
        data_view[index++] = serialNumber_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.TATTOO_BUILD_CODE_COMMAND:
    var bufferSize = 0;
      var buildCode_view = new Uint8Array(msg.buildCode);
      bufferSize += (buildCode_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & buildCode_view.length) >> 8;
      data_view[index++] = (0x00FF & buildCode_view.length);
      for(i = 0; i < buildCode_view.length; i++){
        data_view[index++] = buildCode_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.PART_NUMBER_COMMAND:
    var bufferSize = 4;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF000000 & msg.partNumber) >>  24;
      data_view[index++] = (0x00FF0000 & msg.partNumber) >> 16;
      data_view[index++] = (0x0000FF00 & msg.partNumber) >>  8;
      data_view[index++] = (0x000000FF & msg.partNumber);
      msg.messageData = data;
      break;
  
  case my.USER_ID_COMMAND:
    var bufferSize = 0;
      var userID_view = new Uint8Array(msg.userID);
      bufferSize += (userID_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & userID_view.length) >> 8;
      data_view[index++] = (0x00FF & userID_view.length);
      for(i = 0; i < userID_view.length; i++){
        data_view[index++] = userID_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.FIRST_DATE_USED_COMMAND:
    var bufferSize = 8;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.month) >>  8;
      data_view[index++] = (0x00FF & msg.month);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.day) >>  8;
      data_view[index++] = (0x00FF & msg.day);
      msg.messageData = data;      data_view[index++] = (0xFF000000 & msg.year) >>  24;
      data_view[index++] = (0x00FF0000 & msg.year) >> 16;
      data_view[index++] = (0x0000FF00 & msg.year) >>  8;
      data_view[index++] = (0x000000FF & msg.year);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_VR_CALL_REJECT_AND_ANSWER_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.LAST_DATE_USED_COMMAND:
    var bufferSize = 8;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.month) >>  8;
      data_view[index++] = (0x00FF & msg.month);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.day) >>  8;
      data_view[index++] = (0x00FF & msg.day);
      msg.messageData = data;      data_view[index++] = (0xFF000000 & msg.year) >>  24;
      data_view[index++] = (0x00FF0000 & msg.year) >> 16;
      data_view[index++] = (0x0000FF00 & msg.year) >>  8;
      data_view[index++] = (0x000000FF & msg.year);
      msg.messageData = data;
      break;
  
  case my.LAST_DATE_CONNECTED_COMMAND:
    var bufferSize = 8;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.month) >>  8;
      data_view[index++] = (0x00FF & msg.month);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.day) >>  8;
      data_view[index++] = (0x00FF & msg.day);
      msg.messageData = data;      data_view[index++] = (0xFF000000 & msg.year) >>  24;
      data_view[index++] = (0x00FF0000 & msg.year) >> 16;
      data_view[index++] = (0x0000FF00 & msg.year) >>  8;
      data_view[index++] = (0x000000FF & msg.year);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_A2DP_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.TIME_USED_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.totalTime) >>  8;
      data_view[index++] = (0x00FF & msg.totalTime);
      msg.messageData = data;
      break;
  
  case my.USER_DEFINED_STORAGE_COMMAND:
    var bufferSize = 0;
      var data_view = new Uint8Array(msg.data);
      bufferSize += (data_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & data_view.length) >> 8;
      data_view[index++] = (0x00FF & data_view.length);
      for(i = 0; i < data_view.length; i++){
        data_view[index++] = data_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.SET_VOCALYST_PHONE_NUMBER_COMMAND:
    var bufferSize = 0;
      var vocalystPhoneNumberLength = msg.vocalystPhoneNumber.length + 2;
      bufferSize += (vocalystPhoneNumberLength * 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & msg.vocalystPhoneNumber.length) >> 8;
      data_view[index++] = (0x00FF & msg.vocalystPhoneNumber.length);
      for(i = 0; i < msg.vocalystPhoneNumber.length; i++){
        var charCode = msg.vocalystPhoneNumber.charCodeAt(i);
        data_view[index++] = (0xFF00 & charCode) >>  8;
        data_view[index++] = (0x00FF & charCode);
      }
      msg.messageData = data;
      break;
  
  case my.VOCALYST_INFO_NUMBER_COMMAND:
    var bufferSize = 0;
      var infoPhoneNumberLength = msg.infoPhoneNumber.length + 2;
      bufferSize += (infoPhoneNumberLength * 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & msg.infoPhoneNumber.length) >> 8;
      data_view[index++] = (0x00FF & msg.infoPhoneNumber.length);
      for(i = 0; i < msg.infoPhoneNumber.length; i++){
        var charCode = msg.infoPhoneNumber.charCodeAt(i);
        data_view[index++] = (0xFF00 & charCode) >>  8;
        data_view[index++] = (0x00FF & charCode);
      }
      msg.messageData = data;
      break;
  
  case my.SET_GENES_GUID_COMMAND:
    var bufferSize = 0;
      var guid_view = new Uint8Array(msg.guid);
      bufferSize += (guid_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & guid_view.length) >> 8;
      data_view[index++] = (0x00FF & guid_view.length);
      for(i = 0; i < guid_view.length; i++){
        data_view[index++] = guid_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_MUTE_REMINDER_TIMING_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.seconds) >>  8;
      data_view[index++] = (0x00FF & msg.seconds);
      msg.messageData = data;
      break;
  
  case my.SET_PAIRING_MODE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_SPOKEN_ANSWER_IGNORE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_LYNC_DIAL_TONE_ON_CALL_PRESS_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
    
  case my.BLUETOOTH_CONNECTION_PRIORITY_COMMAND:
    var bufferSize = 3;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.connectionOffset) >>  8;
      data_view[index++] = (0x00FF & msg.connectionOffset);
      msg.messageData = data;      data_view[index++] = boolToByte(msg.allowSmartDisconnect);
      msg.messageData = data;
      break;
  
  case my.BLUETOOTH_CONNECT_DISCONNECT_COMMAND:
    var bufferSize = 3;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.connectionOffset) >>  8;
      data_view[index++] = (0x00FF & msg.connectionOffset);
      msg.messageData = data;      data_view[index++] = boolToByte(msg.disconnect);
      msg.messageData = data;
      break;
  
  case my.BLUETOOTH_DELETE_PAIRING_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.connectionOffset) >>  8;
      data_view[index++] = (0x00FF & msg.connectionOffset);
      msg.messageData = data;
      break;
  
  case my.BLUETOOTH_ADD_PAIRING_COMMAND:
    var bufferSize = 12;
      var linkKeyLength = msg.linkKey.length + 2;
      bufferSize += (linkKeyLength * 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.connectionOffset) >>  8;
      data_view[index++] = (0x00FF & msg.connectionOffset);
      msg.messageData = data;      data_view[index++] = boolToByte(msg.persist);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.nap) >>  8;
      data_view[index++] = (0x00FF & msg.nap);
      msg.messageData = data;      data_view[index++] = msg.uap;
      msg.messageData = data;      data_view[index++] = (0xFF000000 & msg.lap) >>  24;
      data_view[index++] = (0x00FF0000 & msg.lap) >> 16;
      data_view[index++] = (0x0000FF00 & msg.lap) >>  8;
      data_view[index++] = (0x000000FF & msg.lap);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.linkKeyType) >>  8;
      data_view[index++] = (0x00FF & msg.linkKeyType);
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & msg.linkKey.length) >> 8;
      data_view[index++] = (0x00FF & msg.linkKey.length);
      for(i = 0; i < msg.linkKey.length; i++){
        data_view[index++] = (0xFF00 & msg.linkKey[i]) >>  8;
        data_view[index++] = (0x00FF & msg.linkKey[i]);
      }
      msg.messageData = data;
      break;
  
  case my.MICROPHONE_MUTE_STATE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.TRANSMIT_AUDIO_STATE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
    
  case my.RECEIVE_AUDIO_STATE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
    
  case my.LED_STATUS_GENERIC_COMMAND:
    var bufferSize = 0;
      var iD_view = new Uint8Array(msg.iD);
      bufferSize += (iD_view.length + 2);
      var color_view = new Uint8Array(msg.color);
      bufferSize += (color_view.length + 2);
      var state_view = new Uint8Array(msg.state);
      bufferSize += (state_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & iD_view.length) >> 8;
      data_view[index++] = (0x00FF & iD_view.length);
      for(i = 0; i < iD_view.length; i++){
        data_view[index++] = iD_view[i];
      }
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & color_view.length) >> 8;
      data_view[index++] = (0x00FF & color_view.length);
      for(i = 0; i < color_view.length; i++){
        data_view[index++] = color_view[i];
      }
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & state_view.length) >> 8;
      data_view[index++] = (0x00FF & state_view.length);
      for(i = 0; i < state_view.length; i++){
        data_view[index++] = state_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.SET_AUDIO_TRANSMIT_GAIN_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.gain;
      msg.messageData = data;
      break;
    
  case my.SET_SPEAKER_VOLUME_COMMAND:
    var bufferSize = 3;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.action;
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.volume) >>  8;
      data_view[index++] = (0x00FF & msg.volume);
      msg.messageData = data;
      break;
    
  case my.MAKE_CALL_COMMAND:
    var bufferSize = 0;
      var digitsLength = msg.digits.length + 2;
      bufferSize += (digitsLength * 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & msg.digits.length) >> 8;
      data_view[index++] = (0x00FF & msg.digits.length);
      for(i = 0; i < msg.digits.length; i++){
        var charCode = msg.digits.charCodeAt(i);
        data_view[index++] = (0xFF00 & charCode) >>  8;
        data_view[index++] = (0x00FF & charCode);
      }
      msg.messageData = data;
      break;
    
  case my.FLASH_CALL_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.value) >>  8;
      data_view[index++] = (0x00FF & msg.value);
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_CURRENT_LANGUAGE_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.languageId) >>  8;
      data_view[index++] = (0x00FF & msg.languageId);
      msg.messageData = data;
      break;
  
  case my.REMOVE_PARTITION_INFORMATION_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.partitionId) >>  8;
      data_view[index++] = (0x00FF & msg.partitionId);
      msg.messageData = data;
      break;
  
  case my.SET_RINGTONE_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.interfaceType;
      msg.messageData = data;      data_view[index++] = msg.ringTone;
      msg.messageData = data;
      break;
  
  case my.SET_AUDIO_BANDWIDTH_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.interfaceType;
      msg.messageData = data;      data_view[index++] = msg.bandwidth;
      msg.messageData = data;
      break;
  
  case my.SET_RINGTONE_VOLUME_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.interfaceType;
      msg.messageData = data;      data_view[index++] = msg.volume;
      msg.messageData = data;
      break;
  
  case my.SET_DEFAULT_OUTBOUND_INTERFACE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.interfaceType;
      msg.messageData = data;
      break;
  
  case my.SET_TONE_CONTROL_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.interfaceType;
      msg.messageData = data;      data_view[index++] = msg.toneLevel;
      msg.messageData = data;
      break;
  
  case my.SET_AUDIO_SENSING_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.SET_INTELLISTAND_AUTO_ANSWER_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.SET_AUTO_CONNECT_TO_MOBILE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.SET_STOP_AUTO_CONNECT_ON_DOCK_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.SET_BLUETOOTH_ENABLED_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.SET_OVER_THE_AIR_SUBSCRIPTION_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.SET_SYSTEM_TONE_VOLUME_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.volume;
      msg.messageData = data;
      break;
  
  case my.SET_POWER_LEVEL_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.powerLevel;
      msg.messageData = data;
      break;
  
  case my.SET_MOBILE_VOICE_COMMANDS:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.SET_VOLUME_CONTROL_ORIENTATION_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.orientation;
      msg.messageData = data;
      break;
    
  case my.AAL_ACOUSTIC_INCIDENT_REPORTING_ENABLE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.AAL_ACOUSTIC_INCIDENT_REPORTING_THRESHOLDS_COMMAND:
    var bufferSize = 3;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.gainThreshold;
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.timeThreshold) >>  8;
      data_view[index++] = (0x00FF & msg.timeThreshold);
      msg.messageData = data;
      break;
    
  case my.AAL_TWA_REPORTING_ENABLE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.AAL_TWA_REPORTING_TIME_PERIOD_COMMAND:
    var bufferSize = 4;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF000000 & msg.timePeriod) >>  24;
      data_view[index++] = (0x00FF0000 & msg.timePeriod) >> 16;
      data_view[index++] = (0x0000FF00 & msg.timePeriod) >>  8;
      data_view[index++] = (0x000000FF & msg.timePeriod);
      msg.messageData = data;
      break;
  
  case my.SET_ANTI_STARTLE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
    
  case my.SET_G616_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.CONVERSATION_DYNAMICS_REPORTING_ENABLE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.SET_TIME_WEIGHTED_AVERAGE_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.twa;
      msg.messageData = data;
      break;
  
  case my.CONVERSATION_DYNAMICS_REPORTING_TIME_PERIOD_COMMAND:
    var bufferSize = 4;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF000000 & msg.timePeriod) >>  24;
      data_view[index++] = (0x00FF0000 & msg.timePeriod) >> 16;
      data_view[index++] = (0x0000FF00 & msg.timePeriod) >>  8;
      data_view[index++] = (0x000000FF & msg.timePeriod);
      msg.messageData = data;
      break;
  
  case my.SET_TIME_WEIGHTED_AVERAGE_PERIOD_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.twa;
      msg.messageData = data;
      break;
    
  case my.BLUETOOTH_DSP_SEND_MESSAGE_COMMAND:
    var bufferSize = 10;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.messageid) >>  8;
      data_view[index++] = (0x00FF & msg.messageid);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.parametera) >>  8;
      data_view[index++] = (0x00FF & msg.parametera);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.parameterb) >>  8;
      data_view[index++] = (0x00FF & msg.parameterb);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.parameterc) >>  8;
      data_view[index++] = (0x00FF & msg.parameterc);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.parameterd) >>  8;
      data_view[index++] = (0x00FF & msg.parameterd);
      msg.messageData = data;
      break;
  
  case my.BLUETOOTH_DSP_SEND_MESSAGE_LONG_COMMAND:
    var bufferSize = 2;
      var parameter_view = new Uint8Array(msg.parameter);
      bufferSize += (parameter_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.messageid) >>  8;
      data_view[index++] = (0x00FF & msg.messageid);
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & parameter_view.length) >> 8;
      data_view[index++] = (0x00FF & parameter_view.length);
      for(i = 0; i < parameter_view.length; i++){
        data_view[index++] = parameter_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.BLUETOOTH_DSP_LOAD_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //default to off if no enabled flag is present
      data_view[index] = boolToByte(msg.enable);
      msg.messageData = data;
      break;
  
  case my.SET_DSP_PARAMETERS_COMMAND:
    var bufferSize = 4;
      var payloadLength = msg.payload.length + 2;
      bufferSize += (payloadLength * 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.codec;
      msg.messageData = data;      data_view[index++] = boolToByte(msg.storeIsVolatile);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.parameterIndex) >>  8;
      data_view[index++] = (0x00FF & msg.parameterIndex);
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & msg.payload.length) >> 8;
      data_view[index++] = (0x00FF & msg.payload.length);
      for(i = 0; i < msg.payload.length; i++){
        data_view[index++] = (0xFF00 & msg.payload[i]) >>  8;
        data_view[index++] = (0x00FF & msg.payload[i]);
      }
      msg.messageData = data;
      break;
  
  case my.DSP_UPDATE_PARAMETERS_COMMAND:
    var bufferSize = 1;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = msg.codec;
      msg.messageData = data;
      break;
  
  case my.SET_FEATURE_LOCK_COMMAND:
    var bufferSize = 0;
      var commandsLength = msg.commands.length + 2;
      bufferSize += (commandsLength * 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      //store the array length before adding the array
      data_view[index++] = (0xFF00 & msg.commands.length) >> 8;
      data_view[index++] = (0x00FF & msg.commands.length);
      for(i = 0; i < msg.commands.length; i++){
        data_view[index++] = (0xFF00 & msg.commands[i]) >>  8;
        data_view[index++] = (0x00FF & msg.commands[i]);
      }
      msg.messageData = data;
      break;
  
  case my.HAL_CURRENT_SCENARIO_COMMAND:
    var bufferSize = 2;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.scenario) >>  8;
      data_view[index++] = (0x00FF & msg.scenario);
      msg.messageData = data;
      break;
  
  case my.HAL_CONFIGURE_VOLUME_COMMAND:
    var bufferSize = 2;
      var volumes_view = new Uint8Array(msg.volumes);
      bufferSize += (volumes_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.scenario) >>  8;
      data_view[index++] = (0x00FF & msg.scenario);
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & volumes_view.length) >> 8;
      data_view[index++] = (0x00FF & volumes_view.length);
      for(i = 0; i < volumes_view.length; i++){
        data_view[index++] = volumes_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.HAL_CONFIGURE_EQ_COMMAND:
    var bufferSize = 5;
      var eQSettings_view = new Uint8Array(msg.eQSettings);
      bufferSize += (eQSettings_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.scenario) >>  8;
      data_view[index++] = (0x00FF & msg.scenario);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.numberOfEQs) >>  8;
      data_view[index++] = (0x00FF & msg.numberOfEQs);
      msg.messageData = data;      data_view[index++] = msg.eQId;
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & eQSettings_view.length) >> 8;
      data_view[index++] = (0x00FF & eQSettings_view.length);
      for(i = 0; i < eQSettings_view.length; i++){
        data_view[index++] = eQSettings_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_SERVICES_COMMAND:
    var bufferSize = 4;
      var configurationData_view = new Uint8Array(msg.configurationData);
      bufferSize += (configurationData_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.serviceID) >>  8;
      data_view[index++] = (0x00FF & msg.serviceID);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.characteristic) >>  8;
      data_view[index++] = (0x00FF & msg.characteristic);
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & configurationData_view.length) >> 8;
      data_view[index++] = (0x00FF & configurationData_view.length);
      for(i = 0; i < configurationData_view.length; i++){
        data_view[index++] = configurationData_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.CALIBRATE_SERVICES_COMMAND:
    var bufferSize = 4;
      var calibrationData_view = new Uint8Array(msg.calibrationData);
      bufferSize += (calibrationData_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.serviceID) >>  8;
      data_view[index++] = (0x00FF & msg.serviceID);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.characteristic) >>  8;
      data_view[index++] = (0x00FF & msg.characteristic);
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & calibrationData_view.length) >> 8;
      data_view[index++] = (0x00FF & calibrationData_view.length);
      for(i = 0; i < calibrationData_view.length; i++){
        data_view[index++] = calibrationData_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.CONFIGURE_APPLICATION_COMMAND:
    var bufferSize = 4;
      var configurationData_view = new Uint8Array(msg.configurationData);
      bufferSize += (configurationData_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.featureID) >>  8;
      data_view[index++] = (0x00FF & msg.featureID);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.characteristic) >>  8;
      data_view[index++] = (0x00FF & msg.characteristic);
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & configurationData_view.length) >> 8;
      data_view[index++] = (0x00FF & configurationData_view.length);
      for(i = 0; i < configurationData_view.length; i++){
        data_view[index++] = configurationData_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.PERFORM_APPLICATION_ACTION_COMMAND:
    var bufferSize = 4;
      var operatingData_view = new Uint8Array(msg.operatingData);
      bufferSize += (operatingData_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.applicationID) >>  8;
      data_view[index++] = (0x00FF & msg.applicationID);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.action) >>  8;
      data_view[index++] = (0x00FF & msg.action);
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & operatingData_view.length) >> 8;
      data_view[index++] = (0x00FF & operatingData_view.length);
      for(i = 0; i < operatingData_view.length; i++){
        data_view[index++] = operatingData_view[i];
      }
      msg.messageData = data;
      break;
  
  case my.SUBSCRIBE_TO_SERVICES_COMMAND:
    var bufferSize = 8;
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.serviceID) >>  8;
      data_view[index++] = (0x00FF & msg.serviceID);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.characteristic) >>  8;
      data_view[index++] = (0x00FF & msg.characteristic);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.mode) >>  8;
      data_view[index++] = (0x00FF & msg.mode);
      msg.messageData = data;      data_view[index++] = (0xFF00 & msg.period) >>  8;
      data_view[index++] = (0x00FF & msg.period);
      msg.messageData = data;
      break;
  
  case my.PASS_THROUGH_PROTOCOL_COMMAND:
    var bufferSize = 2;
      var dataBlob_view = new Uint8Array(msg.dataBlob);
      bufferSize += (dataBlob_view.length + 2);
      var data = new ArrayBuffer(bufferSize);
      var data_view = new Uint8Array(data);
      var index = 0;
      data_view[index++] = (0xFF00 & msg.protocolid) >>  8;
      data_view[index++] = (0x00FF & msg.protocolid);
      msg.messageData = data;      //store the array length before adding the array
      data_view[index++] = (0xFF00 & dataBlob_view.length) >> 8;
      data_view[index++] = (0x00FF & dataBlob_view.length);
      for(i = 0; i < dataBlob_view.length; i++){
        data_view[index++] = dataBlob_view[i];
      }
      msg.messageData = data;
      break;
    }
    var rawMessage = createRawMessage(msg);
    
    return my.parse(rawMessage);  
  };
  
  //creates a get setting message
  my.createGetSetting = function(settingId, options){
    if (!settingId) {
      throw "plt.msg.createGetSetting: command type not specified";
    }
    if (supportedSettings.indexOf(settingId) < 0) {
      throw "plt.msg.createGetSetting: setting " + settingId + " has not been implemented yet...";
    }
    
    var msg = options ? options : {};
    msg.messageType = my.GET_REQUEST_TYPE;
    msg.messageId = settingId;
    if(!msg.address){
        msg.address = new ArrayBuffer(BR_ADDRESS_SIZE);
    }
    switch(settingId){
                                          
       case my.SINGLE_NVRAM_CONFIGURATION_READ_SETTING:
          var bufferSize = 8;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = (0xFF00000000000000 & msg.configurationItemAddress) >> 56;
          data_view[index++] = (0x00FF000000000000 & msg.configurationItemAddress) >> 48;
          data_view[index++] = (0x0000FF0000000000 & msg.configurationItemAddress) >> 40;
          data_view[index++] = (0x000000FF00000000 & msg.configurationItemAddress) >> 32;
          data_view[index++] = (0x00000000FF000000 & msg.configurationItemAddress) >> 24;
          data_view[index++] = (0x0000000000FF0000 & msg.configurationItemAddress) >> 16;
          data_view[index++] = (0x000000000000FF00 & msg.configurationItemAddress) >>  8;
          data_view[index++] = (0x00000000000000FF & msg.configurationItemAddress);
          msg.messageData = data;  
              
       case my.SINGLE_NVRAM_CONFIGURATION_READ_WITH_ADDRESS_ECHO_SETTING:
          var bufferSize = 8;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = (0xFF00000000000000 & msg.configurationItemAddress) >> 56;
          data_view[index++] = (0x00FF000000000000 & msg.configurationItemAddress) >> 48;
          data_view[index++] = (0x0000FF0000000000 & msg.configurationItemAddress) >> 40;
          data_view[index++] = (0x000000FF00000000 & msg.configurationItemAddress) >> 32;
          data_view[index++] = (0x00000000FF000000 & msg.configurationItemAddress) >> 24;
          data_view[index++] = (0x0000000000FF0000 & msg.configurationItemAddress) >> 16;
          data_view[index++] = (0x000000000000FF00 & msg.configurationItemAddress) >>  8;
          data_view[index++] = (0x00000000000000FF & msg.configurationItemAddress);
          msg.messageData = data;  
                                                                                                                              
       case my.CURRENT_SIGNAL_STRENGTH_SETTING:
          var bufferSize = 1;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = msg.connectionId;
          msg.messageData = data;  
              
       case my.SIGNAL_STRENGTH_CONFIGURATION_SETTING:
          var bufferSize = 1;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = msg.connectionId;
          msg.messageData = data;  
              
       case my.TXPOWER_REPORTING_SETTING:
          var bufferSize = 1;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = msg.connectionId;
          msg.messageData = data;  
                                                                                                                                                                                                    
       case my.BLUETOOTH_CONNECTION_SETTING:
          var bufferSize = 2;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = (0xFF00 & msg.connectionOffset) >>  8;
          data_view[index++] = (0x00FF & msg.connectionOffset);
          msg.messageData = data;  
                                                                                           
       case my.GET_PARTITION_INFORMATION_SETTING:
          var bufferSize = 2;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = (0xFF00 & msg.partition) >>  8;
          data_view[index++] = (0x00FF & msg.partition);
          msg.messageData = data;  
                                                                                                                                                                                                                                                     
       case my.GET_DSP_PARAMETERS_SETTING:
          var bufferSize = 2;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = (0xFF00 & msg.ParameterIndex) >>  8;
          data_view[index++] = (0x00FF & msg.ParameterIndex);
          msg.messageData = data;  
                            
       case my.HAL_CURRENT_VOLUME_SETTING:
          var bufferSize = 0;
          var volumes_view = new Uint8Array(msg.volumes);
          bufferSize += (volumes_view.length + 2);
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          //store the array length before adding the array
          data_view[index++] = (0xFF00 & volumes_view.length) >> 8;
          data_view[index++] = (0x00FF & volumes_view.length);
          for(i = 0; i < volumes_view.length; i++){
            data_view[index++] = volumes_view[i];
          }
          msg.messageData = data;  
       
       case my.HAL_CURRENT_EQ_SETTING:
          var bufferSize = 0;
          var EQs_view = new Uint8Array(msg.EQs);
          bufferSize += (EQs_view.length + 2);
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          //store the array length before adding the array
          data_view[index++] = (0xFF00 & EQs_view.length) >> 8;
          data_view[index++] = (0x00FF & EQs_view.length);
          for(i = 0; i < EQs_view.length; i++){
            data_view[index++] = EQs_view[i];
          }
          msg.messageData = data;  
       
       case my.HAL_GENERIC_SETTING:
          var bufferSize = 0;
          var halGenericLength = msg.halGeneric.length + 2;
          bufferSize += (halGenericLength * 2);
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          //store the array length before adding the array
          data_view[index++] = (0xFF00 & msg.halGeneric.length) >> 8;
          data_view[index++] = (0x00FF & msg.halGeneric.length);
          for(i = 0; i < msg.halGeneric.length; i++){
             data_view[index++] = (0xFF00 & msg.halGeneric[i]) >>  8;
             data_view[index++] = (0x00FF & msg.halGeneric[i]);
          }
          msg.messageData = data;  
       
       case my.QUERY_SERVICES_CONFIGURATION_DATA_SETTING:
          var bufferSize = 2;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = (0xFF00 & msg.characteristic) >>  8;
          data_view[index++] = (0x00FF & msg.characteristic);
          msg.messageData = data;  
       
       case my.QUERY_SERVICES_CALIBRATION_DATA_SETTING:
          var bufferSize = 2;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = (0xFF00 & msg.characteristic) >>  8;
          data_view[index++] = (0x00FF & msg.characteristic);
          msg.messageData = data;  
       
       case my.QUERY_APPLICATION_CONFIGURATION_DATA_SETTING:
          var bufferSize = 2;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = (0xFF00 & msg.characteristic) >>  8;
          data_view[index++] = (0x00FF & msg.characteristic);
          msg.messageData = data;  
       
       case my.QUERY_SERVICES_DATA_SETTING:
          var bufferSize = 2;
          var data = new ArrayBuffer(bufferSize);
          var data_view = new Uint8Array(data);
          var index = 0;
          data_view[index++] = (0xFF00 & msg.characteristic) >>  8;
          data_view[index++] = (0x00FF & msg.characteristic);
          msg.messageData = data;  
             default:
       break;
    }
    var rawMessage = createRawMessage(msg);
    return my.parse(rawMessage); 
  };
  
  
  
  
  
  
  //parses a settings success message (response from a get settings message)
  var parseGetSettingResult = function(message){
    var payload = {};
    var data_view = new Uint8Array(message, BR_HEADER_SIZE);
    payload.messageId =  parseShort(0, data_view);
    switch(payload.messageId){
       
       case my.BUTTON_SIMULATION_CAPABILITIES_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Button Simulation Capabilities';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.supportedButtonIDs = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.INDIRECT_EVENT_SIMULATION_CAPABILITIES_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Indirect Event Simulation Capabilities';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.supportedIndirectEventIDs = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.DEVICE_STATUS_CAPABILITIES_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Device Status Capabilities';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.supportedDeviceStatusIDs = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.DEVICE_STATUS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Device Status';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.deviceStatusData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.CUSTOM_DEVICE_STATUS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Custom Device Status';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.deviceCustomStatusData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.SINGLE_NVRAM_CONFIGURATION_READ_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Single NVRAM Configuration Read';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.nvramConfiguration = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.SUPPORTED_TEST_INTERFACE_MESSAGE_IDS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Supported Test Interface Message IDs';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.testInterfaceCommandIDs = parseShortArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.testInterfaceSettingIDs = parseShortArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.testInterfaceEventIDs = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.SINGLE_NVRAM_CONFIGURATION_READ_WITH_ADDRESS_ECHO_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Single NVRAM Configuration Read With Address Echo';
         payload.configurationItemAddress = parse64Bit(index, data_view);
         index += 8;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.nvramConfiguration = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.HARDWARE_BATTERY_METER_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Hardware Battery Meter';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.datapacket = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.SOFTWARE_COULOMB_COUNTER_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Software Coulomb Counter';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.datapacket = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.WEARING_STATE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Wearing state';
         payload.worn = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.AUTO_ANSWER_ON_DON_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Auto-answer on don';
         payload.answerOnDon = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.AUTO_PAUSE_MEDIA_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Auto-pause media';
         payload.autoPauseMedia = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.AUTO_TRANSFER_CALL_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Auto-transfer call';
         payload.autoTransferCall = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.GET_AUTO_LOCK_CALL_BUTTON_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Get auto-lock call button';
         payload.autoLockCallButton = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.WEARING_SENSOR_ENABLED_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Wearing sensor enabled';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.AUTO_MUTE_CALL_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Auto-Mute call';
         payload.autoMuteCall = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.MIC_BOOM_POSITION_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Mic Boom Position';
         payload.orientation = data_view[index];
         index++;

         break;    
       
       case my.CONFIGURATION_FOR_A_CONNECTED_HEADSET_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configuration for a Connected Headset';
         payload.configuration = data_view[index];
         index++;

         break;    
       
       case my.GET_MUTE_TONE_VOLUME_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Get mute tone volume';
         payload.muteToneVolume = data_view[index];
         index++;

         break;    
       
       case my.GET_SECOND_INBOUND_CALL_RING_TYPE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Get second inbound call ring type';
         payload.ringType = data_view[index];
         index++;

         break;    
       
       case my.GET_MUTE_OFF_VP_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Get Mute off VP';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.GET_SCO_OPEN_TONE_ENABLE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Get SCO Open Tone Enable';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.GET_OLI_FEATURE_ENABLE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Get OLI feature Enable';
         payload.oLIenable = data_view[index];
         index++;

         break;    
       
       case my.MUTE_ALERT_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Mute Alert';
         payload.mode = data_view[index];
         index++;
         payload.parameter = data_view[index];
         index++;

         break;    
       
       case my.CURRENT_SIGNAL_STRENGTH_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Current signal strength';
         payload.connectionId = data_view[index];
         index++;
         payload.strength = data_view[index];
         index++;
         payload.nearFar = data_view[index];
         index++;

         break;    
       
       case my.CALLER_ANNOUNCEMENT_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Caller announcement';
         payload.value = data_view[index];
         index++;

         break;    
       
       case my.SIGNAL_STRENGTH_CONFIGURATION_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Signal strength configuration';
         payload.connectionId = data_view[index];
         index++;
         payload.enable = byteToBool(data_view[index]);
         index++;
         payload.dononly = byteToBool(data_view[index]);
         index++;
         payload.trend = byteToBool(data_view[index]);
         index++;
         payload.reportRssiAudio = byteToBool(data_view[index]);
         index++;
         payload.reportNearFarAudio = byteToBool(data_view[index]);
         index++;
         payload.reportNearFarToBase = byteToBool(data_view[index]);
         index++;
         payload.sensitivity = data_view[index];
         index++;
         payload.nearThreshold = data_view[index];
         index++;
         payload.maxTimeout = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.FIND_HEADSET_LED_ALERT_STATUS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Find Headset LED Alert Status';
         payload.enable = byteToBool(data_view[index]);
         index++;
         payload.timeout = data_view[index];
         index++;

         break;    
       
       case my.TXPOWER_REPORTING_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'TxPower Reporting';
         payload.connectionId = data_view[index];
         index++;
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.VOICE_SILENT_DETECTION_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Voice silent detection';
         payload.mode = data_view[index];
         index++;

         break;    
       
       case my.PRODUCT_NAME_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Product name';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.productName = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.TATTOO_SERIAL_NUMBER_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Tattoo Serial Number';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.serialNumber = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.USB_PID_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'USB PID';
         payload.pid = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.TATTOO_BUILD_CODE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Tattoo Build Code';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.buildCode = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.FIRMWARE_VERSION_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Firmware version';
         payload.buildTarget = parseShort(index, data_view);
         index += 2;
         payload.release = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.PART_NUMBER_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Part Number';
         payload.partNumber = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.USER_ID_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'User ID';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.userID = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.FIRST_DATE_USED_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'First Date Used';
         payload.month = parseShort(index, data_view);
         index += 2;
         payload.day = parseShort(index, data_view);
         index += 2;
         payload.year = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.LAST_DATE_USED_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Last Date Used';
         payload.month = parseShort(index, data_view);
         index += 2;
         payload.day = parseShort(index, data_view);
         index += 2;
         payload.year = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.LAST_DATE_CONNECTED_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Last Date Connected';
         payload.month = parseShort(index, data_view);
         index += 2;
         payload.day = parseShort(index, data_view);
         index += 2;
         payload.year = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.TIME_USED_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Time Used';
         payload.totalTime = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.USER_DEFINED_STORAGE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'User Defined Storage';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.data = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.VR_CALL_REJECT_AND_ANSWER_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'VR call reject and answer';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.A2DP_IS_ENABLED_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'A2DP is enabled';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.VOCALYST_PHONE_NUMBER_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Vocalyst phone number';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.vocalystPhoneNumber = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.VOCALYST_INFO_NUMBER_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Vocalyst info number';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.infoPhoneNumber = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.BATTERY_INFO_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Battery info';
         payload.level = data_view[index];
         index++;
         payload.numLevels = data_view[index];
         index++;
         payload.charging = byteToBool(data_view[index]);
         index++;
         payload.minutesOfTalkTime = parseShort(index, data_view);
         index += 2;
         payload.talkTimeIsHighEstimate = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.BATTERY_EXTENDED_INFO_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Battery Extended info';
         payload.voltage = parseShort(index, data_view);
         index += 2;
         payload.remainingcapacity = parseShort(index, data_view);
         index += 2;
         payload.current = parseShort(index, data_view);
         index += 2;
         payload.stateofcharge = data_view[index];
         index++;
         payload.temperature = data_view[index];
         index++;
         payload.totalcapacity = parseShort(index, data_view);
         index += 2;
         payload.totaltalktime = parseShort(index, data_view);
         index += 2;
         payload.numchargecycles = parseShort(index, data_view);
         index += 2;
         payload.numfullcharges = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.GENES_GUID_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Genes GUID';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.guid = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.MUTE_REMINDER_TIMING_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Mute reminder timing';
         payload.seconds = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.PAIRING_MODE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Pairing mode';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.SPOKEN_ANSWER_IGNORE_COMMAND_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Spoken answer/ignore command';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.LYNC_DIAL_TONE_ON_CALL_PRESS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Lync dial tone on Call press';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.MANUFACTURER_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Manufacturer';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.name = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.TOMBSTONE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Tombstone';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.crashDump = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.BLUETOOTH_ADDRESS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Bluetooth Address';
         payload.nap = parseShort(index, data_view);
         index += 2;
         payload.uap = data_view[index];
         index++;
         payload.lap = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.BLUETOOTH_CONNECTION_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Bluetooth Connection';
         payload.connectionOffset = parseShort(index, data_view);
         index += 2;
         payload.nap = parseShort(index, data_view);
         index += 2;
         payload.uap = data_view[index];
         index++;
         payload.lap = parse32Bit(index, data_view);
         index += 4;
         payload.priority = data_view[index];
         index++;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.productname = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.DECKARD_VERSION_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Deckard Version';
         payload.releaseOrDev = byteToBool(data_view[index]);
         index++;
         payload.majorVersion = parseShort(index, data_view);
         index += 2;
         payload.minorVersion = parseShort(index, data_view);
         index += 2;
         payload.maintenanceVersion = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.CONNECTION_STATUS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Connection Status';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.downstreamPortIDs = parseByteArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.connectedPortIDs = parseByteArray(index, data_view, bounds);
         index = bounds;
         payload.originatingPortID = data_view[index];
         index++;

         break;    
       
       case my.CALL_STATUS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Call status';
         payload.state = data_view[index];
         index++;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.number = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.MICROPHONE_MUTE_STATE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Microphone Mute State';
         payload.state = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.TRANSMIT_AUDIO_STATE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Transmit Audio State';
         payload.state = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.RECEIVE_AUDIO_STATE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Receive Audio State';
         payload.state = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.LED_STATUS_GENERIC_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'LED Status Generic';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.iD = parseByteArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.color = parseByteArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.state = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.HEADSET_AVAILABLE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Headset Available';
         payload.state = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.TRAINING_HEADSET_CONNECTION_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Training Headset Connection';
         payload.state = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.SPEAKER_VOLUME_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Speaker Volume';
         payload.volumeValueType = data_view[index];
         index++;
         payload.volume = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.SPOKEN_LANGUAGE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Spoken language';
         payload.languageId = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.SUPPORTED_LANGUAGES_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Supported Languages';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.languages = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.GET_PARTITION_INFORMATION_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Get Partition Information';
         payload.partition = parseShort(index, data_view);
         index += 2;
         payload.partitionId = parseShort(index, data_view);
         index += 2;
         payload.version = parseShort(index, data_view);
         index += 2;
         payload.partitionNumber = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.AUDIO_STATUS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Audio status';
         payload.codec = data_view[index];
         index++;
         payload.port = data_view[index];
         index++;
         payload.speakerGain = data_view[index];
         index++;
         payload.micGain = data_view[index];
         index++;

         break;    
       
       case my.LED_STATUS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'LED Status';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.lEDIndication = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.HEADSET_CALL_STATUS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Headset Call status';
         payload.numberOfDevices = parseShort(index, data_view);
         index += 2;
         payload.connectionId = data_view[index];
         index++;
         payload.state = data_view[index];
         index++;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.number = parseString(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.name = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.EXTENDED_CALL_STATUS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Extended Call status';
         payload.state = data_view[index];
         index++;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.number = parseString(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.name = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.DEVICE_INTERFACES_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Device interfaces';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.interfacesAndRingTones = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.RINGTONES_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Ringtones';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.ringTones = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.BANDWIDTHS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Bandwidths';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.bandwidths = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.RINGTONE_VOLUMES_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Ringtone volumes';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.volumes = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.DEFAULT_OUTBOUND_INTERFACE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Default Outbound Interface';
         payload.interfaceType = data_view[index];
         index++;

         break;    
       
       case my.TONE_CONTROLS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Tone Controls';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.toneLevels = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.AUDIO_SENSING_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Audio Sensing';
         payload.audioSensing = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.INTELLISTAND_AUTO_ANSWER_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Intellistand Auto-Answer';
         payload.intellistand = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.AUTO_CONNECT_TO_MOBILE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Auto-Connect to Mobile';
         payload.autoConnect = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.STOP_AUTO_CONNECT_ON_DOCK_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Stop Auto-Connect on Dock';
         payload.stopAutoConnect = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.BLUETOOTH_ENABLED_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Bluetooth Enabled';
         payload.bluetoothEnabled = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.OVER_THE_AIR_SUBSCRIPTION_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Over-the-Air Subscription';
         payload.otaEnabled = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.SYSTEM_TONE_VOLUME_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'System Tone Volume';
         payload.volume = data_view[index];
         index++;

         break;    
       
       case my.POWER_LEVEL_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Power Level';
         payload.powerLevel = data_view[index];
         index++;

         break;    
       
       case my.MOBILE_VOICE_COMMANDS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Mobile Voice Commands';
         payload.mobileVoiceCommands = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.VOLUME_CONTROL_ORIENTATION_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Volume Control Orientation';
         payload.orientation = data_view[index];
         index++;

         break;    
       
       case my.AAL_ACOUSTIC_INCIDENT_REPORTING_ENABLE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'AAL Acoustic Incident Reporting Enable';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.AAL_ACOUSTIC_INCIDENT_REPORTING_THRESHOLDS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'AAL Acoustic Incident Reporting Thresholds';
         payload.gainThreshold = data_view[index];
         index++;
         payload.timeThreshold = parseShort(index, data_view);
         index += 2;

         break;    
              
       case my.AAL_TWA_REPORTING_ENABLE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'AAL TWA Reporting Enable';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.AAL_TWA_REPORTING_TIME_PERIOD_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'AAL TWA Reporting Time Period';
         payload.timePeriod = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.ANTI_STARTLE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Anti-startle';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
              
       case my.G616_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'G616';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.CONVERSATION_DYNAMICS_REPORTING_ENABLE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Conversation Dynamics Reporting Enable';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.TIME_WEIGHTED_AVERAGE_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Time-weighted average';
         payload.twa = data_view[index];
         index++;

         break;    
       
       case my.CONVERSATION_DYNAMICS_REPORTING_TIME_PERIOD_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Conversation Dynamics Reporting Time Period';
         payload.timePeriod = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.TIME_WEIGHTED_AVERAGE_PERIOD_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Time-weighted average period';
         payload.twa = data_view[index];
         index++;

         break;    
              
       case my.GET_SUPPORTED_DSP_CAPABILITIES_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Get Supported DSP capabilities';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.supportedAndActive = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.GET_DSP_PARAMETERS_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Get DSP Parameters';
         payload.codec = data_view[index];
         index++;
         payload.storeIsVolatile = byteToBool(data_view[index]);
         index++;
         payload.parameterIndex = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.payload = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.FEATURE_LOCK_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Feature lock';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.commands = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.FEATURE_LOCK_MASK_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Feature lock Mask';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.commands = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.HAL_CURRENT_SCENARIO_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Hal Current Scenario';
         payload.scenario = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.HAL_CURRENT_VOLUME_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Hal Current Volume';
         payload.scenario = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.volumes = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.HAL_CURRENT_EQ_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Hal Current EQ';
         payload.scenario = parseShort(index, data_view);
         index += 2;
         payload.numberOfEQs = parseShort(index, data_view);
         index += 2;
         payload.eQId = data_view[index];
         index++;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.eQSettings = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.HAL_GENERIC_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Hal Generic';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.halGeneric = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.QUERY_SERVICES_CONFIGURATION_DATA_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Query services configuration data';
         payload.serviceID = parseShort(index, data_view);
         index += 2;
         payload.characteristic = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.configurationData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.QUERY_SERVICES_CALIBRATION_DATA_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Query services calibration data';
         payload.serviceID = parseShort(index, data_view);
         index += 2;
         payload.characteristic = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.calibrationData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.QUERY_APPLICATION_CONFIGURATION_DATA_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Query application configuration data';
         payload.featureID = parseShort(index, data_view);
         index += 2;
         payload.characteristic = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.configurationData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.QUERY_SERVICES_DATA_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Query services data';
         payload.serviceID = parseShort(index, data_view);
         index += 2;
         payload.characteristic = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.servicedata = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.GET_DEVICE_INFO_SETTING:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Get device info';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.majorHardwareVersion = parseByteArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.minorHardwareVersion = parseByteArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.majorFirmwareVersion = parseByteArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.minorFirmwareVersion = parseByteArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.supportedServices = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
      default:
       payload.type = "Unknown Setting"
       break;
    }
    return payload; 
  };
  
  
  
  
  
  
  //parses a settings success message (response from a get settings message)
  var parseEventResult = function(message){
    var payload = {};
    var data_view = new Uint8Array(message, BR_HEADER_SIZE);
    payload.messageId =  parseShort(0, data_view);
    switch(payload.messageId){
       
       case my.TEST_INTERFACE_ENABLE_DISABLE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Test Interface Enable-Disable';
         payload.testInterfaceEnable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.RAW_BUTTONTEST_EVENT_ENABLE_DISABLE:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Raw ButtonTest Event Enable-Disable';
         payload.rawButtonEventEnable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.RAW_BUTTON_TEST_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Raw Button Test event';
         payload.button = parseShort(index, data_view);
         index += 2;
         payload.buttonId = (payload.button & 0x00FF);
         payload.buttonPressTypeId = (payload.button & 0xFF00) >> 8;
         payload.buttonIdName = buttonIdToString(payload.buttonId);
         payload.buttonPressTypeIdName = pressTypeIdToString(payload.buttonPressTypeId);

         break;    
       
       case my.VOICE_RECOGNITION_TEST_EVENT_ENABLE_DISABLE:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Voice Recognition Test Event Enable-Disable';
         payload.voiceRecognitionEventEnable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.VOICE_RECOGNITION_TEST_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Voice Recognition Test event';
         payload.voiceRecognitionId = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.RAW_DATA_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Raw Data event';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.rawDataEventId = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.RAW_DATA_EVENT_ENABLE_DISABLE:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Raw Data Event Enable-Disable';
         payload.rawDataEventEnable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.CAPSENSE_RAW_DATA_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Capsense Raw Data event';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.capsenseRawData = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.SOFTWARE_BATTERY_DIAG_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Software Battery Diag';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.softwareBatteryData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.HARDWARE_BATTERY_DIAG_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Hardware Battery Diag';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.hardwareBatteryData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.COULOMB_COUNTER_DIAG_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Coulomb Counter Diag';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.coulombCounterData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.WEARING_STATE_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Wearing state changed';
         payload.worn = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.AUTO_ANSWER_ON_DON_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Auto-answer on don';
         payload.answerOnDon = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.CONFIGURE_AUTO_PAUSE_MEDIA_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure auto-pause media';
         payload.autoPauseMedia = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.CONFIGURE_AUTO_TRANSFER_CALL_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure auto-transfer call';
         payload.autoTransferCall = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.CONFIGURE_AUTO_LOCK_CALL_BUTTON_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure auto-lock call button';
         payload.autoLockCallButton = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.CONFIGURE_WEARING_SENSOR_ENABLED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure wearing sensor enabled';
         payload.wearingStateSensorEnabled = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.CONFIGURE_AUTO_MUTE_CALL_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure auto-Mute Call';
         payload.autoMuteCall = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.MIC_BOOM_POSITION_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Mic Boom Position';
         payload.orientation = data_view[index];
         index++;

         break;    
       
       case my.CONFIGURE_MUTE_TONE_VOLUME_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure mute tone volume';
         payload.muteToneVolume = data_view[index];
         index++;

         break;    
       
       case my.CONFIGURATION_FOR_A_CONNECTED_HEADSET_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configuration for a Connected Headset';
         payload.configuration = data_view[index];
         index++;

         break;    
       
       case my.CONFIGURE_SECOND_INBOUND_CALL_RING_TYPE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure second inbound call ring type';
         payload.ringType = data_view[index];
         index++;

         break;    
       
       case my.MUTE_OFF_VP_ENABLE_STATUS_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Mute off VP enable status changed';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.SCO_OPEN_TONE_ENABLE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'SCO Open Tone Enable';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.OLI_FEATURE_ENABLE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'OLI feature Enable';
         payload.oLIenable = data_view[index];
         index++;

         break;    
       
       case my.CONFIGURE_MUTE_ALERT_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure Mute Alert';
         payload.mode = data_view[index];
         index++;
         payload.parameter = data_view[index];
         index++;

         break;    
       
       case my.CONFIGURE_SIGNAL_STRENGTH_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure signal strength event';
         payload.connectionId = data_view[index];
         index++;
         payload.enable = byteToBool(data_view[index]);
         index++;
         payload.dononly = byteToBool(data_view[index]);
         index++;
         payload.trend = byteToBool(data_view[index]);
         index++;
         payload.reportRssiAudio = byteToBool(data_view[index]);
         index++;
         payload.reportNearFarAudio = byteToBool(data_view[index]);
         index++;
         payload.reportNearFarToBase = byteToBool(data_view[index]);
         index++;
         payload.sensitivity = data_view[index];
         index++;
         payload.nearThreshold = data_view[index];
         index++;
         payload.maxTimeout = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.DSP_TUNING_DATA_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'DSP Tuning Data';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.data = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.CUSTOM_BUTTON_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Custom Button';
         payload.index = data_view[index];
         index++;

         break;    
       
       case my.PLATFORM_SPECIFIC_INSTRUMENTATION_DATA_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Platform Specific Instrumentation Data';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.data = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.CONFIGURE_CALLER_ANNOUNCEMENT_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure caller announcement';
         payload.value = data_view[index];
         index++;

         break;    
       
       case my.MANUFACTURING_TEST_MESSAGE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Manufacturing Test Message';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.data = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.SIGNAL_STRENGTH_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Signal strength';
         payload.connectionId = data_view[index];
         index++;
         payload.strength = data_view[index];
         index++;
         payload.nearFar = data_view[index];
         index++;

         break;    
       
       case my.FIND_HEADSET_LED_ALERT_STATUS_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Find Headset LED Alert Status Changed';
         payload.enable = byteToBool(data_view[index]);
         index++;
         payload.timeout = data_view[index];
         index++;

         break;    
       
       case my.TRANSMIT_POWER_ENABLED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Transmit Power Enabled';
         payload.connectionId = data_view[index];
         index++;
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.TRANSMIT_POWER_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Transmit Power Changed';
         payload.connectionId = data_view[index];
         index++;
         payload.power = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.VOICE_SILENT_DETECTION_SETTING_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Voice silent detection setting changed';
         payload.mode = data_view[index];
         index++;

         break;    
       
       case my.VOICE_SILENT_DETECTED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Voice silent detected';
         payload.mode = data_view[index];
         index++;

         break;    
       
       case my.TATTOO_SERIAL_NUMBER_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Tattoo Serial Number';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.serialNumber = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.TATTOO_BUILD_CODE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Tattoo Build Code';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.buildCode = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.PART_NUMBER_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Part Number';
         payload.partNumber = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.USER_ID_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'User ID';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.userID = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.FIRST_DATE_USED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'First Date Used';
         payload.month = parseShort(index, data_view);
         index += 2;
         payload.day = parseShort(index, data_view);
         index += 2;
         payload.year = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.CONFIGURE_VR_CALL_REJECT_AND_ANSWER_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure VR call reject and answer';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.LAST_DATE_USED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Last Date Used';
         payload.month = parseShort(index, data_view);
         index += 2;
         payload.day = parseShort(index, data_view);
         index += 2;
         payload.year = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.LAST_DATE_CONNECTED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Last Date Connected';
         payload.month = parseShort(index, data_view);
         index += 2;
         payload.day = parseShort(index, data_view);
         index += 2;
         payload.year = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.CONFIGURE_A2DP_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure A2DP';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.TIME_USED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Time Used';
         payload.totalTime = parseShort(index, data_view);
         index += 2;

         break;    
              
       case my.SET_VOCALYST_PHONE_NUMBER_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set Vocalyst phone number';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.vocalystPhoneNumber = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.VOCALYST_INFO_NUMBER_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Vocalyst info number';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.infoPhoneNumber = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.BATTERY_STATUS_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Battery status changed';
         payload.level = data_view[index];
         index++;
         payload.numLevels = data_view[index];
         index++;
         payload.charging = byteToBool(data_view[index]);
         index++;
         payload.minutesOfTalkTime = parseShort(index, data_view);
         index += 2;
         payload.talkTimeIsHighEstimate = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.SET_GENES_GUID_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set Genes GUID';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.guid = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.CONFIGURE_MUTE_REMINDER_TIMING_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure mute reminder timing';
         payload.seconds = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.SET_PAIRING_MODE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set pairing mode';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.CONFIGURE_SPOKEN_ANSWER_IGNORE_COMMAND_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure spoken answer/ignore command';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.LOW_BATTERY_VOICE_PROMPT_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Low battery voice prompt';
         payload.urgency = data_view[index];
         index++;

         break;    
       
       case my.CONFIGURE_LYNC_DIAL_TONE_ON_CALL_PRESS_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Configure Lync dial tone on Call press';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
              
       case my.BLUETOOTH_CONNECTION_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Bluetooth Connection';
         payload.connectionOffset = parseShort(index, data_view);
         index += 2;
         payload.nap = parseShort(index, data_view);
         index += 2;
         payload.uap = data_view[index];
         index++;
         payload.lap = parse32Bit(index, data_view);
         index += 4;
         payload.priority = data_view[index];
         index++;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.productname = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.CONNECTED_DEVICE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Connected device';
         payload.address = data_view[index];
         index++;

         break;    
       
       case my.DISCONNECTED_DEVICE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Disconnected device';
         payload.address = data_view[index];
         index++;

         break;    
       
       case my.CALL_STATUS_CHANGE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Call status change';
         payload.state = data_view[index];
         index++;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.number = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.MICROPHONE_MUTE_STATE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Microphone Mute State';
         payload.state = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.TRANSMIT_AUDIO_STATE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Transmit Audio State';
         payload.state = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.RECEIVE_AUDIO_STATE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Receive Audio State';
         payload.state = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.LED_STATUS_GENERIC_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'LED Status Generic';
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.iD = parseByteArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.color = parseByteArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.state = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.HEADSET_AVAILABLE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Headset Available';
         payload.state = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.SPEAKER_VOLUME_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Speaker Volume';
         payload.volumeValueType = data_view[index];
         index++;
         payload.volume = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.TRAINING_HEADSET_CONNECTION_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Training Headset Connection';
         payload.state = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.CURRENT_SELECTED_LANGUAGE_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Current Selected Language Changed';
         payload.languageId = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.AUDIO_STATUS_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Audio status';
         payload.codec = data_view[index];
         index++;
         payload.port = data_view[index];
         index++;
         payload.speakerGain = data_view[index];
         index++;
         payload.micGain = data_view[index];
         index++;

         break;    
       
       case my.HEADSET_CALL_STATUS_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Headset Call status';
         payload.numberOfDevices = parseShort(index, data_view);
         index += 2;
         payload.connectionId = data_view[index];
         index++;
         payload.state = data_view[index];
         index++;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.number = parseString(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.name = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.EXTENDED_CALL_STATUS_CHANGE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Extended Call status change';
         payload.state = data_view[index];
         index++;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.number = parseString(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.name = parseString(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.SET_RINGTONE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set Ringtone';
         payload.interfaceType = data_view[index];
         index++;
         payload.ringTone = data_view[index];
         index++;

         break;    
       
       case my.SET_AUDIO_BANDWIDTH_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set Audio Bandwidth';
         payload.interfaceType = data_view[index];
         index++;
         payload.bandwidth = data_view[index];
         index++;

         break;    
       
       case my.SET_RINGTONE_VOLUME_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set Ringtone Volume';
         payload.interfaceType = data_view[index];
         index++;
         payload.volume = data_view[index];
         index++;

         break;    
       
       case my.SET_DEFAULT_OUTBOUND_INTERFACE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set Default Outbound Interface';
         payload.interfaceType = data_view[index];
         index++;

         break;    
       
       case my.SET_VOLUME_CONTROL_ORIENTATION_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set Volume Control Orientation';
         payload.orientation = data_view[index];
         index++;

         break;    
       
       case my.AAL_ACOUSTIC_INCIDENT_REPORTING_ENABLE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'AAL Acoustic Incident Reporting Enable';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.AAL_ACOUSTIC_INCIDENT_REPORTING_THRESHOLDS_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'AAL Acoustic Incident Reporting Thresholds';
         payload.gainThreshold = data_view[index];
         index++;
         payload.timeThreshold = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.AAL_ACOUSTIC_INCIDENT_REPORT_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'AAL Acoustic Incident Report';
         payload.incidentType = data_view[index];
         index++;
         payload.incidentDuration = parse32Bit(index, data_view);
         index += 4;
         payload.preLimiterSplEstimate = data_view[index];
         index++;
         payload.gainReduction = data_view[index];
         index++;

         break;    
       
       case my.AAL_TWA_REPORTING_ENABLE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'AAL TWA Reporting Enable';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.AAL_TWA_REPORTING_TIME_PERIOD_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'AAL TWA Reporting Time Period';
         payload.timePeriod = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.AAL_TWA_REPORT_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'AAL TWA Report';
         payload.preLimiterLongTermSplEstimate = data_view[index];
         index++;
         payload.postLimiterLongTermSplEstimate = data_view[index];
         index++;

         break;    
       
       case my.CONVERSATION_DYNAMICS_REPORTING_ENABLE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Conversation Dynamics Reporting Enable';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.CONVERSATION_DYNAMICS_REPORTING_TIME_PERIOD_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Conversation Dynamics Reporting Time Period';
         payload.timePeriod = parse32Bit(index, data_view);
         index += 4;

         break;    
       
       case my.CONVERSATION_DYNAMICS_REPORT_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Conversation Dynamics Report';
         payload.timePeriod = parseShort(index, data_view);
         index += 2;
         payload.farEndDuration = parseShort(index, data_view);
         index += 2;
         payload.nearEndDuration = parseShort(index, data_view);
         index += 2;
         payload.crosstalkDuration = parseShort(index, data_view);
         index += 2;
         payload.noTalkDuration = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.SET_ANTI_STARTLE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set Anti-startle';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.SET_G616_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set G616';
         payload.enable = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.SET_TIME_WEIGHTED_AVERAGE_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set time-weighted average';
         payload.twa = data_view[index];
         index++;

         break;    
       
       case my.SET_TIME_WEIGHTED_AVERAGE_PERIOD_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set time-weighted average period';
         payload.twa = data_view[index];
         index++;

         break;    
       
       case my.BLUETOOTH_DSP_STATUS_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Bluetooth DSP Status Changed';
         payload.messageid = parseShort(index, data_view);
         index += 2;
         payload.parametera = parseShort(index, data_view);
         index += 2;
         payload.parameterb = parseShort(index, data_view);
         index += 2;
         payload.parameterc = parseShort(index, data_view);
         index += 2;
         payload.parameterd = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.BLUETOOTH_DSP_STATUS_CHANGED_LONG_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Bluetooth DSP Status Changed Long';
         payload.keyAddr = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.keyParameter = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.BLUETOOTH_DSP_LOAD_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Bluetooth DSP Load Changed';
         payload.load = byteToBool(data_view[index]);
         index++;

         break;    
       
       case my.DSP_PARAMETERS_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'DSP Parameters';
         payload.codec = data_view[index];
         index++;
         payload.storeIsVolatile = byteToBool(data_view[index]);
         index++;
         payload.parameterIndex = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.payload = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.SET_FEATURE_LOCK_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Set feature lock';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.commands = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.HAL_CURRENT_SCENARIO_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Hal Current Scenario';
         payload.scenario = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.HAL_CONFIGURE_VOLUME_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Hal Configure Volume';
         payload.scenario = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.volumes = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.HAL_EQ_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Hal EQ Changed';
         payload.scenario = parseShort(index, data_view);
         index += 2;
         payload.numberOfEQs = parseShort(index, data_view);
         index += 2;
         payload.eQId = data_view[index];
         index++;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.eQSettings = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.SUBSCRIBE_TO_SERVICES_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Subscribe to services';
         payload.serviceID = parseShort(index, data_view);
         index += 2;
         payload.characteristic = parseShort(index, data_view);
         index += 2;
         payload.mode = parseShort(index, data_view);
         index += 2;
         payload.period = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.SUBSCRIBED_SERVICE_DATA_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Subscribed service data';
         payload.serviceID = parseShort(index, data_view);
         index += 2;
         payload.characteristic = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.serviceData = parseByteArray(index, data_view, bounds);
         index = bounds;
         switch(payload.serviceID){
          case my.TYPE_SERVICEID_HEADORIENTATION:
           //convert quaternians to eular angles - w, x, y, z
            var q = parse32BitArray(0, payload.serviceData, payload.serviceData.length);
            payload.quaternion = convertToQuaternion(q);
            break;
            case my.TYPE_SERVICEID_PEDOMETER:
            payload.steps = parse32Bit(0, payload.serviceData);
            break;
          case my.TYPE_SERVICEID_TAPS:
            payload.x = payload.serviceData[1];
            break;
          case my.TYPE_SERVICEID_FREEFALL:
            payload.freefall = byteToBool(payload.serviceData[0]);
            break;
          case my.TYPE_SERVICEID_VOICEEVENT:
            payload.voiceEventId = payload.serviceData[0];
            payload.voiceEventName = voiceEventIdToString(payload.voiceEventId);
            break;
         }

         break;    
       
       case my.SERVICE_CONFIGURATION_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Service configuration changed';
         payload.serviceID = parseShort(index, data_view);
         index += 2;
         payload.characteristic = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.configurationData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.SERVICE_CALIBRATION_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Service calibration changed';
         payload.serviceID = parseShort(index, data_view);
         index += 2;
         payload.characteristic = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.calibrationData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.APPLICATION_CONFIGURATION_CHANGED_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Application configuration changed';
         payload.featureID = parseShort(index, data_view);
         index += 2;
         payload.characteristic = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.configurationData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.APPLICATION_ACTION_RESULT_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Application action result';
         payload.featureID = parseShort(index, data_view);
         index += 2;
         payload.action = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.operatingData = parseByteArray(index, data_view, bounds);
         index = bounds;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.resultData = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.PASS_THROUGH_PROTOCOL_EVENT:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Pass Through Protocol';
         payload.protocolID = parseShort(index, data_view);
         index += 2;
         arrayLength = parseShort(index, data_view) ;
         index += 2;
         bounds = index + arrayLength;
         payload.dataBlob = parseByteArray(index, data_view, bounds);
         index = bounds;

         break;    
      default:
       payload.type = "Unknown Event"
       break;
    }
    return payload; 
  };
  
  
  
  
  
  
  //parses a settings success message (response from a get settings message)
  var parseException = function(message){
    var payload = {};
    var data_view = new Uint8Array(message, BR_HEADER_SIZE);
    payload.messageId =  parseShort(0, data_view);
    switch(payload.messageId){
                            
       case my.FEATURE_LOCK_ID_NOT_VALID_EXCEPTION:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Feature lock ID Not valid';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.commands = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
                     
       case my.INVALID_PACKET_LENGTH_EXCEPTION:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Invalid packet length';
         payload.invalidLength = parseShort(index, data_view);
         index += 2;

         break;    
       
       case my.INVALID_PACKET_TYPE_EXCEPTION:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Invalid packet type';
         payload.invalidType = data_view[index];
         index++;

         break;    
       
       case my.INVALID_MESSAGE_TYPE_EXCEPTION:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Invalid message type';
         payload.invalidType = parseShort(index, data_view);
         index += 2;

         break;    
                            
       case my.NUMBER_OUT_OF_RANGE_EXCEPTION:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Number out of range';
         payload.minimum = parse64Bit(index, data_view);
         index += 8;
         payload.maximum = parse64Bit(index, data_view);
         index += 8;

         break;    
       
       case my.ILLEGAL_VALUE_EXCEPTION:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Illegal value';
         payload.value = parse64Bit(index, data_view);
         index += 8;

         break;    
                     
       case my.INVALID_SERVICE_IDS_EXCEPTION:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Invalid service IDs';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.ids = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.INVALID_CHARACTERISTICS_OR_OPCODES_EXCEPTION:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Invalid characteristics or opcodes';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.characteristicsOrOpcodes = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.INVALID_SERVICE_MODES_EXCEPTION:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Invalid service modes';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.modes = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
       
       case my.INVALID_PAYLOAD_DATA_EXCEPTION:
         var index = 2;
         var bounds = 0;
         var arrayLength = 0;
         payload.name = 'Invalid payload data';
         arrayLength = parseShort(index, data_view);
         index += 2;
         bounds = (index + (2 * arrayLength));
         payload.modes = parseShortArray(index, data_view, bounds);
         index = bounds;

         break;    
          default:
         payload.type = "Unknown Exception"
         break;
    }
    return payload; 
  };
  
  
  
  
  
   
  //Creates the Host Negotiate Message
  my.createHostNegotiateMessage = function(options){
    var msg = options ? options : {};
    msg.messageType = my.PROTOCOL_VERSION_TYPE;
    if(!msg.address){
        msg.address = new ArrayBuffer(BR_ADDRESS_SIZE);
    }
    var data = new ArrayBuffer(3);
    var data_view = new Uint8Array(data);
    data_view[0] = 1;
    data_view[1] = 1; 
    msg.messageData = data; 
    
    var rawMessage = createRawMessage(msg);
    
    return my.parse(rawMessage);  
  }
  
  
  my.parse = function(message){
    if(!message){
        throw "parse: requires valid message object";
    }
    var data_view = new Uint8Array(message);
    var packetType =  (data_view[0] >>> 4)
    
    //message length
    var length = data_view[0] & 0X0F;
    length = length << 8;
    length = (length | data_view[1]);
  
    //message address in expanded form
    var address = [(data_view[2] >>>4).toString(16), 
                   (data_view[2] & 0x0F).toString(16),
                   (data_view[3] >>>4).toString(16),
                   (data_view[3] & 0x0F).toString(16),
                   (data_view[4] >>>4).toString(16),
                   (data_view[4] & 0x0F).toString(16),
                   (data_view[5] >>>4).toString(16)];
    
    var messageType = (data_view[5] & 0x0F);
    var payload = [];
    for(i = 6; i < data_view.length; i++){
        var highBs = data_view[i] >>> 4;
        var lowBs = data_view[i] & 0x0F; 
        payload.push(highBs.toString(16) + lowBs.toString(16)); 
    }
    
    var parsedMessage = {type: packetType, messageType: messageType, messageTypeName: messageTypeToString[messageType], length: length, address: address, payloadNibbles: payload, messageBytes: message }
    switch(messageType){
      case my.EVENT_TYPE:
        parsedMessage.payload = parseEventResult(message);
        break;
      case my.GET_RESULT_SUCCESS_TYPE:
        parsedMessage.payload = parseGetSettingResult(message);
        break;
      case my.PROTOCOL_VERSION_TYPE:
        parsedMessage.payload = protocolVersionToNameValuePairs(message);
        break;
      case my.METADATA_TYPE:
        parsedMessage.payload = parseMetaDataToNameValuePairs(message);
        break;
      case my.GET_RESULT_EXCEPTION_TYPE:
      case my.COMMAND_RESULT_EXCEPTION_TYPE:
        parsedMessage.payload = parseException(message);
        break;
      case my.COMMAND_RESULT_SUCCESS_TYPE:
        parsedMessage.payload = parseCommandSuccess(message);
        break;
      case my.GET_REQUEST_TYPE:
      case my.COMMAND_TYPE:
        //include the message id
        parsedMessage.payload = {};
        parsedMessage.payload.messageId =  parseShort(BR_HEADER_SIZE, data_view);
        break;
    }
    return parsedMessage;
  };
  
  
  var createRawMessage = function(msg){
    if(!msg.messageType){
      throw 'createRawMessage: msg requires int field: messageType';
    }
    if(!msg.address || msg.address.byteLength != BR_ADDRESS_SIZE){
      throw 'createRawMessage: msg requires byte[4] field: address';
    }

    var length = BR_ADDRESS_SIZE + (msg.messageId ? BR_MESSAGE_ID_SIZE : 0) 
                 + (msg.messageData ? msg.messageData.byteLength : 0);
    var message = new ArrayBuffer(BR_MESSAGE_TYPE_SIZE + length);
    var message_view = new Uint8Array(message);

    //header type - 4 bits
    message_view[0] = my.PROTOCOL_VERSION_TYPE << 4;

    //message length - 12 bits
    message_view[0] |= ((length & 0x0F00) >> 8);
    message_view[1] = (length & 0x00FF);

    var address_view = new Uint8Array(msg.address);
    //address - 17 bits
    message_view[2] = address_view[0];
    message_view[3] = address_view[1];
    message_view[4] = address_view[2];
    message_view[5] = address_view[3]; //the 2-high bits are part of the address, the 2 low bits part of the message type

    //message type - 4 bits + preserve any addressing
    message_view[5] |= (msg.messageType & 0x00FF);

    if(msg.messageId){
     //message id - split into two bytes
      message_view[6] = ((msg.messageId & 0xFF00) >> 8);
      message_view[7] = (msg.messageId & 0x00FF);
    }

    if(msg.messageData){
      //if there is a message id, shift the start of the data writing by 2 bytes
      var index = msg.messageId ? (BR_HEADER_SIZE + BR_MESSAGE_ID_SIZE) : BR_HEADER_SIZE;
      var data_view = new Uint8Array(msg.messageData);
      for(i=0; i < msg.messageData.byteLength; i++){
        message_view[index++] = data_view[i];
      }
    }

    return message;
  };
  
    var protocolVersionToNameValuePairs = function(message){
    
  };
    
  var parseCommandSuccess = function(message){
    var payload = {};
    var data_view = new Uint8Array(message, BR_HEADER_SIZE);
    payload.messageId =  parseShort(0, data_view);
    return payload;
  }
     
        
  var parseMetaDataToNameValuePairs = function(message){
    var payload = {"supportedCommands" : [],
                   "supportedGetSettings" : [],
                   "supportedEvents" : [],
                   "availablePorts" : []};
     
     var data_view = new Uint8Array(message, BR_HEADER_SIZE);
     var index = 0;
     var bounds = 2;
     var arrayLength = parseShort(index, data_view, bounds);
     
     //adjust the index to point to the start of the array
     index += 2;
    
     //Set the bounds to the upper limit of the array  
     //bounds is multipled by 2 because the array sent back from the device
     //are 16 bit short integers - which map over to message ids
     bounds = index + (2 * arrayLength);
     payload.supportedCommands = parseShortArray(index, data_view, bounds);
     
     index = bounds;
     bounds = index + 2;
     arrayLength = parseShort(index, data_view, bounds);
     index += 2;
     bounds = index +  (2 * arrayLength);
     payload.supportedGetSettings = parseShortArray(index, data_view, bounds);
     
     index = bounds;
     bounds = index + 2;
     arrayLength = parseShort(index, data_view, bounds);
     index += 2;
     bounds = index +  (2 * arrayLength);
     payload.supportedEvents = parseShortArray(index, data_view, bounds);
   
     index = bounds;
     bounds = index + 2;
     arrayLength = parseShort(index, data_view, bounds);
     
     index += 2;
     bounds = index + arrayLength;
     //bytes instead 16 bit integers
     //for available ports - this array is stored as single bits
     payload.availablePorts = parseByteArray(index, data_view, bounds)
    
    return payload;
  };
  
  var voiceEventIdToString = function(voiceEventId){
    var s = "";
    switch(voiceEventId){
      case 1:
        s = "Distance";
        break;    
      case 2:
        s = "What time is it";
        break;
      case 3:
        s = "Pair mode";
        break;
      case 4:
        s = "Talk to Cortana";
        break;
      case 5:
        s = "Launch it";
        break;
      case 6:
        s = "Redial";
        break;
      case 7:
        s = "Voice memo";
        break;
      case 8:
        s = "Secure";
        break;
      case 9:
        s = "Talk to Siri";
        break;
      case 10:
        s = "Step count";
        break;
      case 11:
        s = "Unlock";
        break;
      case 12:
        s = "Talk to Google";
        break;
      case 13:
        s = "Help me";
        break;
      case 14:
        s = "Call";
        break;
      case 15:
        s = "Return call";
        break;
      default:
        s = "Unknown event";
        break
    }
    return s;
  };
  
  var muteToneVolumeIdToString = function(muteToneVolume){
    var s = "";
    switch(muteToneVolume){
          case 0:
            s = "off";
            break;
          case 1:
            s = "low";
            break;
          case 2:
            s = "standard";
            break;
          default:
            s = "unknown";
            break;
    }
    return s;    
  };
  
  var pressTypeIdToString = function(pressTypeId){
    switch (pressTypeId) {
      case 0:
        return "Short Press";
      case 1:
        return "Medium Press";
      case 2:
        return "Long Press";
      case 3:
        return "Very Long Press";
      case 4:
        return "Double Press";
      default:
        return "Unknown";
    }
  };
  
  var buttonIdToString = function(buttonId){
   switch(buttonId){
    case 1:
      return "Power";
    case 2: 
      return "Hook";                            
    case 3: 
      return "Talk";
    case 4: 
      return "Volume Up";
    case 5: 
      return "Volume Down";
    case 6: 
      return "Mute";
    default:
      return "Unknown";
   }
  };
  
  var ringTypeIdToString = function(ringType){
    var s = "";
    switch(ringType){
          case 0:
            s = "ignore";
            break;
          case 1:
            s = "ring once";
            break;
          case 2:
            s = "ring continiously";
            break;
          default:
            s = "unknown";
            break;
    }
    return s;     
  };
  
  var boolToByte = function(bool){
    return bool ? 1 : 0;
  };
  
  var byteToBool = function(b){
    return b == 1;
  };
  
  var parseShort = function(index, buffer){
    var val = buffer[index] << 8;
    val += (buffer[index+1] & 0xFF);
    return val;
  };

  var parse32Bit = function(index, buffer){
    if(buffer.length < 4){
      throw "error parsing 32 bit value - array is undersized";
    }
    var val = buffer[index] << 24;
    val += (buffer[index+1] & 0xFF) << 16;
    val += (buffer[index+2] & 0xFF) << 8;
    val += (buffer[index+3] & 0xFF);
    return val;
  }

  var parse64Bit = function(index, buffer){
    if(buffer.length < 8){
      throw "error parsing 32 bit value - array is undersized";
    }
    var val = buffer[index] << 56;
    val += (buffer[index + 1]  & 0xFF) << 48;
    val += (buffer[index + 2] & 0xFF) << 40;
    val += (buffer[index + 3] & 0xFF) << 32;
    val += (buffer[index + 4] & 0xFF) << 24;
    val += (buffer[index + 5] & 0xFF) << 16;
    val += (buffer[index + 6] & 0xFF) << 8;
    val += (buffer[index + 7] & 0xFF)
    return val;
  }
  var parse32BitArray = function(index, buffer, bounds){
    var result = new Array();
    for(index; index < bounds; index+=4){
      result.push(parse32Bit(index, buffer));
    }
    return result;
  }

  var parseShortArray = function(index, buffer, bounds){
    var result = new Array();
    for(index; index < bounds; index+=2){
      result.push(parseShort(index, buffer));
    }
    return result;
  };
  
  var parseByteArray = function(index, buffer, bounds){
   var result = new Array();
   for(index; index < bounds; index++){
    var val = buffer[index]
    result.push(val);
   }
   return result;
  };
    
  var parseString = function(index, buffer, bounds){
    var result = "";
    for(index; index < bounds; index+=2){
      var val = buffer[index] << 8;
      val += (buffer[index+1] & 0xFF);
      result += String.fromCharCode(val);
    }
    return result.toString();
  };
  
  var convertToQuaternion = function(s){
    var w = s[0];
    var x = s[1];
    var y = s[2];
    var z = s[3];
  
    if (w > 32767) w -= 65536;
    if (x > 32767) x -= 65536;
    if (y > 32767) y -= 65536;
    if (z > 32767) z -= 65536;
    
    var x1 = x/16384.0;
    var y1 = y/16384.0;
    var z1 = z/16384.0;
    var w1 = w/16384.0;
    
    return {"w": w1, "x": x1, "y": y1, "z": z1}
  };

  
  
  return my;
}());

